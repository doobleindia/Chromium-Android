// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wifi_configuration_specifics.proto

package org.chromium.components.sync.protocol;

public interface WifiConfigurationSpecificsDataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sync_pb.WifiConfigurationSpecificsData)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * SSID encoded to hex, letters should be upper case and 0x prefix should be
   * omitted. For example, ssid "network" would be provided as "6E6574776F726B".
   * </pre>
   *
   * <code>optional bytes hex_ssid = 1;</code>
   */
  boolean hasHexSsid();
  /**
   * <pre>
   * SSID encoded to hex, letters should be upper case and 0x prefix should be
   * omitted. For example, ssid "network" would be provided as "6E6574776F726B".
   * </pre>
   *
   * <code>optional bytes hex_ssid = 1;</code>
   */
  com.google.protobuf.ByteString getHexSsid();

  /**
   * <code>optional .sync_pb.WifiConfigurationSpecificsData.SecurityType security_type = 2;</code>
   */
  boolean hasSecurityType();
  /**
   * <code>optional .sync_pb.WifiConfigurationSpecificsData.SecurityType security_type = 2;</code>
   */
  org.chromium.components.sync.protocol.WifiConfigurationSpecificsData.SecurityType getSecurityType();

  /**
   * <pre>
   * The passphrase can be ASCII, UTF-8, or a string of hex digits.
   * </pre>
   *
   * <code>optional bytes passphrase = 3;</code>
   */
  boolean hasPassphrase();
  /**
   * <pre>
   * The passphrase can be ASCII, UTF-8, or a string of hex digits.
   * </pre>
   *
   * <code>optional bytes passphrase = 3;</code>
   */
  com.google.protobuf.ByteString getPassphrase();

  /**
   * <code>optional .sync_pb.WifiConfigurationSpecificsData.AutomaticallyConnectOption automatically_connect = 4;</code>
   */
  boolean hasAutomaticallyConnect();
  /**
   * <code>optional .sync_pb.WifiConfigurationSpecificsData.AutomaticallyConnectOption automatically_connect = 4;</code>
   */
  org.chromium.components.sync.protocol.WifiConfigurationSpecificsData.AutomaticallyConnectOption getAutomaticallyConnect();

  /**
   * <code>optional .sync_pb.WifiConfigurationSpecificsData.IsPreferredOption is_preferred = 5;</code>
   */
  boolean hasIsPreferred();
  /**
   * <code>optional .sync_pb.WifiConfigurationSpecificsData.IsPreferredOption is_preferred = 5;</code>
   */
  org.chromium.components.sync.protocol.WifiConfigurationSpecificsData.IsPreferredOption getIsPreferred();

  /**
   * <code>optional .sync_pb.WifiConfigurationSpecificsData.MeteredOption metered = 6;</code>
   */
  boolean hasMetered();
  /**
   * <code>optional .sync_pb.WifiConfigurationSpecificsData.MeteredOption metered = 6;</code>
   */
  org.chromium.components.sync.protocol.WifiConfigurationSpecificsData.MeteredOption getMetered();

  /**
   * <code>optional .sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration proxy_configuration = 7;</code>
   */
  boolean hasProxyConfiguration();
  /**
   * <code>optional .sync_pb.WifiConfigurationSpecificsData.ProxyConfiguration proxy_configuration = 7;</code>
   */
  org.chromium.components.sync.protocol.WifiConfigurationSpecificsData.ProxyConfiguration getProxyConfiguration();

  /**
   * <pre>
   * List of DNS servers to be used.  Up to 4.
   * </pre>
   *
   * <code>repeated string custom_dns = 8;</code>
   */
  java.util.List<String>
      getCustomDnsList();
  /**
   * <pre>
   * List of DNS servers to be used.  Up to 4.
   * </pre>
   *
   * <code>repeated string custom_dns = 8;</code>
   */
  int getCustomDnsCount();
  /**
   * <pre>
   * List of DNS servers to be used.  Up to 4.
   * </pre>
   *
   * <code>repeated string custom_dns = 8;</code>
   */
  java.lang.String getCustomDns(int index);
  /**
   * <pre>
   * List of DNS servers to be used.  Up to 4.
   * </pre>
   *
   * <code>repeated string custom_dns = 8;</code>
   */
  com.google.protobuf.ByteString
      getCustomDnsBytes(int index);

  /**
   * <pre>
   * This is represented by the UNIX timestamp, ms since epoch.
   * </pre>
   *
   * <code>optional int64 last_update_timestamp = 9;</code>
   */
  boolean hasLastUpdateTimestamp();
  /**
   * <pre>
   * This is represented by the UNIX timestamp, ms since epoch.
   * </pre>
   *
   * <code>optional int64 last_update_timestamp = 9;</code>
   */
  long getLastUpdateTimestamp();
}
