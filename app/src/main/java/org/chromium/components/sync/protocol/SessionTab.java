// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session_specifics.proto

package org.chromium.components.sync.protocol;

/**
 * Protobuf type {@code sync_pb.SessionTab}
 */
public  final class SessionTab extends
    com.google.protobuf.GeneratedMessageLite<
        SessionTab, SessionTab.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.SessionTab)
    SessionTabOrBuilder {
  private SessionTab() {
    tabId_ = -1;
    tabVisualIndex_ = -1;
    currentNavigationIndex_ = -1;
    extensionAppId_ = "";
    navigation_ = emptyProtobufList();
    favicon_ = com.google.protobuf.ByteString.EMPTY;
    faviconType_ = 1;
    faviconSource_ = "";
    variationId_ = emptyLongList();
  }
  /**
   * <pre>
   * The type of favicon. For now only normal web favicons are supported.
   * </pre>
   *
   * Protobuf enum {@code sync_pb.SessionTab.FaviconType}
   */
  public enum FaviconType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>TYPE_WEB_FAVICON = 1;</code>
     */
    TYPE_WEB_FAVICON(1),
    ;

    /**
     * <code>TYPE_WEB_FAVICON = 1;</code>
     */
    public static final int TYPE_WEB_FAVICON_VALUE = 1;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static FaviconType valueOf(int value) {
      return forNumber(value);
    }

    public static FaviconType forNumber(int value) {
      switch (value) {
        case 1: return TYPE_WEB_FAVICON;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FaviconType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        FaviconType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FaviconType>() {
            public FaviconType findValueByNumber(int number) {
              return FaviconType.forNumber(number);
            }
          };

    private final int value;

    private FaviconType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sync_pb.SessionTab.FaviconType)
  }

  private int bitField0_;
  public static final int TAB_ID_FIELD_NUMBER = 1;
  private int tabId_;
  /**
   * <pre>
   * Unique (to the owner) id for this tab.
   * </pre>
   *
   * <code>optional int32 tab_id = 1 [default = -1];</code>
   */
  public boolean hasTabId() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * Unique (to the owner) id for this tab.
   * </pre>
   *
   * <code>optional int32 tab_id = 1 [default = -1];</code>
   */
  public int getTabId() {
    return tabId_;
  }
  /**
   * <pre>
   * Unique (to the owner) id for this tab.
   * </pre>
   *
   * <code>optional int32 tab_id = 1 [default = -1];</code>
   */
  private void setTabId(int value) {
    bitField0_ |= 0x00000001;
    tabId_ = value;
  }
  /**
   * <pre>
   * Unique (to the owner) id for this tab.
   * </pre>
   *
   * <code>optional int32 tab_id = 1 [default = -1];</code>
   */
  private void clearTabId() {
    bitField0_ = (bitField0_ & ~0x00000001);
    tabId_ = -1;
  }

  public static final int WINDOW_ID_FIELD_NUMBER = 2;
  private int windowId_;
  /**
   * <pre>
   * The unique id for the window this tab belongs to.
   * </pre>
   *
   * <code>optional int32 window_id = 2;</code>
   */
  public boolean hasWindowId() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * The unique id for the window this tab belongs to.
   * </pre>
   *
   * <code>optional int32 window_id = 2;</code>
   */
  public int getWindowId() {
    return windowId_;
  }
  /**
   * <pre>
   * The unique id for the window this tab belongs to.
   * </pre>
   *
   * <code>optional int32 window_id = 2;</code>
   */
  private void setWindowId(int value) {
    bitField0_ |= 0x00000002;
    windowId_ = value;
  }
  /**
   * <pre>
   * The unique id for the window this tab belongs to.
   * </pre>
   *
   * <code>optional int32 window_id = 2;</code>
   */
  private void clearWindowId() {
    bitField0_ = (bitField0_ & ~0x00000002);
    windowId_ = 0;
  }

  public static final int TAB_VISUAL_INDEX_FIELD_NUMBER = 3;
  private int tabVisualIndex_;
  /**
   * <pre>
   * Visual index of the tab within its window. There may be gaps in these
   * values.
   * </pre>
   *
   * <code>optional int32 tab_visual_index = 3 [default = -1];</code>
   */
  public boolean hasTabVisualIndex() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * Visual index of the tab within its window. There may be gaps in these
   * values.
   * </pre>
   *
   * <code>optional int32 tab_visual_index = 3 [default = -1];</code>
   */
  public int getTabVisualIndex() {
    return tabVisualIndex_;
  }
  /**
   * <pre>
   * Visual index of the tab within its window. There may be gaps in these
   * values.
   * </pre>
   *
   * <code>optional int32 tab_visual_index = 3 [default = -1];</code>
   */
  private void setTabVisualIndex(int value) {
    bitField0_ |= 0x00000004;
    tabVisualIndex_ = value;
  }
  /**
   * <pre>
   * Visual index of the tab within its window. There may be gaps in these
   * values.
   * </pre>
   *
   * <code>optional int32 tab_visual_index = 3 [default = -1];</code>
   */
  private void clearTabVisualIndex() {
    bitField0_ = (bitField0_ & ~0x00000004);
    tabVisualIndex_ = -1;
  }

  public static final int CURRENT_NAVIGATION_INDEX_FIELD_NUMBER = 4;
  private int currentNavigationIndex_;
  /**
   * <pre>
   * Identifies the index of the current navigation in navigations. For
   * example, if this is 2 it means the current navigation is navigations[2].
   * </pre>
   *
   * <code>optional int32 current_navigation_index = 4 [default = -1];</code>
   */
  public boolean hasCurrentNavigationIndex() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * Identifies the index of the current navigation in navigations. For
   * example, if this is 2 it means the current navigation is navigations[2].
   * </pre>
   *
   * <code>optional int32 current_navigation_index = 4 [default = -1];</code>
   */
  public int getCurrentNavigationIndex() {
    return currentNavigationIndex_;
  }
  /**
   * <pre>
   * Identifies the index of the current navigation in navigations. For
   * example, if this is 2 it means the current navigation is navigations[2].
   * </pre>
   *
   * <code>optional int32 current_navigation_index = 4 [default = -1];</code>
   */
  private void setCurrentNavigationIndex(int value) {
    bitField0_ |= 0x00000008;
    currentNavigationIndex_ = value;
  }
  /**
   * <pre>
   * Identifies the index of the current navigation in navigations. For
   * example, if this is 2 it means the current navigation is navigations[2].
   * </pre>
   *
   * <code>optional int32 current_navigation_index = 4 [default = -1];</code>
   */
  private void clearCurrentNavigationIndex() {
    bitField0_ = (bitField0_ & ~0x00000008);
    currentNavigationIndex_ = -1;
  }

  public static final int PINNED_FIELD_NUMBER = 5;
  private boolean pinned_;
  /**
   * <pre>
   * True if the tab is pinned.
   * </pre>
   *
   * <code>optional bool pinned = 5 [default = false];</code>
   */
  public boolean hasPinned() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <pre>
   * True if the tab is pinned.
   * </pre>
   *
   * <code>optional bool pinned = 5 [default = false];</code>
   */
  public boolean getPinned() {
    return pinned_;
  }
  /**
   * <pre>
   * True if the tab is pinned.
   * </pre>
   *
   * <code>optional bool pinned = 5 [default = false];</code>
   */
  private void setPinned(boolean value) {
    bitField0_ |= 0x00000010;
    pinned_ = value;
  }
  /**
   * <pre>
   * True if the tab is pinned.
   * </pre>
   *
   * <code>optional bool pinned = 5 [default = false];</code>
   */
  private void clearPinned() {
    bitField0_ = (bitField0_ & ~0x00000010);
    pinned_ = false;
  }

  public static final int EXTENSION_APP_ID_FIELD_NUMBER = 6;
  private java.lang.String extensionAppId_;
  /**
   * <pre>
   * If non-empty, this tab is an app tab and this is the id of the extension.
   * </pre>
   *
   * <code>optional string extension_app_id = 6;</code>
   */
  public boolean hasExtensionAppId() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * If non-empty, this tab is an app tab and this is the id of the extension.
   * </pre>
   *
   * <code>optional string extension_app_id = 6;</code>
   */
  public java.lang.String getExtensionAppId() {
    return extensionAppId_;
  }
  /**
   * <pre>
   * If non-empty, this tab is an app tab and this is the id of the extension.
   * </pre>
   *
   * <code>optional string extension_app_id = 6;</code>
   */
  public com.google.protobuf.ByteString
      getExtensionAppIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(extensionAppId_);
  }
  /**
   * <pre>
   * If non-empty, this tab is an app tab and this is the id of the extension.
   * </pre>
   *
   * <code>optional string extension_app_id = 6;</code>
   */
  private void setExtensionAppId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
    extensionAppId_ = value;
  }
  /**
   * <pre>
   * If non-empty, this tab is an app tab and this is the id of the extension.
   * </pre>
   *
   * <code>optional string extension_app_id = 6;</code>
   */
  private void clearExtensionAppId() {
    bitField0_ = (bitField0_ & ~0x00000020);
    extensionAppId_ = getDefaultInstance().getExtensionAppId();
  }
  /**
   * <pre>
   * If non-empty, this tab is an app tab and this is the id of the extension.
   * </pre>
   *
   * <code>optional string extension_app_id = 6;</code>
   */
  private void setExtensionAppIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
    extensionAppId_ = value.toStringUtf8();
  }

  public static final int NAVIGATION_FIELD_NUMBER = 7;
  private com.google.protobuf.Internal.ProtobufList<org.chromium.components.sync.protocol.TabNavigation> navigation_;
  /**
   * <pre>
   * Tabs are navigated, and the navigation data is here.
   * </pre>
   *
   * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
   */
  public java.util.List<org.chromium.components.sync.protocol.TabNavigation> getNavigationList() {
    return navigation_;
  }
  /**
   * <pre>
   * Tabs are navigated, and the navigation data is here.
   * </pre>
   *
   * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
   */
  public java.util.List<? extends org.chromium.components.sync.protocol.TabNavigationOrBuilder> 
      getNavigationOrBuilderList() {
    return navigation_;
  }
  /**
   * <pre>
   * Tabs are navigated, and the navigation data is here.
   * </pre>
   *
   * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
   */
  public int getNavigationCount() {
    return navigation_.size();
  }
  /**
   * <pre>
   * Tabs are navigated, and the navigation data is here.
   * </pre>
   *
   * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
   */
  public org.chromium.components.sync.protocol.TabNavigation getNavigation(int index) {
    return navigation_.get(index);
  }
  /**
   * <pre>
   * Tabs are navigated, and the navigation data is here.
   * </pre>
   *
   * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
   */
  public org.chromium.components.sync.protocol.TabNavigationOrBuilder getNavigationOrBuilder(
      int index) {
    return navigation_.get(index);
  }
  private void ensureNavigationIsMutable() {
    if (!navigation_.isModifiable()) {
      navigation_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(navigation_);
     }
  }

  /**
   * <pre>
   * Tabs are navigated, and the navigation data is here.
   * </pre>
   *
   * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
   */
  private void setNavigation(
      int index, org.chromium.components.sync.protocol.TabNavigation value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureNavigationIsMutable();
    navigation_.set(index, value);
  }
  /**
   * <pre>
   * Tabs are navigated, and the navigation data is here.
   * </pre>
   *
   * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
   */
  private void setNavigation(
      int index, org.chromium.components.sync.protocol.TabNavigation.Builder builderForValue) {
    ensureNavigationIsMutable();
    navigation_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * Tabs are navigated, and the navigation data is here.
   * </pre>
   *
   * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
   */
  private void addNavigation(org.chromium.components.sync.protocol.TabNavigation value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureNavigationIsMutable();
    navigation_.add(value);
  }
  /**
   * <pre>
   * Tabs are navigated, and the navigation data is here.
   * </pre>
   *
   * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
   */
  private void addNavigation(
      int index, org.chromium.components.sync.protocol.TabNavigation value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureNavigationIsMutable();
    navigation_.add(index, value);
  }
  /**
   * <pre>
   * Tabs are navigated, and the navigation data is here.
   * </pre>
   *
   * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
   */
  private void addNavigation(
      org.chromium.components.sync.protocol.TabNavigation.Builder builderForValue) {
    ensureNavigationIsMutable();
    navigation_.add(builderForValue.build());
  }
  /**
   * <pre>
   * Tabs are navigated, and the navigation data is here.
   * </pre>
   *
   * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
   */
  private void addNavigation(
      int index, org.chromium.components.sync.protocol.TabNavigation.Builder builderForValue) {
    ensureNavigationIsMutable();
    navigation_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * Tabs are navigated, and the navigation data is here.
   * </pre>
   *
   * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
   */
  private void addAllNavigation(
      java.lang.Iterable<? extends org.chromium.components.sync.protocol.TabNavigation> values) {
    ensureNavigationIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, navigation_);
  }
  /**
   * <pre>
   * Tabs are navigated, and the navigation data is here.
   * </pre>
   *
   * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
   */
  private void clearNavigation() {
    navigation_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Tabs are navigated, and the navigation data is here.
   * </pre>
   *
   * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
   */
  private void removeNavigation(int index) {
    ensureNavigationIsMutable();
    navigation_.remove(index);
  }

  public static final int FAVICON_FIELD_NUMBER = 8;
  private com.google.protobuf.ByteString favicon_;
  /**
   * <pre>
   * The favicon for the current url the tab is displaying. Either empty
   * or a valid PNG encoded favicon.
   * </pre>
   *
   * <code>optional bytes favicon = 8 [deprecated = true];</code>
   */
  @java.lang.Deprecated public boolean hasFavicon() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <pre>
   * The favicon for the current url the tab is displaying. Either empty
   * or a valid PNG encoded favicon.
   * </pre>
   *
   * <code>optional bytes favicon = 8 [deprecated = true];</code>
   */
  @java.lang.Deprecated public com.google.protobuf.ByteString getFavicon() {
    return favicon_;
  }
  /**
   * <pre>
   * The favicon for the current url the tab is displaying. Either empty
   * or a valid PNG encoded favicon.
   * </pre>
   *
   * <code>optional bytes favicon = 8 [deprecated = true];</code>
   */
  private void setFavicon(com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
    favicon_ = value;
  }
  /**
   * <pre>
   * The favicon for the current url the tab is displaying. Either empty
   * or a valid PNG encoded favicon.
   * </pre>
   *
   * <code>optional bytes favicon = 8 [deprecated = true];</code>
   */
  private void clearFavicon() {
    bitField0_ = (bitField0_ & ~0x00000040);
    favicon_ = getDefaultInstance().getFavicon();
  }

  public static final int FAVICON_TYPE_FIELD_NUMBER = 9;
  private int faviconType_;
  /**
   * <code>optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];</code>
   */
  @java.lang.Deprecated public boolean hasFaviconType() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <code>optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];</code>
   */
  @java.lang.Deprecated public org.chromium.components.sync.protocol.SessionTab.FaviconType getFaviconType() {
    org.chromium.components.sync.protocol.SessionTab.FaviconType result = org.chromium.components.sync.protocol.SessionTab.FaviconType.forNumber(faviconType_);
    return result == null ? org.chromium.components.sync.protocol.SessionTab.FaviconType.TYPE_WEB_FAVICON : result;
  }
  /**
   * <code>optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];</code>
   */
  private void setFaviconType(org.chromium.components.sync.protocol.SessionTab.FaviconType value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000080;
    faviconType_ = value.getNumber();
  }
  /**
   * <code>optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];</code>
   */
  private void clearFaviconType() {
    bitField0_ = (bitField0_ & ~0x00000080);
    faviconType_ = 1;
  }

  public static final int FAVICON_SOURCE_FIELD_NUMBER = 11;
  private java.lang.String faviconSource_;
  /**
   * <pre>
   * The url of the actual favicon (as opposed to the page using the favicon).
   * </pre>
   *
   * <code>optional string favicon_source = 11 [deprecated = true];</code>
   */
  @java.lang.Deprecated public boolean hasFaviconSource() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <pre>
   * The url of the actual favicon (as opposed to the page using the favicon).
   * </pre>
   *
   * <code>optional string favicon_source = 11 [deprecated = true];</code>
   */
  @java.lang.Deprecated public java.lang.String getFaviconSource() {
    return faviconSource_;
  }
  /**
   * <pre>
   * The url of the actual favicon (as opposed to the page using the favicon).
   * </pre>
   *
   * <code>optional string favicon_source = 11 [deprecated = true];</code>
   */
  @java.lang.Deprecated public com.google.protobuf.ByteString
      getFaviconSourceBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(faviconSource_);
  }
  /**
   * <pre>
   * The url of the actual favicon (as opposed to the page using the favicon).
   * </pre>
   *
   * <code>optional string favicon_source = 11 [deprecated = true];</code>
   */
  private void setFaviconSource(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
    faviconSource_ = value;
  }
  /**
   * <pre>
   * The url of the actual favicon (as opposed to the page using the favicon).
   * </pre>
   *
   * <code>optional string favicon_source = 11 [deprecated = true];</code>
   */
  private void clearFaviconSource() {
    bitField0_ = (bitField0_ & ~0x00000100);
    faviconSource_ = getDefaultInstance().getFaviconSource();
  }
  /**
   * <pre>
   * The url of the actual favicon (as opposed to the page using the favicon).
   * </pre>
   *
   * <code>optional string favicon_source = 11 [deprecated = true];</code>
   */
  private void setFaviconSourceBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
    faviconSource_ = value.toStringUtf8();
  }

  public static final int VARIATION_ID_FIELD_NUMBER = 12;
  private com.google.protobuf.Internal.LongList variationId_;
  /**
   * <pre>
   * Ids of the currently assigned variations which should be sent to sync.
   * </pre>
   *
   * <code>repeated uint64 variation_id = 12 [deprecated = true];</code>
   */
  @java.lang.Deprecated public java.util.List<java.lang.Long>
      getVariationIdList() {
    return variationId_;
  }
  /**
   * <pre>
   * Ids of the currently assigned variations which should be sent to sync.
   * </pre>
   *
   * <code>repeated uint64 variation_id = 12 [deprecated = true];</code>
   */
  @java.lang.Deprecated public int getVariationIdCount() {
    return variationId_.size();
  }
  /**
   * <pre>
   * Ids of the currently assigned variations which should be sent to sync.
   * </pre>
   *
   * <code>repeated uint64 variation_id = 12 [deprecated = true];</code>
   */
  @java.lang.Deprecated public long getVariationId(int index) {
    return variationId_.getLong(index);
  }
  private void ensureVariationIdIsMutable() {
    if (!variationId_.isModifiable()) {
      variationId_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(variationId_);
     }
  }
  /**
   * <pre>
   * Ids of the currently assigned variations which should be sent to sync.
   * </pre>
   *
   * <code>repeated uint64 variation_id = 12 [deprecated = true];</code>
   */
  private void setVariationId(
      int index, long value) {
    ensureVariationIdIsMutable();
    variationId_.setLong(index, value);
  }
  /**
   * <pre>
   * Ids of the currently assigned variations which should be sent to sync.
   * </pre>
   *
   * <code>repeated uint64 variation_id = 12 [deprecated = true];</code>
   */
  private void addVariationId(long value) {
    ensureVariationIdIsMutable();
    variationId_.addLong(value);
  }
  /**
   * <pre>
   * Ids of the currently assigned variations which should be sent to sync.
   * </pre>
   *
   * <code>repeated uint64 variation_id = 12 [deprecated = true];</code>
   */
  private void addAllVariationId(
      java.lang.Iterable<? extends java.lang.Long> values) {
    ensureVariationIdIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, variationId_);
  }
  /**
   * <pre>
   * Ids of the currently assigned variations which should be sent to sync.
   * </pre>
   *
   * <code>repeated uint64 variation_id = 12 [deprecated = true];</code>
   */
  private void clearVariationId() {
    variationId_ = emptyLongList();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, tabId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt32(2, windowId_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt32(3, tabVisualIndex_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeInt32(4, currentNavigationIndex_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeBool(5, pinned_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeString(6, getExtensionAppId());
    }
    for (int i = 0; i < navigation_.size(); i++) {
      output.writeMessage(7, navigation_.get(i));
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeBytes(8, favicon_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeEnum(9, faviconType_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeString(11, getFaviconSource());
    }
    for (int i = 0; i < variationId_.size(); i++) {
      output.writeUInt64(12, variationId_.getLong(i));
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, tabId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, windowId_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, tabVisualIndex_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, currentNavigationIndex_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, pinned_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(6, getExtensionAppId());
    }
    for (int i = 0; i < navigation_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, navigation_.get(i));
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(8, favicon_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(9, faviconType_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(11, getFaviconSource());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < variationId_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeUInt64SizeNoTag(variationId_.getLong(i));
      }
      size += dataSize;
      size += 1 * getVariationIdList().size();
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.SessionTab parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.SessionTab parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SessionTab parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.SessionTab parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SessionTab parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SessionTab parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SessionTab parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SessionTab parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SessionTab parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SessionTab parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.SessionTab prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code sync_pb.SessionTab}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.SessionTab, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.SessionTab)
      org.chromium.components.sync.protocol.SessionTabOrBuilder {
    // Construct using org.chromium.components.sync.protocol.SessionTab.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Unique (to the owner) id for this tab.
     * </pre>
     *
     * <code>optional int32 tab_id = 1 [default = -1];</code>
     */
    public boolean hasTabId() {
      return instance.hasTabId();
    }
    /**
     * <pre>
     * Unique (to the owner) id for this tab.
     * </pre>
     *
     * <code>optional int32 tab_id = 1 [default = -1];</code>
     */
    public int getTabId() {
      return instance.getTabId();
    }
    /**
     * <pre>
     * Unique (to the owner) id for this tab.
     * </pre>
     *
     * <code>optional int32 tab_id = 1 [default = -1];</code>
     */
    public Builder setTabId(int value) {
      copyOnWrite();
      instance.setTabId(value);
      return this;
    }
    /**
     * <pre>
     * Unique (to the owner) id for this tab.
     * </pre>
     *
     * <code>optional int32 tab_id = 1 [default = -1];</code>
     */
    public Builder clearTabId() {
      copyOnWrite();
      instance.clearTabId();
      return this;
    }

    /**
     * <pre>
     * The unique id for the window this tab belongs to.
     * </pre>
     *
     * <code>optional int32 window_id = 2;</code>
     */
    public boolean hasWindowId() {
      return instance.hasWindowId();
    }
    /**
     * <pre>
     * The unique id for the window this tab belongs to.
     * </pre>
     *
     * <code>optional int32 window_id = 2;</code>
     */
    public int getWindowId() {
      return instance.getWindowId();
    }
    /**
     * <pre>
     * The unique id for the window this tab belongs to.
     * </pre>
     *
     * <code>optional int32 window_id = 2;</code>
     */
    public Builder setWindowId(int value) {
      copyOnWrite();
      instance.setWindowId(value);
      return this;
    }
    /**
     * <pre>
     * The unique id for the window this tab belongs to.
     * </pre>
     *
     * <code>optional int32 window_id = 2;</code>
     */
    public Builder clearWindowId() {
      copyOnWrite();
      instance.clearWindowId();
      return this;
    }

    /**
     * <pre>
     * Visual index of the tab within its window. There may be gaps in these
     * values.
     * </pre>
     *
     * <code>optional int32 tab_visual_index = 3 [default = -1];</code>
     */
    public boolean hasTabVisualIndex() {
      return instance.hasTabVisualIndex();
    }
    /**
     * <pre>
     * Visual index of the tab within its window. There may be gaps in these
     * values.
     * </pre>
     *
     * <code>optional int32 tab_visual_index = 3 [default = -1];</code>
     */
    public int getTabVisualIndex() {
      return instance.getTabVisualIndex();
    }
    /**
     * <pre>
     * Visual index of the tab within its window. There may be gaps in these
     * values.
     * </pre>
     *
     * <code>optional int32 tab_visual_index = 3 [default = -1];</code>
     */
    public Builder setTabVisualIndex(int value) {
      copyOnWrite();
      instance.setTabVisualIndex(value);
      return this;
    }
    /**
     * <pre>
     * Visual index of the tab within its window. There may be gaps in these
     * values.
     * </pre>
     *
     * <code>optional int32 tab_visual_index = 3 [default = -1];</code>
     */
    public Builder clearTabVisualIndex() {
      copyOnWrite();
      instance.clearTabVisualIndex();
      return this;
    }

    /**
     * <pre>
     * Identifies the index of the current navigation in navigations. For
     * example, if this is 2 it means the current navigation is navigations[2].
     * </pre>
     *
     * <code>optional int32 current_navigation_index = 4 [default = -1];</code>
     */
    public boolean hasCurrentNavigationIndex() {
      return instance.hasCurrentNavigationIndex();
    }
    /**
     * <pre>
     * Identifies the index of the current navigation in navigations. For
     * example, if this is 2 it means the current navigation is navigations[2].
     * </pre>
     *
     * <code>optional int32 current_navigation_index = 4 [default = -1];</code>
     */
    public int getCurrentNavigationIndex() {
      return instance.getCurrentNavigationIndex();
    }
    /**
     * <pre>
     * Identifies the index of the current navigation in navigations. For
     * example, if this is 2 it means the current navigation is navigations[2].
     * </pre>
     *
     * <code>optional int32 current_navigation_index = 4 [default = -1];</code>
     */
    public Builder setCurrentNavigationIndex(int value) {
      copyOnWrite();
      instance.setCurrentNavigationIndex(value);
      return this;
    }
    /**
     * <pre>
     * Identifies the index of the current navigation in navigations. For
     * example, if this is 2 it means the current navigation is navigations[2].
     * </pre>
     *
     * <code>optional int32 current_navigation_index = 4 [default = -1];</code>
     */
    public Builder clearCurrentNavigationIndex() {
      copyOnWrite();
      instance.clearCurrentNavigationIndex();
      return this;
    }

    /**
     * <pre>
     * True if the tab is pinned.
     * </pre>
     *
     * <code>optional bool pinned = 5 [default = false];</code>
     */
    public boolean hasPinned() {
      return instance.hasPinned();
    }
    /**
     * <pre>
     * True if the tab is pinned.
     * </pre>
     *
     * <code>optional bool pinned = 5 [default = false];</code>
     */
    public boolean getPinned() {
      return instance.getPinned();
    }
    /**
     * <pre>
     * True if the tab is pinned.
     * </pre>
     *
     * <code>optional bool pinned = 5 [default = false];</code>
     */
    public Builder setPinned(boolean value) {
      copyOnWrite();
      instance.setPinned(value);
      return this;
    }
    /**
     * <pre>
     * True if the tab is pinned.
     * </pre>
     *
     * <code>optional bool pinned = 5 [default = false];</code>
     */
    public Builder clearPinned() {
      copyOnWrite();
      instance.clearPinned();
      return this;
    }

    /**
     * <pre>
     * If non-empty, this tab is an app tab and this is the id of the extension.
     * </pre>
     *
     * <code>optional string extension_app_id = 6;</code>
     */
    public boolean hasExtensionAppId() {
      return instance.hasExtensionAppId();
    }
    /**
     * <pre>
     * If non-empty, this tab is an app tab and this is the id of the extension.
     * </pre>
     *
     * <code>optional string extension_app_id = 6;</code>
     */
    public java.lang.String getExtensionAppId() {
      return instance.getExtensionAppId();
    }
    /**
     * <pre>
     * If non-empty, this tab is an app tab and this is the id of the extension.
     * </pre>
     *
     * <code>optional string extension_app_id = 6;</code>
     */
    public com.google.protobuf.ByteString
        getExtensionAppIdBytes() {
      return instance.getExtensionAppIdBytes();
    }
    /**
     * <pre>
     * If non-empty, this tab is an app tab and this is the id of the extension.
     * </pre>
     *
     * <code>optional string extension_app_id = 6;</code>
     */
    public Builder setExtensionAppId(
        java.lang.String value) {
      copyOnWrite();
      instance.setExtensionAppId(value);
      return this;
    }
    /**
     * <pre>
     * If non-empty, this tab is an app tab and this is the id of the extension.
     * </pre>
     *
     * <code>optional string extension_app_id = 6;</code>
     */
    public Builder clearExtensionAppId() {
      copyOnWrite();
      instance.clearExtensionAppId();
      return this;
    }
    /**
     * <pre>
     * If non-empty, this tab is an app tab and this is the id of the extension.
     * </pre>
     *
     * <code>optional string extension_app_id = 6;</code>
     */
    public Builder setExtensionAppIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setExtensionAppIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * Tabs are navigated, and the navigation data is here.
     * </pre>
     *
     * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
     */
    public java.util.List<org.chromium.components.sync.protocol.TabNavigation> getNavigationList() {
      return java.util.Collections.unmodifiableList(
          instance.getNavigationList());
    }
    /**
     * <pre>
     * Tabs are navigated, and the navigation data is here.
     * </pre>
     *
     * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
     */
    public int getNavigationCount() {
      return instance.getNavigationCount();
    }/**
     * <pre>
     * Tabs are navigated, and the navigation data is here.
     * </pre>
     *
     * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
     */
    public org.chromium.components.sync.protocol.TabNavigation getNavigation(int index) {
      return instance.getNavigation(index);
    }
    /**
     * <pre>
     * Tabs are navigated, and the navigation data is here.
     * </pre>
     *
     * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
     */
    public Builder setNavigation(
        int index, org.chromium.components.sync.protocol.TabNavigation value) {
      copyOnWrite();
      instance.setNavigation(index, value);
      return this;
    }
    /**
     * <pre>
     * Tabs are navigated, and the navigation data is here.
     * </pre>
     *
     * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
     */
    public Builder setNavigation(
        int index, org.chromium.components.sync.protocol.TabNavigation.Builder builderForValue) {
      copyOnWrite();
      instance.setNavigation(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Tabs are navigated, and the navigation data is here.
     * </pre>
     *
     * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
     */
    public Builder addNavigation(org.chromium.components.sync.protocol.TabNavigation value) {
      copyOnWrite();
      instance.addNavigation(value);
      return this;
    }
    /**
     * <pre>
     * Tabs are navigated, and the navigation data is here.
     * </pre>
     *
     * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
     */
    public Builder addNavigation(
        int index, org.chromium.components.sync.protocol.TabNavigation value) {
      copyOnWrite();
      instance.addNavigation(index, value);
      return this;
    }
    /**
     * <pre>
     * Tabs are navigated, and the navigation data is here.
     * </pre>
     *
     * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
     */
    public Builder addNavigation(
        org.chromium.components.sync.protocol.TabNavigation.Builder builderForValue) {
      copyOnWrite();
      instance.addNavigation(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Tabs are navigated, and the navigation data is here.
     * </pre>
     *
     * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
     */
    public Builder addNavigation(
        int index, org.chromium.components.sync.protocol.TabNavigation.Builder builderForValue) {
      copyOnWrite();
      instance.addNavigation(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Tabs are navigated, and the navigation data is here.
     * </pre>
     *
     * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
     */
    public Builder addAllNavigation(
        java.lang.Iterable<? extends org.chromium.components.sync.protocol.TabNavigation> values) {
      copyOnWrite();
      instance.addAllNavigation(values);
      return this;
    }
    /**
     * <pre>
     * Tabs are navigated, and the navigation data is here.
     * </pre>
     *
     * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
     */
    public Builder clearNavigation() {
      copyOnWrite();
      instance.clearNavigation();
      return this;
    }
    /**
     * <pre>
     * Tabs are navigated, and the navigation data is here.
     * </pre>
     *
     * <code>repeated .sync_pb.TabNavigation navigation = 7;</code>
     */
    public Builder removeNavigation(int index) {
      copyOnWrite();
      instance.removeNavigation(index);
      return this;
    }

    /**
     * <pre>
     * The favicon for the current url the tab is displaying. Either empty
     * or a valid PNG encoded favicon.
     * </pre>
     *
     * <code>optional bytes favicon = 8 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasFavicon() {
      return instance.hasFavicon();
    }
    /**
     * <pre>
     * The favicon for the current url the tab is displaying. Either empty
     * or a valid PNG encoded favicon.
     * </pre>
     *
     * <code>optional bytes favicon = 8 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.protobuf.ByteString getFavicon() {
      return instance.getFavicon();
    }
    /**
     * <pre>
     * The favicon for the current url the tab is displaying. Either empty
     * or a valid PNG encoded favicon.
     * </pre>
     *
     * <code>optional bytes favicon = 8 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setFavicon(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setFavicon(value);
      return this;
    }
    /**
     * <pre>
     * The favicon for the current url the tab is displaying. Either empty
     * or a valid PNG encoded favicon.
     * </pre>
     *
     * <code>optional bytes favicon = 8 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearFavicon() {
      copyOnWrite();
      instance.clearFavicon();
      return this;
    }

    /**
     * <code>optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasFaviconType() {
      return instance.hasFaviconType();
    }
    /**
     * <code>optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];</code>
     */
    @java.lang.Deprecated public org.chromium.components.sync.protocol.SessionTab.FaviconType getFaviconType() {
      return instance.getFaviconType();
    }
    /**
     * <code>optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setFaviconType(org.chromium.components.sync.protocol.SessionTab.FaviconType value) {
      copyOnWrite();
      instance.setFaviconType(value);
      return this;
    }
    /**
     * <code>optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearFaviconType() {
      copyOnWrite();
      instance.clearFaviconType();
      return this;
    }

    /**
     * <pre>
     * The url of the actual favicon (as opposed to the page using the favicon).
     * </pre>
     *
     * <code>optional string favicon_source = 11 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasFaviconSource() {
      return instance.hasFaviconSource();
    }
    /**
     * <pre>
     * The url of the actual favicon (as opposed to the page using the favicon).
     * </pre>
     *
     * <code>optional string favicon_source = 11 [deprecated = true];</code>
     */
    @java.lang.Deprecated public java.lang.String getFaviconSource() {
      return instance.getFaviconSource();
    }
    /**
     * <pre>
     * The url of the actual favicon (as opposed to the page using the favicon).
     * </pre>
     *
     * <code>optional string favicon_source = 11 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.protobuf.ByteString
        getFaviconSourceBytes() {
      return instance.getFaviconSourceBytes();
    }
    /**
     * <pre>
     * The url of the actual favicon (as opposed to the page using the favicon).
     * </pre>
     *
     * <code>optional string favicon_source = 11 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setFaviconSource(
        java.lang.String value) {
      copyOnWrite();
      instance.setFaviconSource(value);
      return this;
    }
    /**
     * <pre>
     * The url of the actual favicon (as opposed to the page using the favicon).
     * </pre>
     *
     * <code>optional string favicon_source = 11 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearFaviconSource() {
      copyOnWrite();
      instance.clearFaviconSource();
      return this;
    }
    /**
     * <pre>
     * The url of the actual favicon (as opposed to the page using the favicon).
     * </pre>
     *
     * <code>optional string favicon_source = 11 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setFaviconSourceBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setFaviconSourceBytes(value);
      return this;
    }

    /**
     * <pre>
     * Ids of the currently assigned variations which should be sent to sync.
     * </pre>
     *
     * <code>repeated uint64 variation_id = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated public java.util.List<java.lang.Long>
        getVariationIdList() {
      return java.util.Collections.unmodifiableList(
          instance.getVariationIdList());
    }
    /**
     * <pre>
     * Ids of the currently assigned variations which should be sent to sync.
     * </pre>
     *
     * <code>repeated uint64 variation_id = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated public int getVariationIdCount() {
      return instance.getVariationIdCount();
    }
    /**
     * <pre>
     * Ids of the currently assigned variations which should be sent to sync.
     * </pre>
     *
     * <code>repeated uint64 variation_id = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated public long getVariationId(int index) {
      return instance.getVariationId(index);
    }
    /**
     * <pre>
     * Ids of the currently assigned variations which should be sent to sync.
     * </pre>
     *
     * <code>repeated uint64 variation_id = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setVariationId(
        int index, long value) {
      copyOnWrite();
      instance.setVariationId(index, value);
      return this;
    }
    /**
     * <pre>
     * Ids of the currently assigned variations which should be sent to sync.
     * </pre>
     *
     * <code>repeated uint64 variation_id = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addVariationId(long value) {
      copyOnWrite();
      instance.addVariationId(value);
      return this;
    }
    /**
     * <pre>
     * Ids of the currently assigned variations which should be sent to sync.
     * </pre>
     *
     * <code>repeated uint64 variation_id = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addAllVariationId(
        java.lang.Iterable<? extends java.lang.Long> values) {
      copyOnWrite();
      instance.addAllVariationId(values);
      return this;
    }
    /**
     * <pre>
     * Ids of the currently assigned variations which should be sent to sync.
     * </pre>
     *
     * <code>repeated uint64 variation_id = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearVariationId() {
      copyOnWrite();
      instance.clearVariationId();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.SessionTab)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.SessionTab();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        navigation_.makeImmutable();
        variationId_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.SessionTab other = (org.chromium.components.sync.protocol.SessionTab) arg1;
        tabId_ = visitor.visitInt(
            hasTabId(), tabId_,
            other.hasTabId(), other.tabId_);
        windowId_ = visitor.visitInt(
            hasWindowId(), windowId_,
            other.hasWindowId(), other.windowId_);
        tabVisualIndex_ = visitor.visitInt(
            hasTabVisualIndex(), tabVisualIndex_,
            other.hasTabVisualIndex(), other.tabVisualIndex_);
        currentNavigationIndex_ = visitor.visitInt(
            hasCurrentNavigationIndex(), currentNavigationIndex_,
            other.hasCurrentNavigationIndex(), other.currentNavigationIndex_);
        pinned_ = visitor.visitBoolean(
            hasPinned(), pinned_,
            other.hasPinned(), other.pinned_);
        extensionAppId_ = visitor.visitString(
            hasExtensionAppId(), extensionAppId_,
            other.hasExtensionAppId(), other.extensionAppId_);
        navigation_= visitor.visitList(navigation_, other.navigation_);
        favicon_ = visitor.visitByteString(
            hasFavicon(), favicon_,
            other.hasFavicon(), other.favicon_);
        faviconType_ = visitor.visitInt(hasFaviconType(), faviconType_,
            other.hasFaviconType(), other.faviconType_);
        faviconSource_ = visitor.visitString(
            hasFaviconSource(), faviconSource_,
            other.hasFaviconSource(), other.faviconSource_);
        variationId_= visitor.visitLongList(variationId_, other.variationId_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                tabId_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                windowId_ = input.readInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                tabVisualIndex_ = input.readInt32();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                currentNavigationIndex_ = input.readInt32();
                break;
              }
              case 40: {
                bitField0_ |= 0x00000010;
                pinned_ = input.readBool();
                break;
              }
              case 50: {
                String s = input.readString();
                bitField0_ |= 0x00000020;
                extensionAppId_ = s;
                break;
              }
              case 58: {
                if (!navigation_.isModifiable()) {
                  navigation_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(navigation_);
                }
                navigation_.add(
                    input.readMessage(org.chromium.components.sync.protocol.TabNavigation.parser(), extensionRegistry));
                break;
              }
              case 66: {
                bitField0_ |= 0x00000040;
                favicon_ = input.readBytes();
                break;
              }
              case 72: {
                int rawValue = input.readEnum();
                org.chromium.components.sync.protocol.SessionTab.FaviconType value = org.chromium.components.sync.protocol.SessionTab.FaviconType.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(9, rawValue);
                } else {
                  bitField0_ |= 0x00000080;
                  faviconType_ = rawValue;
                }
                break;
              }
              case 90: {
                String s = input.readString();
                bitField0_ |= 0x00000100;
                faviconSource_ = s;
                break;
              }
              case 96: {
                if (!variationId_.isModifiable()) {
                  variationId_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(variationId_);
                }
                variationId_.addLong(input.readUInt64());
                break;
              }
              case 98: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!variationId_.isModifiable() && input.getBytesUntilLimit() > 0) {
                  variationId_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(variationId_);
                }
                while (input.getBytesUntilLimit() > 0) {
                  variationId_.addLong(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.SessionTab.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.SessionTab)
  private static final org.chromium.components.sync.protocol.SessionTab DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new SessionTab();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.SessionTab getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SessionTab> PARSER;

  public static com.google.protobuf.Parser<SessionTab> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

