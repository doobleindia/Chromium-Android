// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gaia_password_reuse.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * User reused their GAIA password on another website.
 * </pre>
 *
 * Protobuf type {@code sync_pb.GaiaPasswordReuse}
 */
public  final class GaiaPasswordReuse extends
    com.google.protobuf.GeneratedMessageLite<
        GaiaPasswordReuse, GaiaPasswordReuse.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.GaiaPasswordReuse)
    GaiaPasswordReuseOrBuilder {
  private GaiaPasswordReuse() {
  }
  public interface PasswordReuseDetectedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
     */
    boolean hasStatus();
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
     */
    org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus getStatus();
  }
  /**
   * <pre>
   * Logged when we detect a password re-use event on a non-GAIA site.
   * If the user hasnâ€™t enabled SafeBrowsing, this will be the last event.
   * </pre>
   *
   * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordReuseDetected}
   */
  public  static final class PasswordReuseDetected extends
      com.google.protobuf.GeneratedMessageLite<
          PasswordReuseDetected, PasswordReuseDetected.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
      PasswordReuseDetectedOrBuilder {
    private PasswordReuseDetected() {
    }
    public interface SafeBrowsingStatusOrBuilder extends
        // @@protoc_insertion_point(interface_extends:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Is SafeBrowsing enabled?
       * </pre>
       *
       * <code>optional bool enabled = 1;</code>
       */
      boolean hasEnabled();
      /**
       * <pre>
       * Is SafeBrowsing enabled?
       * </pre>
       *
       * <code>optional bool enabled = 1;</code>
       */
      boolean getEnabled();

      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
       */
      boolean hasSafeBrowsingReportingPopulation();
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
       */
      org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation getSafeBrowsingReportingPopulation();
    }
    /**
     * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus}
     */
    public  static final class SafeBrowsingStatus extends
        com.google.protobuf.GeneratedMessageLite<
            SafeBrowsingStatus, SafeBrowsingStatus.Builder> implements
        // @@protoc_insertion_point(message_implements:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
        SafeBrowsingStatusOrBuilder {
      private SafeBrowsingStatus() {
      }
      /**
       * <pre>
       * If SafeBrowsing is enabled, is the user opted-in to extended
       * reporting or Scout?
       * </pre>
       *
       * Protobuf enum {@code sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation}
       */
      public enum ReportingPopulation
          implements com.google.protobuf.Internal.EnumLite {
        /**
         * <code>REPORTING_POPULATION_UNSPECIFIED = 0;</code>
         */
        REPORTING_POPULATION_UNSPECIFIED(0),
        /**
         * <code>NONE = 1;</code>
         */
        NONE(1),
        /**
         * <code>EXTENDED_REPORTING = 2;</code>
         */
        EXTENDED_REPORTING(2),
        /**
         * <code>SCOUT = 3;</code>
         */
        SCOUT(3),
        ;

        /**
         * <code>REPORTING_POPULATION_UNSPECIFIED = 0;</code>
         */
        public static final int REPORTING_POPULATION_UNSPECIFIED_VALUE = 0;
        /**
         * <code>NONE = 1;</code>
         */
        public static final int NONE_VALUE = 1;
        /**
         * <code>EXTENDED_REPORTING = 2;</code>
         */
        public static final int EXTENDED_REPORTING_VALUE = 2;
        /**
         * <code>SCOUT = 3;</code>
         */
        public static final int SCOUT_VALUE = 3;


        public final int getNumber() {
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static ReportingPopulation valueOf(int value) {
          return forNumber(value);
        }

        public static ReportingPopulation forNumber(int value) {
          switch (value) {
            case 0: return REPORTING_POPULATION_UNSPECIFIED;
            case 1: return NONE;
            case 2: return EXTENDED_REPORTING;
            case 3: return SCOUT;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ReportingPopulation>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            ReportingPopulation> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<ReportingPopulation>() {
                public ReportingPopulation findValueByNumber(int number) {
                  return ReportingPopulation.forNumber(number);
                }
              };

        private final int value;

        private ReportingPopulation(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation)
      }

      private int bitField0_;
      public static final int ENABLED_FIELD_NUMBER = 1;
      private boolean enabled_;
      /**
       * <pre>
       * Is SafeBrowsing enabled?
       * </pre>
       *
       * <code>optional bool enabled = 1;</code>
       */
      public boolean hasEnabled() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Is SafeBrowsing enabled?
       * </pre>
       *
       * <code>optional bool enabled = 1;</code>
       */
      public boolean getEnabled() {
        return enabled_;
      }
      /**
       * <pre>
       * Is SafeBrowsing enabled?
       * </pre>
       *
       * <code>optional bool enabled = 1;</code>
       */
      private void setEnabled(boolean value) {
        bitField0_ |= 0x00000001;
        enabled_ = value;
      }
      /**
       * <pre>
       * Is SafeBrowsing enabled?
       * </pre>
       *
       * <code>optional bool enabled = 1;</code>
       */
      private void clearEnabled() {
        bitField0_ = (bitField0_ & ~0x00000001);
        enabled_ = false;
      }

      public static final int SAFE_BROWSING_REPORTING_POPULATION_FIELD_NUMBER = 2;
      private int safeBrowsingReportingPopulation_;
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
       */
      public boolean hasSafeBrowsingReportingPopulation() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
       */
      public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation getSafeBrowsingReportingPopulation() {
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation result = org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation.forNumber(safeBrowsingReportingPopulation_);
        return result == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation.REPORTING_POPULATION_UNSPECIFIED : result;
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
       */
      private void setSafeBrowsingReportingPopulation(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        safeBrowsingReportingPopulation_ = value.getNumber();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
       */
      private void clearSafeBrowsingReportingPopulation() {
        bitField0_ = (bitField0_ & ~0x00000002);
        safeBrowsingReportingPopulation_ = 0;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBool(1, enabled_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeEnum(2, safeBrowsingReportingPopulation_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(1, enabled_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(2, safeBrowsingReportingPopulation_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      /**
       * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus, Builder> implements
          // @@protoc_insertion_point(builder_implements:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatusOrBuilder {
        // Construct using org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Is SafeBrowsing enabled?
         * </pre>
         *
         * <code>optional bool enabled = 1;</code>
         */
        public boolean hasEnabled() {
          return instance.hasEnabled();
        }
        /**
         * <pre>
         * Is SafeBrowsing enabled?
         * </pre>
         *
         * <code>optional bool enabled = 1;</code>
         */
        public boolean getEnabled() {
          return instance.getEnabled();
        }
        /**
         * <pre>
         * Is SafeBrowsing enabled?
         * </pre>
         *
         * <code>optional bool enabled = 1;</code>
         */
        public Builder setEnabled(boolean value) {
          copyOnWrite();
          instance.setEnabled(value);
          return this;
        }
        /**
         * <pre>
         * Is SafeBrowsing enabled?
         * </pre>
         *
         * <code>optional bool enabled = 1;</code>
         */
        public Builder clearEnabled() {
          copyOnWrite();
          instance.clearEnabled();
          return this;
        }

        /**
         * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
         */
        public boolean hasSafeBrowsingReportingPopulation() {
          return instance.hasSafeBrowsingReportingPopulation();
        }
        /**
         * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
         */
        public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation getSafeBrowsingReportingPopulation() {
          return instance.getSafeBrowsingReportingPopulation();
        }
        /**
         * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
         */
        public Builder setSafeBrowsingReportingPopulation(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation value) {
          copyOnWrite();
          instance.setSafeBrowsingReportingPopulation(value);
          return this;
        }
        /**
         * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
         */
        public Builder clearSafeBrowsingReportingPopulation() {
          copyOnWrite();
          instance.clearSafeBrowsingReportingPopulation();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
      }
      protected final Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus();
          }
          case IS_INITIALIZED: {
            return DEFAULT_INSTANCE;
          }
          case MAKE_IMMUTABLE: {
            return null;
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case VISIT: {
            Visitor visitor = (Visitor) arg0;
            org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus other = (org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus) arg1;
            enabled_ = visitor.visitBoolean(
                hasEnabled(), enabled_,
                other.hasEnabled(), other.enabled_);
            safeBrowsingReportingPopulation_ = visitor.visitInt(hasSafeBrowsingReportingPopulation(), safeBrowsingReportingPopulation_,
                other.hasSafeBrowsingReportingPopulation(), other.safeBrowsingReportingPopulation_);
            if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                .INSTANCE) {
              bitField0_ |= other.bitField0_;
            }
            return this;
          }
          case MERGE_FROM_STREAM: {
            com.google.protobuf.CodedInputStream input =
                (com.google.protobuf.CodedInputStream) arg0;
            com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                (com.google.protobuf.ExtensionRegistryLite) arg1;
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  default: {
                    if (!parseUnknownField(tag, input)) {
                      done = true;
                    }
                    break;
                  }
                  case 8: {
                    bitField0_ |= 0x00000001;
                    enabled_ = input.readBool();
                    break;
                  }
                  case 16: {
                    int rawValue = input.readEnum();
                    org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation value = org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation.forNumber(rawValue);
                    if (value == null) {
                      super.mergeVarintField(2, rawValue);
                    } else {
                      bitField0_ |= 0x00000002;
                      safeBrowsingReportingPopulation_ = rawValue;
                    }
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw new RuntimeException(e.setUnfinishedMessage(this));
            } catch (java.io.IOException e) {
              throw new RuntimeException(
                  new com.google.protobuf.InvalidProtocolBufferException(
                      e.getMessage()).setUnfinishedMessage(this));
            } finally {
            }
          }
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.class) {
                if (PARSER == null) {
                  PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                }
              }
            }
            return PARSER;
          }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
      private static final org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new SafeBrowsingStatus();
        DEFAULT_INSTANCE.makeImmutable();
      }

      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<SafeBrowsingStatus> PARSER;

      public static com.google.protobuf.Parser<SafeBrowsingStatus> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    public static final int STATUS_FIELD_NUMBER = 1;
    private org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status_;
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
     */
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus getStatus() {
      return status_ == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.getDefaultInstance() : status_;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
     */
    private void setStatus(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      status_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
     */
    private void setStatus(
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.Builder builderForValue) {
      status_ = builderForValue.build();
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
     */
    private void mergeStatus(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus value) {
      if (status_ != null &&
          status_ != org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.getDefaultInstance()) {
        status_ =
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.newBuilder(status_).mergeFrom(value).buildPartial();
      } else {
        status_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
     */
    private void clearStatus() {  status_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getStatus());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getStatus());
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Logged when we detect a password re-use event on a non-GAIA site.
     * If the user hasnâ€™t enabled SafeBrowsing, this will be the last event.
     * </pre>
     *
     * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordReuseDetected}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetectedOrBuilder {
      // Construct using org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
       */
      public boolean hasStatus() {
        return instance.hasStatus();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
       */
      public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus getStatus() {
        return instance.getStatus();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
       */
      public Builder setStatus(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus value) {
        copyOnWrite();
        instance.setStatus(value);
        return this;
        }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
       */
      public Builder setStatus(
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.Builder builderForValue) {
        copyOnWrite();
        instance.setStatus(builderForValue);
        return this;
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
       */
      public Builder mergeStatus(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus value) {
        copyOnWrite();
        instance.mergeStatus(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
       */
      public Builder clearStatus() {  copyOnWrite();
        instance.clearStatus();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected other = (org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected) arg1;
          status_ = visitor.visitMessage(status_, other.status_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    subBuilder = status_.toBuilder();
                  }
                  status_ = input.readMessage(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(status_);
                    status_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000001;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
    private static final org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new PasswordReuseDetected();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PasswordReuseDetected> PARSER;

    public static com.google.protobuf.Parser<PasswordReuseDetected> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PasswordReuseLookupOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
     */
    boolean hasLookupResult();
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
     */
    org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult getLookupResult();

    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
     */
    boolean hasVerdict();
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
     */
    org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict getVerdict();

    /**
     * <pre>
     * PhishGuard token that identifies the verdict on the server.
     * </pre>
     *
     * <code>optional bytes verdict_token = 3;</code>
     */
    boolean hasVerdictToken();
    /**
     * <pre>
     * PhishGuard token that identifies the verdict on the server.
     * </pre>
     *
     * <code>optional bytes verdict_token = 3;</code>
     */
    com.google.protobuf.ByteString getVerdictToken();
  }
  /**
   * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordReuseLookup}
   */
  public  static final class PasswordReuseLookup extends
      com.google.protobuf.GeneratedMessageLite<
          PasswordReuseLookup, PasswordReuseLookup.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
      PasswordReuseLookupOrBuilder {
    private PasswordReuseLookup() {
      verdictToken_ = com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * Protobuf enum {@code sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult}
     */
    public enum LookupResult
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNSPECIFIED = 0;</code>
       */
      UNSPECIFIED(0),
      /**
       * <pre>
       * URL did match the password reuse whitelist.
       * No further action required related to this re-use event.
       * </pre>
       *
       * <code>WHITELIST_HIT = 1;</code>
       */
      WHITELIST_HIT(1),
      /**
       * <pre>
       * The URL exists in the clientâ€™s cache.
       * No further action required related to this re-use event.
       * This event also logs the ReputationVerdict.
       * </pre>
       *
       * <code>CACHE_HIT = 2;</code>
       */
      CACHE_HIT(2),
      /**
       * <pre>
       * A valid response received from the SafeBrowsing service.
       * This event also logs the ReputationVerdict.
       * </pre>
       *
       * <code>REQUEST_SUCCESS = 3;</code>
       */
      REQUEST_SUCCESS(3),
      /**
       * <pre>
       * Unable to get a valid response from the SafeBrowsing service.
       * </pre>
       *
       * <code>REQUEST_FAILURE = 4;</code>
       */
      REQUEST_FAILURE(4),
      /**
       * <pre>
       * We won't be able to compute reputation for the URL e.g. local IP
       * address, localhost, not-yet-assigned by ICANN gTLD, etc.
       * </pre>
       *
       * <code>URL_UNSUPPORTED = 5;</code>
       */
      URL_UNSUPPORTED(5),
      /**
       * <pre>
       * URL did match enterprise whitelist.
       * No further action required related to this re-use event.
       * </pre>
       *
       * <code>ENTERPRISE_WHITELIST_HIT = 6;</code>
       */
      ENTERPRISE_WHITELIST_HIT(6),
      /**
       * <pre>
       * Password reuse lookup is turned off by enterprise policy.
       * No further action required related to this re-use event.
       * </pre>
       *
       * <code>TURNED_OFF_BY_POLICY = 7;</code>
       */
      TURNED_OFF_BY_POLICY(7),
      ;

      /**
       * <code>UNSPECIFIED = 0;</code>
       */
      public static final int UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * URL did match the password reuse whitelist.
       * No further action required related to this re-use event.
       * </pre>
       *
       * <code>WHITELIST_HIT = 1;</code>
       */
      public static final int WHITELIST_HIT_VALUE = 1;
      /**
       * <pre>
       * The URL exists in the clientâ€™s cache.
       * No further action required related to this re-use event.
       * This event also logs the ReputationVerdict.
       * </pre>
       *
       * <code>CACHE_HIT = 2;</code>
       */
      public static final int CACHE_HIT_VALUE = 2;
      /**
       * <pre>
       * A valid response received from the SafeBrowsing service.
       * This event also logs the ReputationVerdict.
       * </pre>
       *
       * <code>REQUEST_SUCCESS = 3;</code>
       */
      public static final int REQUEST_SUCCESS_VALUE = 3;
      /**
       * <pre>
       * Unable to get a valid response from the SafeBrowsing service.
       * </pre>
       *
       * <code>REQUEST_FAILURE = 4;</code>
       */
      public static final int REQUEST_FAILURE_VALUE = 4;
      /**
       * <pre>
       * We won't be able to compute reputation for the URL e.g. local IP
       * address, localhost, not-yet-assigned by ICANN gTLD, etc.
       * </pre>
       *
       * <code>URL_UNSUPPORTED = 5;</code>
       */
      public static final int URL_UNSUPPORTED_VALUE = 5;
      /**
       * <pre>
       * URL did match enterprise whitelist.
       * No further action required related to this re-use event.
       * </pre>
       *
       * <code>ENTERPRISE_WHITELIST_HIT = 6;</code>
       */
      public static final int ENTERPRISE_WHITELIST_HIT_VALUE = 6;
      /**
       * <pre>
       * Password reuse lookup is turned off by enterprise policy.
       * No further action required related to this re-use event.
       * </pre>
       *
       * <code>TURNED_OFF_BY_POLICY = 7;</code>
       */
      public static final int TURNED_OFF_BY_POLICY_VALUE = 7;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LookupResult valueOf(int value) {
        return forNumber(value);
      }

      public static LookupResult forNumber(int value) {
        switch (value) {
          case 0: return UNSPECIFIED;
          case 1: return WHITELIST_HIT;
          case 2: return CACHE_HIT;
          case 3: return REQUEST_SUCCESS;
          case 4: return REQUEST_FAILURE;
          case 5: return URL_UNSUPPORTED;
          case 6: return ENTERPRISE_WHITELIST_HIT;
          case 7: return TURNED_OFF_BY_POLICY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LookupResult>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          LookupResult> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LookupResult>() {
              public LookupResult findValueByNumber(int number) {
                return LookupResult.forNumber(number);
              }
            };

      private final int value;

      private LookupResult(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult)
    }

    /**
     * <pre>
     * The following two are only present for CACHE_HIT and REQUEST_SUCCESS.
     * The verdict received from the Reputation service. This is set only
     * if the user has SafeBrowsing enabled and we fetch the verdict from the
     * cache or by sending a verdict request.
     * </pre>
     *
     * Protobuf enum {@code sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict}
     */
    public enum ReputationVerdict
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>VERDICT_UNSPECIFIED = 0;</code>
       */
      VERDICT_UNSPECIFIED(0),
      /**
       * <code>SAFE = 1;</code>
       */
      SAFE(1),
      /**
       * <code>LOW_REPUTATION = 2;</code>
       */
      LOW_REPUTATION(2),
      /**
       * <code>PHISHING = 3;</code>
       */
      PHISHING(3),
      ;

      /**
       * <code>VERDICT_UNSPECIFIED = 0;</code>
       */
      public static final int VERDICT_UNSPECIFIED_VALUE = 0;
      /**
       * <code>SAFE = 1;</code>
       */
      public static final int SAFE_VALUE = 1;
      /**
       * <code>LOW_REPUTATION = 2;</code>
       */
      public static final int LOW_REPUTATION_VALUE = 2;
      /**
       * <code>PHISHING = 3;</code>
       */
      public static final int PHISHING_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ReputationVerdict valueOf(int value) {
        return forNumber(value);
      }

      public static ReputationVerdict forNumber(int value) {
        switch (value) {
          case 0: return VERDICT_UNSPECIFIED;
          case 1: return SAFE;
          case 2: return LOW_REPUTATION;
          case 3: return PHISHING;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ReputationVerdict>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ReputationVerdict> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ReputationVerdict>() {
              public ReputationVerdict findValueByNumber(int number) {
                return ReputationVerdict.forNumber(number);
              }
            };

      private final int value;

      private ReputationVerdict(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict)
    }

    private int bitField0_;
    public static final int LOOKUP_RESULT_FIELD_NUMBER = 1;
    private int lookupResult_;
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
     */
    public boolean hasLookupResult() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
     */
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult getLookupResult() {
      org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult result = org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult.forNumber(lookupResult_);
      return result == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult.UNSPECIFIED : result;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
     */
    private void setLookupResult(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      lookupResult_ = value.getNumber();
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
     */
    private void clearLookupResult() {
      bitField0_ = (bitField0_ & ~0x00000001);
      lookupResult_ = 0;
    }

    public static final int VERDICT_FIELD_NUMBER = 2;
    private int verdict_;
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
     */
    public boolean hasVerdict() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
     */
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict getVerdict() {
      org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict result = org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict.forNumber(verdict_);
      return result == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict.VERDICT_UNSPECIFIED : result;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
     */
    private void setVerdict(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      verdict_ = value.getNumber();
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
     */
    private void clearVerdict() {
      bitField0_ = (bitField0_ & ~0x00000002);
      verdict_ = 0;
    }

    public static final int VERDICT_TOKEN_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString verdictToken_;
    /**
     * <pre>
     * PhishGuard token that identifies the verdict on the server.
     * </pre>
     *
     * <code>optional bytes verdict_token = 3;</code>
     */
    public boolean hasVerdictToken() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * PhishGuard token that identifies the verdict on the server.
     * </pre>
     *
     * <code>optional bytes verdict_token = 3;</code>
     */
    public com.google.protobuf.ByteString getVerdictToken() {
      return verdictToken_;
    }
    /**
     * <pre>
     * PhishGuard token that identifies the verdict on the server.
     * </pre>
     *
     * <code>optional bytes verdict_token = 3;</code>
     */
    private void setVerdictToken(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      verdictToken_ = value;
    }
    /**
     * <pre>
     * PhishGuard token that identifies the verdict on the server.
     * </pre>
     *
     * <code>optional bytes verdict_token = 3;</code>
     */
    private void clearVerdictToken() {
      bitField0_ = (bitField0_ & ~0x00000004);
      verdictToken_ = getDefaultInstance().getVerdictToken();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, lookupResult_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, verdict_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, verdictToken_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, lookupResult_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, verdict_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, verdictToken_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordReuseLookup}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookupOrBuilder {
      // Construct using org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
       */
      public boolean hasLookupResult() {
        return instance.hasLookupResult();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
       */
      public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult getLookupResult() {
        return instance.getLookupResult();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
       */
      public Builder setLookupResult(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult value) {
        copyOnWrite();
        instance.setLookupResult(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
       */
      public Builder clearLookupResult() {
        copyOnWrite();
        instance.clearLookupResult();
        return this;
      }

      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
       */
      public boolean hasVerdict() {
        return instance.hasVerdict();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
       */
      public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict getVerdict() {
        return instance.getVerdict();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
       */
      public Builder setVerdict(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict value) {
        copyOnWrite();
        instance.setVerdict(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
       */
      public Builder clearVerdict() {
        copyOnWrite();
        instance.clearVerdict();
        return this;
      }

      /**
       * <pre>
       * PhishGuard token that identifies the verdict on the server.
       * </pre>
       *
       * <code>optional bytes verdict_token = 3;</code>
       */
      public boolean hasVerdictToken() {
        return instance.hasVerdictToken();
      }
      /**
       * <pre>
       * PhishGuard token that identifies the verdict on the server.
       * </pre>
       *
       * <code>optional bytes verdict_token = 3;</code>
       */
      public com.google.protobuf.ByteString getVerdictToken() {
        return instance.getVerdictToken();
      }
      /**
       * <pre>
       * PhishGuard token that identifies the verdict on the server.
       * </pre>
       *
       * <code>optional bytes verdict_token = 3;</code>
       */
      public Builder setVerdictToken(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setVerdictToken(value);
        return this;
      }
      /**
       * <pre>
       * PhishGuard token that identifies the verdict on the server.
       * </pre>
       *
       * <code>optional bytes verdict_token = 3;</code>
       */
      public Builder clearVerdictToken() {
        copyOnWrite();
        instance.clearVerdictToken();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup other = (org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup) arg1;
          lookupResult_ = visitor.visitInt(hasLookupResult(), lookupResult_,
              other.hasLookupResult(), other.lookupResult_);
          verdict_ = visitor.visitInt(hasVerdict(), verdict_,
              other.hasVerdict(), other.verdict_);
          verdictToken_ = visitor.visitByteString(
              hasVerdictToken(), verdictToken_,
              other.hasVerdictToken(), other.verdictToken_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();
                  org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult value = org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(1, rawValue);
                  } else {
                    bitField0_ |= 0x00000001;
                    lookupResult_ = rawValue;
                  }
                  break;
                }
                case 16: {
                  int rawValue = input.readEnum();
                  org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict value = org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(2, rawValue);
                  } else {
                    bitField0_ |= 0x00000002;
                    verdict_ = rawValue;
                  }
                  break;
                }
                case 26: {
                  bitField0_ |= 0x00000004;
                  verdictToken_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
    private static final org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new PasswordReuseLookup();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PasswordReuseLookup> PARSER;

    public static com.google.protobuf.Parser<PasswordReuseLookup> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PasswordReuseDialogInteractionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
     */
    boolean hasInteractionResult();
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
     */
    org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult getInteractionResult();
  }
  /**
   * <pre>
   * Logged when the user interacts with the warning UI shown to encourage
   * password change if the site is Phishing or Low-reputation.
   * </pre>
   *
   * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction}
   */
  public  static final class PasswordReuseDialogInteraction extends
      com.google.protobuf.GeneratedMessageLite<
          PasswordReuseDialogInteraction, PasswordReuseDialogInteraction.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
      PasswordReuseDialogInteractionOrBuilder {
    private PasswordReuseDialogInteraction() {
    }
    /**
     * Protobuf enum {@code sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult}
     */
    public enum InteractionResult
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNSPECIFIED = 0;</code>
       */
      UNSPECIFIED(0),
      /**
       * <pre>
       * The user took the action suggested by the warning prompt.
       * </pre>
       *
       * <code>WARNING_ACTION_TAKEN = 1;</code>
       */
      WARNING_ACTION_TAKEN(1),
      /**
       * <pre>
       * The user clicked ignore in the warning prompt.
       * </pre>
       *
       * <code>WARNING_ACTION_IGNORED = 2;</code>
       */
      WARNING_ACTION_IGNORED(2),
      /**
       * <pre>
       * The warning UI was ignored, i.e. not interacted with by the user.
       * This could happen if the user navigates away from the page.
       * </pre>
       *
       * <code>WARNING_UI_IGNORED = 3;</code>
       */
      WARNING_UI_IGNORED(3),
      /**
       * <pre>
       * The user clicked "Change Password" on chrome://settings page.
       * </pre>
       *
       * <code>WARNING_ACTION_TAKEN_ON_SETTINGS = 4;</code>
       */
      WARNING_ACTION_TAKEN_ON_SETTINGS(4),
      ;

      /**
       * <code>UNSPECIFIED = 0;</code>
       */
      public static final int UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * The user took the action suggested by the warning prompt.
       * </pre>
       *
       * <code>WARNING_ACTION_TAKEN = 1;</code>
       */
      public static final int WARNING_ACTION_TAKEN_VALUE = 1;
      /**
       * <pre>
       * The user clicked ignore in the warning prompt.
       * </pre>
       *
       * <code>WARNING_ACTION_IGNORED = 2;</code>
       */
      public static final int WARNING_ACTION_IGNORED_VALUE = 2;
      /**
       * <pre>
       * The warning UI was ignored, i.e. not interacted with by the user.
       * This could happen if the user navigates away from the page.
       * </pre>
       *
       * <code>WARNING_UI_IGNORED = 3;</code>
       */
      public static final int WARNING_UI_IGNORED_VALUE = 3;
      /**
       * <pre>
       * The user clicked "Change Password" on chrome://settings page.
       * </pre>
       *
       * <code>WARNING_ACTION_TAKEN_ON_SETTINGS = 4;</code>
       */
      public static final int WARNING_ACTION_TAKEN_ON_SETTINGS_VALUE = 4;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static InteractionResult valueOf(int value) {
        return forNumber(value);
      }

      public static InteractionResult forNumber(int value) {
        switch (value) {
          case 0: return UNSPECIFIED;
          case 1: return WARNING_ACTION_TAKEN;
          case 2: return WARNING_ACTION_IGNORED;
          case 3: return WARNING_UI_IGNORED;
          case 4: return WARNING_ACTION_TAKEN_ON_SETTINGS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<InteractionResult>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          InteractionResult> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<InteractionResult>() {
              public InteractionResult findValueByNumber(int number) {
                return InteractionResult.forNumber(number);
              }
            };

      private final int value;

      private InteractionResult(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult)
    }

    private int bitField0_;
    public static final int INTERACTION_RESULT_FIELD_NUMBER = 1;
    private int interactionResult_;
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
     */
    public boolean hasInteractionResult() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
     */
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult getInteractionResult() {
      org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult result = org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult.forNumber(interactionResult_);
      return result == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult.UNSPECIFIED : result;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
     */
    private void setInteractionResult(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      interactionResult_ = value.getNumber();
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
     */
    private void clearInteractionResult() {
      bitField0_ = (bitField0_ & ~0x00000001);
      interactionResult_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, interactionResult_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, interactionResult_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Logged when the user interacts with the warning UI shown to encourage
     * password change if the site is Phishing or Low-reputation.
     * </pre>
     *
     * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteractionOrBuilder {
      // Construct using org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
       */
      public boolean hasInteractionResult() {
        return instance.hasInteractionResult();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
       */
      public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult getInteractionResult() {
        return instance.getInteractionResult();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
       */
      public Builder setInteractionResult(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult value) {
        copyOnWrite();
        instance.setInteractionResult(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
       */
      public Builder clearInteractionResult() {
        copyOnWrite();
        instance.clearInteractionResult();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction other = (org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction) arg1;
          interactionResult_ = visitor.visitInt(hasInteractionResult(), interactionResult_,
              other.hasInteractionResult(), other.interactionResult_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();
                  org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult value = org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(1, rawValue);
                  } else {
                    bitField0_ |= 0x00000001;
                    interactionResult_ = rawValue;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
    private static final org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new PasswordReuseDialogInteraction();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PasswordReuseDialogInteraction> PARSER;

    public static com.google.protobuf.Parser<PasswordReuseDialogInteraction> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PasswordCapturedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.GaiaPasswordReuse.PasswordCaptured)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
     */
    boolean hasEventTrigger();
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
     */
    org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger getEventTrigger();
  }
  /**
   * <pre>
   * TODO(markusheintz): Remove
   * DEPRECATED: DO NOT USE!
   * Logged when the user logs into Google, and at least once per 28d.
   * </pre>
   *
   * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordCaptured}
   */
  public  static final class PasswordCaptured extends
      com.google.protobuf.GeneratedMessageLite<
          PasswordCaptured, PasswordCaptured.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.GaiaPasswordReuse.PasswordCaptured)
      PasswordCapturedOrBuilder {
    private PasswordCaptured() {
    }
    /**
     * Protobuf enum {@code sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger}
     */
    public enum EventTrigger
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNSPECIFIED = 0;</code>
       */
      UNSPECIFIED(0),
      /**
       * <pre>
       * Event added because user logged in.
       * </pre>
       *
       * <code>USER_LOGGED_IN = 1;</code>
       */
      USER_LOGGED_IN(1),
      /**
       * <pre>
       * Event added because 28d timer fired.
       * </pre>
       *
       * <code>EXPIRED_28D_TIMER = 2;</code>
       */
      EXPIRED_28D_TIMER(2),
      ;

      /**
       * <code>UNSPECIFIED = 0;</code>
       */
      public static final int UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * Event added because user logged in.
       * </pre>
       *
       * <code>USER_LOGGED_IN = 1;</code>
       */
      public static final int USER_LOGGED_IN_VALUE = 1;
      /**
       * <pre>
       * Event added because 28d timer fired.
       * </pre>
       *
       * <code>EXPIRED_28D_TIMER = 2;</code>
       */
      public static final int EXPIRED_28D_TIMER_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static EventTrigger valueOf(int value) {
        return forNumber(value);
      }

      public static EventTrigger forNumber(int value) {
        switch (value) {
          case 0: return UNSPECIFIED;
          case 1: return USER_LOGGED_IN;
          case 2: return EXPIRED_28D_TIMER;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<EventTrigger>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          EventTrigger> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<EventTrigger>() {
              public EventTrigger findValueByNumber(int number) {
                return EventTrigger.forNumber(number);
              }
            };

      private final int value;

      private EventTrigger(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger)
    }

    private int bitField0_;
    public static final int EVENT_TRIGGER_FIELD_NUMBER = 1;
    private int eventTrigger_;
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
     */
    public boolean hasEventTrigger() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
     */
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger getEventTrigger() {
      org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger result = org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger.forNumber(eventTrigger_);
      return result == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger.UNSPECIFIED : result;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
     */
    private void setEventTrigger(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      eventTrigger_ = value.getNumber();
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
     */
    private void clearEventTrigger() {
      bitField0_ = (bitField0_ & ~0x00000001);
      eventTrigger_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, eventTrigger_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, eventTrigger_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * TODO(markusheintz): Remove
     * DEPRECATED: DO NOT USE!
     * Logged when the user logs into Google, and at least once per 28d.
     * </pre>
     *
     * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordCaptured}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.GaiaPasswordReuse.PasswordCaptured)
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCapturedOrBuilder {
      // Construct using org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
       */
      public boolean hasEventTrigger() {
        return instance.hasEventTrigger();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
       */
      public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger getEventTrigger() {
        return instance.getEventTrigger();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
       */
      public Builder setEventTrigger(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger value) {
        copyOnWrite();
        instance.setEventTrigger(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
       */
      public Builder clearEventTrigger() {
        copyOnWrite();
        instance.clearEventTrigger();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.GaiaPasswordReuse.PasswordCaptured)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured other = (org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured) arg1;
          eventTrigger_ = visitor.visitInt(hasEventTrigger(), eventTrigger_,
              other.hasEventTrigger(), other.eventTrigger_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();
                  org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger value = org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(1, rawValue);
                  } else {
                    bitField0_ |= 0x00000001;
                    eventTrigger_ = rawValue;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse.PasswordCaptured)
    private static final org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new PasswordCaptured();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PasswordCaptured> PARSER;

    public static com.google.protobuf.Parser<PasswordCaptured> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  public static final int REUSE_DETECTED_FIELD_NUMBER = 1;
  private org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected reuseDetected_;
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
   */
  public boolean hasReuseDetected() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
   */
  public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected getReuseDetected() {
    return reuseDetected_ == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.getDefaultInstance() : reuseDetected_;
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
   */
  private void setReuseDetected(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected value) {
    if (value == null) {
      throw new NullPointerException();
    }
    reuseDetected_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
   */
  private void setReuseDetected(
      org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.Builder builderForValue) {
    reuseDetected_ = builderForValue.build();
    bitField0_ |= 0x00000001;
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
   */
  private void mergeReuseDetected(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected value) {
    if (reuseDetected_ != null &&
        reuseDetected_ != org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.getDefaultInstance()) {
      reuseDetected_ =
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.newBuilder(reuseDetected_).mergeFrom(value).buildPartial();
    } else {
      reuseDetected_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
   */
  private void clearReuseDetected() {  reuseDetected_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int REUSE_LOOKUP_FIELD_NUMBER = 2;
  private org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup reuseLookup_;
  /**
   * <pre>
   * Logged when we try to detect whether the password was reused on a
   * Phishing or a Low-reputation site.
   * </pre>
   *
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
   */
  public boolean hasReuseLookup() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * Logged when we try to detect whether the password was reused on a
   * Phishing or a Low-reputation site.
   * </pre>
   *
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
   */
  public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup getReuseLookup() {
    return reuseLookup_ == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.getDefaultInstance() : reuseLookup_;
  }
  /**
   * <pre>
   * Logged when we try to detect whether the password was reused on a
   * Phishing or a Low-reputation site.
   * </pre>
   *
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
   */
  private void setReuseLookup(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup value) {
    if (value == null) {
      throw new NullPointerException();
    }
    reuseLookup_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <pre>
   * Logged when we try to detect whether the password was reused on a
   * Phishing or a Low-reputation site.
   * </pre>
   *
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
   */
  private void setReuseLookup(
      org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.Builder builderForValue) {
    reuseLookup_ = builderForValue.build();
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * Logged when we try to detect whether the password was reused on a
   * Phishing or a Low-reputation site.
   * </pre>
   *
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
   */
  private void mergeReuseLookup(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup value) {
    if (reuseLookup_ != null &&
        reuseLookup_ != org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.getDefaultInstance()) {
      reuseLookup_ =
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.newBuilder(reuseLookup_).mergeFrom(value).buildPartial();
    } else {
      reuseLookup_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * Logged when we try to detect whether the password was reused on a
   * Phishing or a Low-reputation site.
   * </pre>
   *
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
   */
  private void clearReuseLookup() {  reuseLookup_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int DIALOG_INTERACTION_FIELD_NUMBER = 3;
  private org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction dialogInteraction_;
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
   */
  public boolean hasDialogInteraction() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
   */
  public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction getDialogInteraction() {
    return dialogInteraction_ == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.getDefaultInstance() : dialogInteraction_;
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
   */
  private void setDialogInteraction(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction value) {
    if (value == null) {
      throw new NullPointerException();
    }
    dialogInteraction_ = value;
    bitField0_ |= 0x00000004;
    }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
   */
  private void setDialogInteraction(
      org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.Builder builderForValue) {
    dialogInteraction_ = builderForValue.build();
    bitField0_ |= 0x00000004;
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
   */
  private void mergeDialogInteraction(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction value) {
    if (dialogInteraction_ != null &&
        dialogInteraction_ != org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.getDefaultInstance()) {
      dialogInteraction_ =
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.newBuilder(dialogInteraction_).mergeFrom(value).buildPartial();
    } else {
      dialogInteraction_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
   */
  private void clearDialogInteraction() {  dialogInteraction_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static final int PASSWORD_CAPTURED_FIELD_NUMBER = 4;
  private org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured passwordCaptured_;
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;</code>
   */
  public boolean hasPasswordCaptured() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;</code>
   */
  public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured getPasswordCaptured() {
    return passwordCaptured_ == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.getDefaultInstance() : passwordCaptured_;
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;</code>
   */
  private void setPasswordCaptured(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured value) {
    if (value == null) {
      throw new NullPointerException();
    }
    passwordCaptured_ = value;
    bitField0_ |= 0x00000008;
    }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;</code>
   */
  private void setPasswordCaptured(
      org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.Builder builderForValue) {
    passwordCaptured_ = builderForValue.build();
    bitField0_ |= 0x00000008;
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;</code>
   */
  private void mergePasswordCaptured(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured value) {
    if (passwordCaptured_ != null &&
        passwordCaptured_ != org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.getDefaultInstance()) {
      passwordCaptured_ =
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.newBuilder(passwordCaptured_).mergeFrom(value).buildPartial();
    } else {
      passwordCaptured_ = value;
    }
    bitField0_ |= 0x00000008;
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;</code>
   */
  private void clearPasswordCaptured() {  passwordCaptured_ = null;
    bitField0_ = (bitField0_ & ~0x00000008);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeMessage(1, getReuseDetected());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeMessage(2, getReuseLookup());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeMessage(3, getDialogInteraction());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeMessage(4, getPasswordCaptured());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getReuseDetected());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getReuseLookup());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getDialogInteraction());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getPasswordCaptured());
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.GaiaPasswordReuse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * User reused their GAIA password on another website.
   * </pre>
   *
   * Protobuf type {@code sync_pb.GaiaPasswordReuse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.GaiaPasswordReuse, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.GaiaPasswordReuse)
      org.chromium.components.sync.protocol.GaiaPasswordReuseOrBuilder {
    // Construct using org.chromium.components.sync.protocol.GaiaPasswordReuse.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
     */
    public boolean hasReuseDetected() {
      return instance.hasReuseDetected();
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
     */
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected getReuseDetected() {
      return instance.getReuseDetected();
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
     */
    public Builder setReuseDetected(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected value) {
      copyOnWrite();
      instance.setReuseDetected(value);
      return this;
      }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
     */
    public Builder setReuseDetected(
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.Builder builderForValue) {
      copyOnWrite();
      instance.setReuseDetected(builderForValue);
      return this;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
     */
    public Builder mergeReuseDetected(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected value) {
      copyOnWrite();
      instance.mergeReuseDetected(value);
      return this;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
     */
    public Builder clearReuseDetected() {  copyOnWrite();
      instance.clearReuseDetected();
      return this;
    }

    /**
     * <pre>
     * Logged when we try to detect whether the password was reused on a
     * Phishing or a Low-reputation site.
     * </pre>
     *
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
     */
    public boolean hasReuseLookup() {
      return instance.hasReuseLookup();
    }
    /**
     * <pre>
     * Logged when we try to detect whether the password was reused on a
     * Phishing or a Low-reputation site.
     * </pre>
     *
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
     */
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup getReuseLookup() {
      return instance.getReuseLookup();
    }
    /**
     * <pre>
     * Logged when we try to detect whether the password was reused on a
     * Phishing or a Low-reputation site.
     * </pre>
     *
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
     */
    public Builder setReuseLookup(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup value) {
      copyOnWrite();
      instance.setReuseLookup(value);
      return this;
      }
    /**
     * <pre>
     * Logged when we try to detect whether the password was reused on a
     * Phishing or a Low-reputation site.
     * </pre>
     *
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
     */
    public Builder setReuseLookup(
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.Builder builderForValue) {
      copyOnWrite();
      instance.setReuseLookup(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Logged when we try to detect whether the password was reused on a
     * Phishing or a Low-reputation site.
     * </pre>
     *
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
     */
    public Builder mergeReuseLookup(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup value) {
      copyOnWrite();
      instance.mergeReuseLookup(value);
      return this;
    }
    /**
     * <pre>
     * Logged when we try to detect whether the password was reused on a
     * Phishing or a Low-reputation site.
     * </pre>
     *
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
     */
    public Builder clearReuseLookup() {  copyOnWrite();
      instance.clearReuseLookup();
      return this;
    }

    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
     */
    public boolean hasDialogInteraction() {
      return instance.hasDialogInteraction();
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
     */
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction getDialogInteraction() {
      return instance.getDialogInteraction();
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
     */
    public Builder setDialogInteraction(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction value) {
      copyOnWrite();
      instance.setDialogInteraction(value);
      return this;
      }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
     */
    public Builder setDialogInteraction(
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.Builder builderForValue) {
      copyOnWrite();
      instance.setDialogInteraction(builderForValue);
      return this;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
     */
    public Builder mergeDialogInteraction(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction value) {
      copyOnWrite();
      instance.mergeDialogInteraction(value);
      return this;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
     */
    public Builder clearDialogInteraction() {  copyOnWrite();
      instance.clearDialogInteraction();
      return this;
    }

    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;</code>
     */
    public boolean hasPasswordCaptured() {
      return instance.hasPasswordCaptured();
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;</code>
     */
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured getPasswordCaptured() {
      return instance.getPasswordCaptured();
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;</code>
     */
    public Builder setPasswordCaptured(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured value) {
      copyOnWrite();
      instance.setPasswordCaptured(value);
      return this;
      }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;</code>
     */
    public Builder setPasswordCaptured(
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.Builder builderForValue) {
      copyOnWrite();
      instance.setPasswordCaptured(builderForValue);
      return this;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;</code>
     */
    public Builder mergePasswordCaptured(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured value) {
      copyOnWrite();
      instance.mergePasswordCaptured(value);
      return this;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4;</code>
     */
    public Builder clearPasswordCaptured() {  copyOnWrite();
      instance.clearPasswordCaptured();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.GaiaPasswordReuse)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.GaiaPasswordReuse();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.GaiaPasswordReuse other = (org.chromium.components.sync.protocol.GaiaPasswordReuse) arg1;
        reuseDetected_ = visitor.visitMessage(reuseDetected_, other.reuseDetected_);
        reuseLookup_ = visitor.visitMessage(reuseLookup_, other.reuseLookup_);
        dialogInteraction_ = visitor.visitMessage(dialogInteraction_, other.dialogInteraction_);
        passwordCaptured_ = visitor.visitMessage(passwordCaptured_, other.passwordCaptured_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = reuseDetected_.toBuilder();
                }
                reuseDetected_ = input.readMessage(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(reuseDetected_);
                  reuseDetected_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
              case 18: {
                org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = reuseLookup_.toBuilder();
                }
                reuseLookup_ = input.readMessage(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(reuseLookup_);
                  reuseLookup_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 26: {
                org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                  subBuilder = dialogInteraction_.toBuilder();
                }
                dialogInteraction_ = input.readMessage(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(dialogInteraction_);
                  dialogInteraction_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
              case 34: {
                org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.Builder subBuilder = null;
                if (((bitField0_ & 0x00000008) == 0x00000008)) {
                  subBuilder = passwordCaptured_.toBuilder();
                }
                passwordCaptured_ = input.readMessage(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(passwordCaptured_);
                  passwordCaptured_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000008;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.GaiaPasswordReuse.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse)
  private static final org.chromium.components.sync.protocol.GaiaPasswordReuse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new GaiaPasswordReuse();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.GaiaPasswordReuse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<GaiaPasswordReuse> PARSER;

  public static com.google.protobuf.Parser<GaiaPasswordReuse> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

