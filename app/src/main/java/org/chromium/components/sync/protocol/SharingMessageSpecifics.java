// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing_message_specifics.proto

package org.chromium.components.sync.protocol;

/**
 * Protobuf type {@code sync_pb.SharingMessageSpecifics}
 */
public  final class SharingMessageSpecifics extends
    com.google.protobuf.GeneratedMessageLite<
        SharingMessageSpecifics, SharingMessageSpecifics.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.SharingMessageSpecifics)
    SharingMessageSpecificsOrBuilder {
  private SharingMessageSpecifics() {
    messageId_ = "";
    payload_ = com.google.protobuf.ByteString.EMPTY;
  }
  public interface ChannelConfigurationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * FCM channel configuration. Message will be delivered as a FCM message.
     * </pre>
     *
     * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;</code>
     */
    boolean hasFcm();
    /**
     * <pre>
     * FCM channel configuration. Message will be delivered as a FCM message.
     * </pre>
     *
     * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;</code>
     */
    org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration getFcm();

    /**
     * <pre>
     * Opaque server channel configuration. Message will be delivered through
     * server channel.
     * </pre>
     *
     * <code>optional bytes server = 2;</code>
     */
    boolean hasServer();
    /**
     * <pre>
     * Opaque server channel configuration. Message will be delivered through
     * server channel.
     * </pre>
     *
     * <code>optional bytes server = 2;</code>
     */
    com.google.protobuf.ByteString getServer();

    public org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.ChannelConfigurationCase getChannelConfigurationCase();
  }
  /**
   * Protobuf type {@code sync_pb.SharingMessageSpecifics.ChannelConfiguration}
   */
  public  static final class ChannelConfiguration extends
      com.google.protobuf.GeneratedMessageLite<
          ChannelConfiguration, ChannelConfiguration.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
      ChannelConfigurationOrBuilder {
    private ChannelConfiguration() {
    }
    public interface FCMChannelConfigurationOrBuilder extends
        // @@protoc_insertion_point(interface_extends:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * FCM registration token of target device.
       * </pre>
       *
       * <code>optional string token = 1;</code>
       */
      boolean hasToken();
      /**
       * <pre>
       * FCM registration token of target device.
       * </pre>
       *
       * <code>optional string token = 1;</code>
       */
      java.lang.String getToken();
      /**
       * <pre>
       * FCM registration token of target device.
       * </pre>
       *
       * <code>optional string token = 1;</code>
       */
      com.google.protobuf.ByteString
          getTokenBytes();

      /**
       * <pre>
       * Time to live for a FCM message (in seconds) - if specified, the message
       * will expire based on the TTL.
       * </pre>
       *
       * <code>optional int32 ttl = 2;</code>
       */
      boolean hasTtl();
      /**
       * <pre>
       * Time to live for a FCM message (in seconds) - if specified, the message
       * will expire based on the TTL.
       * </pre>
       *
       * <code>optional int32 ttl = 2;</code>
       */
      int getTtl();

      /**
       * <pre>
       * Priority level of a FCM message. 5 = normal, 10 = high.
       * </pre>
       *
       * <code>optional int32 priority = 3;</code>
       */
      boolean hasPriority();
      /**
       * <pre>
       * Priority level of a FCM message. 5 = normal, 10 = high.
       * </pre>
       *
       * <code>optional int32 priority = 3;</code>
       */
      int getPriority();
    }
    /**
     * Protobuf type {@code sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration}
     */
    public  static final class FCMChannelConfiguration extends
        com.google.protobuf.GeneratedMessageLite<
            FCMChannelConfiguration, FCMChannelConfiguration.Builder> implements
        // @@protoc_insertion_point(message_implements:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
        FCMChannelConfigurationOrBuilder {
      private FCMChannelConfiguration() {
        token_ = "";
      }
      private int bitField0_;
      public static final int TOKEN_FIELD_NUMBER = 1;
      private java.lang.String token_;
      /**
       * <pre>
       * FCM registration token of target device.
       * </pre>
       *
       * <code>optional string token = 1;</code>
       */
      public boolean hasToken() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * FCM registration token of target device.
       * </pre>
       *
       * <code>optional string token = 1;</code>
       */
      public java.lang.String getToken() {
        return token_;
      }
      /**
       * <pre>
       * FCM registration token of target device.
       * </pre>
       *
       * <code>optional string token = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTokenBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(token_);
      }
      /**
       * <pre>
       * FCM registration token of target device.
       * </pre>
       *
       * <code>optional string token = 1;</code>
       */
      private void setToken(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        token_ = value;
      }
      /**
       * <pre>
       * FCM registration token of target device.
       * </pre>
       *
       * <code>optional string token = 1;</code>
       */
      private void clearToken() {
        bitField0_ = (bitField0_ & ~0x00000001);
        token_ = getDefaultInstance().getToken();
      }
      /**
       * <pre>
       * FCM registration token of target device.
       * </pre>
       *
       * <code>optional string token = 1;</code>
       */
      private void setTokenBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        token_ = value.toStringUtf8();
      }

      public static final int TTL_FIELD_NUMBER = 2;
      private int ttl_;
      /**
       * <pre>
       * Time to live for a FCM message (in seconds) - if specified, the message
       * will expire based on the TTL.
       * </pre>
       *
       * <code>optional int32 ttl = 2;</code>
       */
      public boolean hasTtl() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Time to live for a FCM message (in seconds) - if specified, the message
       * will expire based on the TTL.
       * </pre>
       *
       * <code>optional int32 ttl = 2;</code>
       */
      public int getTtl() {
        return ttl_;
      }
      /**
       * <pre>
       * Time to live for a FCM message (in seconds) - if specified, the message
       * will expire based on the TTL.
       * </pre>
       *
       * <code>optional int32 ttl = 2;</code>
       */
      private void setTtl(int value) {
        bitField0_ |= 0x00000002;
        ttl_ = value;
      }
      /**
       * <pre>
       * Time to live for a FCM message (in seconds) - if specified, the message
       * will expire based on the TTL.
       * </pre>
       *
       * <code>optional int32 ttl = 2;</code>
       */
      private void clearTtl() {
        bitField0_ = (bitField0_ & ~0x00000002);
        ttl_ = 0;
      }

      public static final int PRIORITY_FIELD_NUMBER = 3;
      private int priority_;
      /**
       * <pre>
       * Priority level of a FCM message. 5 = normal, 10 = high.
       * </pre>
       *
       * <code>optional int32 priority = 3;</code>
       */
      public boolean hasPriority() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Priority level of a FCM message. 5 = normal, 10 = high.
       * </pre>
       *
       * <code>optional int32 priority = 3;</code>
       */
      public int getPriority() {
        return priority_;
      }
      /**
       * <pre>
       * Priority level of a FCM message. 5 = normal, 10 = high.
       * </pre>
       *
       * <code>optional int32 priority = 3;</code>
       */
      private void setPriority(int value) {
        bitField0_ |= 0x00000004;
        priority_ = value;
      }
      /**
       * <pre>
       * Priority level of a FCM message. 5 = normal, 10 = high.
       * </pre>
       *
       * <code>optional int32 priority = 3;</code>
       */
      private void clearPriority() {
        bitField0_ = (bitField0_ & ~0x00000004);
        priority_ = 0;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeString(1, getToken());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, ttl_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeInt32(3, priority_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(1, getToken());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, ttl_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, priority_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      /**
       * Protobuf type {@code sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration, Builder> implements
          // @@protoc_insertion_point(builder_implements:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
          org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfigurationOrBuilder {
        // Construct using org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * FCM registration token of target device.
         * </pre>
         *
         * <code>optional string token = 1;</code>
         */
        public boolean hasToken() {
          return instance.hasToken();
        }
        /**
         * <pre>
         * FCM registration token of target device.
         * </pre>
         *
         * <code>optional string token = 1;</code>
         */
        public java.lang.String getToken() {
          return instance.getToken();
        }
        /**
         * <pre>
         * FCM registration token of target device.
         * </pre>
         *
         * <code>optional string token = 1;</code>
         */
        public com.google.protobuf.ByteString
            getTokenBytes() {
          return instance.getTokenBytes();
        }
        /**
         * <pre>
         * FCM registration token of target device.
         * </pre>
         *
         * <code>optional string token = 1;</code>
         */
        public Builder setToken(
            java.lang.String value) {
          copyOnWrite();
          instance.setToken(value);
          return this;
        }
        /**
         * <pre>
         * FCM registration token of target device.
         * </pre>
         *
         * <code>optional string token = 1;</code>
         */
        public Builder clearToken() {
          copyOnWrite();
          instance.clearToken();
          return this;
        }
        /**
         * <pre>
         * FCM registration token of target device.
         * </pre>
         *
         * <code>optional string token = 1;</code>
         */
        public Builder setTokenBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setTokenBytes(value);
          return this;
        }

        /**
         * <pre>
         * Time to live for a FCM message (in seconds) - if specified, the message
         * will expire based on the TTL.
         * </pre>
         *
         * <code>optional int32 ttl = 2;</code>
         */
        public boolean hasTtl() {
          return instance.hasTtl();
        }
        /**
         * <pre>
         * Time to live for a FCM message (in seconds) - if specified, the message
         * will expire based on the TTL.
         * </pre>
         *
         * <code>optional int32 ttl = 2;</code>
         */
        public int getTtl() {
          return instance.getTtl();
        }
        /**
         * <pre>
         * Time to live for a FCM message (in seconds) - if specified, the message
         * will expire based on the TTL.
         * </pre>
         *
         * <code>optional int32 ttl = 2;</code>
         */
        public Builder setTtl(int value) {
          copyOnWrite();
          instance.setTtl(value);
          return this;
        }
        /**
         * <pre>
         * Time to live for a FCM message (in seconds) - if specified, the message
         * will expire based on the TTL.
         * </pre>
         *
         * <code>optional int32 ttl = 2;</code>
         */
        public Builder clearTtl() {
          copyOnWrite();
          instance.clearTtl();
          return this;
        }

        /**
         * <pre>
         * Priority level of a FCM message. 5 = normal, 10 = high.
         * </pre>
         *
         * <code>optional int32 priority = 3;</code>
         */
        public boolean hasPriority() {
          return instance.hasPriority();
        }
        /**
         * <pre>
         * Priority level of a FCM message. 5 = normal, 10 = high.
         * </pre>
         *
         * <code>optional int32 priority = 3;</code>
         */
        public int getPriority() {
          return instance.getPriority();
        }
        /**
         * <pre>
         * Priority level of a FCM message. 5 = normal, 10 = high.
         * </pre>
         *
         * <code>optional int32 priority = 3;</code>
         */
        public Builder setPriority(int value) {
          copyOnWrite();
          instance.setPriority(value);
          return this;
        }
        /**
         * <pre>
         * Priority level of a FCM message. 5 = normal, 10 = high.
         * </pre>
         *
         * <code>optional int32 priority = 3;</code>
         */
        public Builder clearPriority() {
          copyOnWrite();
          instance.clearPriority();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
      }
      protected final Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration();
          }
          case IS_INITIALIZED: {
            return DEFAULT_INSTANCE;
          }
          case MAKE_IMMUTABLE: {
            return null;
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case VISIT: {
            Visitor visitor = (Visitor) arg0;
            org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration other = (org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration) arg1;
            token_ = visitor.visitString(
                hasToken(), token_,
                other.hasToken(), other.token_);
            ttl_ = visitor.visitInt(
                hasTtl(), ttl_,
                other.hasTtl(), other.ttl_);
            priority_ = visitor.visitInt(
                hasPriority(), priority_,
                other.hasPriority(), other.priority_);
            if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                .INSTANCE) {
              bitField0_ |= other.bitField0_;
            }
            return this;
          }
          case MERGE_FROM_STREAM: {
            com.google.protobuf.CodedInputStream input =
                (com.google.protobuf.CodedInputStream) arg0;
            com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                (com.google.protobuf.ExtensionRegistryLite) arg1;
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  default: {
                    if (!parseUnknownField(tag, input)) {
                      done = true;
                    }
                    break;
                  }
                  case 10: {
                    String s = input.readString();
                    bitField0_ |= 0x00000001;
                    token_ = s;
                    break;
                  }
                  case 16: {
                    bitField0_ |= 0x00000002;
                    ttl_ = input.readInt32();
                    break;
                  }
                  case 24: {
                    bitField0_ |= 0x00000004;
                    priority_ = input.readInt32();
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw new RuntimeException(e.setUnfinishedMessage(this));
            } catch (java.io.IOException e) {
              throw new RuntimeException(
                  new com.google.protobuf.InvalidProtocolBufferException(
                      e.getMessage()).setUnfinishedMessage(this));
            } finally {
            }
          }
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.class) {
                if (PARSER == null) {
                  PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                }
              }
            }
            return PARSER;
          }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration)
      private static final org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new FCMChannelConfiguration();
        DEFAULT_INSTANCE.makeImmutable();
      }

      public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<FCMChannelConfiguration> PARSER;

      public static com.google.protobuf.Parser<FCMChannelConfiguration> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    private int channelConfigurationCase_ = 0;
    private java.lang.Object channelConfiguration_;
    public enum ChannelConfigurationCase
        implements com.google.protobuf.Internal.EnumLite {
      FCM(1),
      SERVER(2),
      CHANNELCONFIGURATION_NOT_SET(0);
      private final int value;
      private ChannelConfigurationCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ChannelConfigurationCase valueOf(int value) {
        return forNumber(value);
      }

      public static ChannelConfigurationCase forNumber(int value) {
        switch (value) {
          case 1: return FCM;
          case 2: return SERVER;
          case 0: return CHANNELCONFIGURATION_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ChannelConfigurationCase
    getChannelConfigurationCase() {
      return ChannelConfigurationCase.forNumber(
          channelConfigurationCase_);
    }

    private void clearChannelConfiguration() {
      channelConfigurationCase_ = 0;
      channelConfiguration_ = null;
    }

    public static final int FCM_FIELD_NUMBER = 1;
    /**
     * <pre>
     * FCM channel configuration. Message will be delivered as a FCM message.
     * </pre>
     *
     * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;</code>
     */
    public boolean hasFcm() {
      return channelConfigurationCase_ == 1;
    }
    /**
     * <pre>
     * FCM channel configuration. Message will be delivered as a FCM message.
     * </pre>
     *
     * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;</code>
     */
    public org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration getFcm() {
      if (channelConfigurationCase_ == 1) {
         return (org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration) channelConfiguration_;
      }
      return org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.getDefaultInstance();
    }
    /**
     * <pre>
     * FCM channel configuration. Message will be delivered as a FCM message.
     * </pre>
     *
     * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;</code>
     */
    private void setFcm(org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration value) {
      if (value == null) {
        throw new NullPointerException();
      }
      channelConfiguration_ = value;
      channelConfigurationCase_ = 1;
    }
    /**
     * <pre>
     * FCM channel configuration. Message will be delivered as a FCM message.
     * </pre>
     *
     * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;</code>
     */
    private void setFcm(
        org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.Builder builderForValue) {
      channelConfiguration_ = builderForValue.build();
      channelConfigurationCase_ = 1;
    }
    /**
     * <pre>
     * FCM channel configuration. Message will be delivered as a FCM message.
     * </pre>
     *
     * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;</code>
     */
    private void mergeFcm(org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration value) {
      if (channelConfigurationCase_ == 1 &&
          channelConfiguration_ != org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.getDefaultInstance()) {
        channelConfiguration_ = org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.newBuilder((org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration) channelConfiguration_)
            .mergeFrom(value).buildPartial();
      } else {
        channelConfiguration_ = value;
      }
      channelConfigurationCase_ = 1;
    }
    /**
     * <pre>
     * FCM channel configuration. Message will be delivered as a FCM message.
     * </pre>
     *
     * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;</code>
     */
    private void clearFcm() {
      if (channelConfigurationCase_ == 1) {
        channelConfigurationCase_ = 0;
        channelConfiguration_ = null;
      }
    }

    public static final int SERVER_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Opaque server channel configuration. Message will be delivered through
     * server channel.
     * </pre>
     *
     * <code>optional bytes server = 2;</code>
     */
    public boolean hasServer() {
      return channelConfigurationCase_ == 2;
    }
    /**
     * <pre>
     * Opaque server channel configuration. Message will be delivered through
     * server channel.
     * </pre>
     *
     * <code>optional bytes server = 2;</code>
     */
    public com.google.protobuf.ByteString getServer() {
      if (channelConfigurationCase_ == 2) {
        return (com.google.protobuf.ByteString) channelConfiguration_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * <pre>
     * Opaque server channel configuration. Message will be delivered through
     * server channel.
     * </pre>
     *
     * <code>optional bytes server = 2;</code>
     */
    private void setServer(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  channelConfigurationCase_ = 2;
      channelConfiguration_ = value;
    }
    /**
     * <pre>
     * Opaque server channel configuration. Message will be delivered through
     * server channel.
     * </pre>
     *
     * <code>optional bytes server = 2;</code>
     */
    private void clearServer() {
      if (channelConfigurationCase_ == 2) {
        channelConfigurationCase_ = 0;
        channelConfiguration_ = null;
      }
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (channelConfigurationCase_ == 1) {
        output.writeMessage(1, (org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration) channelConfiguration_);
      }
      if (channelConfigurationCase_ == 2) {
        output.writeBytes(
            2, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) channelConfiguration_));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (channelConfigurationCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration) channelConfiguration_);
      }
      if (channelConfigurationCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(
              2, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) channelConfiguration_));
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code sync_pb.SharingMessageSpecifics.ChannelConfiguration}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
        org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfigurationOrBuilder {
      // Construct using org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public ChannelConfigurationCase
          getChannelConfigurationCase() {
        return instance.getChannelConfigurationCase();
      }

      public Builder clearChannelConfiguration() {
        copyOnWrite();
        instance.clearChannelConfiguration();
        return this;
      }


      /**
       * <pre>
       * FCM channel configuration. Message will be delivered as a FCM message.
       * </pre>
       *
       * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;</code>
       */
      public boolean hasFcm() {
        return instance.hasFcm();
      }
      /**
       * <pre>
       * FCM channel configuration. Message will be delivered as a FCM message.
       * </pre>
       *
       * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;</code>
       */
      public org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration getFcm() {
        return instance.getFcm();
      }
      /**
       * <pre>
       * FCM channel configuration. Message will be delivered as a FCM message.
       * </pre>
       *
       * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;</code>
       */
      public Builder setFcm(org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration value) {
        copyOnWrite();
        instance.setFcm(value);
        return this;
      }
      /**
       * <pre>
       * FCM channel configuration. Message will be delivered as a FCM message.
       * </pre>
       *
       * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;</code>
       */
      public Builder setFcm(
          org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.Builder builderForValue) {
        copyOnWrite();
        instance.setFcm(builderForValue);
        return this;
      }
      /**
       * <pre>
       * FCM channel configuration. Message will be delivered as a FCM message.
       * </pre>
       *
       * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;</code>
       */
      public Builder mergeFcm(org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration value) {
        copyOnWrite();
        instance.mergeFcm(value);
        return this;
      }
      /**
       * <pre>
       * FCM channel configuration. Message will be delivered as a FCM message.
       * </pre>
       *
       * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration fcm = 1;</code>
       */
      public Builder clearFcm() {
        copyOnWrite();
        instance.clearFcm();
        return this;
      }

      /**
       * <pre>
       * Opaque server channel configuration. Message will be delivered through
       * server channel.
       * </pre>
       *
       * <code>optional bytes server = 2;</code>
       */
      public boolean hasServer() {
        return instance.hasServer();
      }
      /**
       * <pre>
       * Opaque server channel configuration. Message will be delivered through
       * server channel.
       * </pre>
       *
       * <code>optional bytes server = 2;</code>
       */
      public com.google.protobuf.ByteString getServer() {
        return instance.getServer();
      }
      /**
       * <pre>
       * Opaque server channel configuration. Message will be delivered through
       * server channel.
       * </pre>
       *
       * <code>optional bytes server = 2;</code>
       */
      public Builder setServer(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setServer(value);
        return this;
      }
      /**
       * <pre>
       * Opaque server channel configuration. Message will be delivered through
       * server channel.
       * </pre>
       *
       * <code>optional bytes server = 2;</code>
       */
      public Builder clearServer() {
        copyOnWrite();
        instance.clearServer();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration other = (org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration) arg1;
          switch (other.getChannelConfigurationCase()) {
            case FCM: {
              channelConfiguration_ = visitor.visitOneofMessage(
                  channelConfigurationCase_ == 1,
                  channelConfiguration_,
                  other.channelConfiguration_);
              break;
            }
            case SERVER: {
              channelConfiguration_ = visitor.visitOneofByteString(
                  channelConfigurationCase_ == 2, channelConfiguration_, other.channelConfiguration_);
              break;
            }
            case CHANNELCONFIGURATION_NOT_SET: {
              visitor.visitOneofNotSet(channelConfigurationCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.channelConfigurationCase_ != 0) {
              channelConfigurationCase_ = other.channelConfigurationCase_;
            }
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.Builder subBuilder = null;
                  if (channelConfigurationCase_ == 1) {
                    subBuilder = ((org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration) channelConfiguration_).toBuilder();
                  }
                  channelConfiguration_ =
                       input.readMessage(org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.FCMChannelConfiguration) channelConfiguration_);
                    channelConfiguration_ = subBuilder.buildPartial();
                  }
                  channelConfigurationCase_ = 1;
                  break;
                }
                case 18: {
                  channelConfigurationCase_ = 2;
                  channelConfiguration_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.SharingMessageSpecifics.ChannelConfiguration)
    private static final org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChannelConfiguration();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChannelConfiguration> PARSER;

    public static com.google.protobuf.Parser<ChannelConfiguration> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  public static final int MESSAGE_ID_FIELD_NUMBER = 1;
  private java.lang.String messageId_;
  /**
   * <pre>
   * Unique identifier of message.
   * </pre>
   *
   * <code>optional string message_id = 1;</code>
   */
  public boolean hasMessageId() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * Unique identifier of message.
   * </pre>
   *
   * <code>optional string message_id = 1;</code>
   */
  public java.lang.String getMessageId() {
    return messageId_;
  }
  /**
   * <pre>
   * Unique identifier of message.
   * </pre>
   *
   * <code>optional string message_id = 1;</code>
   */
  public com.google.protobuf.ByteString
      getMessageIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(messageId_);
  }
  /**
   * <pre>
   * Unique identifier of message.
   * </pre>
   *
   * <code>optional string message_id = 1;</code>
   */
  private void setMessageId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    messageId_ = value;
  }
  /**
   * <pre>
   * Unique identifier of message.
   * </pre>
   *
   * <code>optional string message_id = 1;</code>
   */
  private void clearMessageId() {
    bitField0_ = (bitField0_ & ~0x00000001);
    messageId_ = getDefaultInstance().getMessageId();
  }
  /**
   * <pre>
   * Unique identifier of message.
   * </pre>
   *
   * <code>optional string message_id = 1;</code>
   */
  private void setMessageIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    messageId_ = value.toStringUtf8();
  }

  public static final int CHANNEL_CONFIGURATION_FIELD_NUMBER = 2;
  private org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration channelConfiguration_;
  /**
   * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;</code>
   */
  public boolean hasChannelConfiguration() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;</code>
   */
  public org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration getChannelConfiguration() {
    return channelConfiguration_ == null ? org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.getDefaultInstance() : channelConfiguration_;
  }
  /**
   * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;</code>
   */
  private void setChannelConfiguration(org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration value) {
    if (value == null) {
      throw new NullPointerException();
    }
    channelConfiguration_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;</code>
   */
  private void setChannelConfiguration(
      org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.Builder builderForValue) {
    channelConfiguration_ = builderForValue.build();
    bitField0_ |= 0x00000002;
  }
  /**
   * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;</code>
   */
  private void mergeChannelConfiguration(org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration value) {
    if (channelConfiguration_ != null &&
        channelConfiguration_ != org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.getDefaultInstance()) {
      channelConfiguration_ =
        org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.newBuilder(channelConfiguration_).mergeFrom(value).buildPartial();
    } else {
      channelConfiguration_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;</code>
   */
  private void clearChannelConfiguration() {  channelConfiguration_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int PAYLOAD_FIELD_NUMBER = 3;
  private com.google.protobuf.ByteString payload_;
  /**
   * <pre>
   * Payload encrypted using the target user keys according to WebPush
   * encryption scheme. The payload has to be a valid
   * chrome/browser/sharing/proto/sharing_message.proto serialized using
   * SerializeToString.
   * </pre>
   *
   * <code>optional bytes payload = 3;</code>
   */
  public boolean hasPayload() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * Payload encrypted using the target user keys according to WebPush
   * encryption scheme. The payload has to be a valid
   * chrome/browser/sharing/proto/sharing_message.proto serialized using
   * SerializeToString.
   * </pre>
   *
   * <code>optional bytes payload = 3;</code>
   */
  public com.google.protobuf.ByteString getPayload() {
    return payload_;
  }
  /**
   * <pre>
   * Payload encrypted using the target user keys according to WebPush
   * encryption scheme. The payload has to be a valid
   * chrome/browser/sharing/proto/sharing_message.proto serialized using
   * SerializeToString.
   * </pre>
   *
   * <code>optional bytes payload = 3;</code>
   */
  private void setPayload(com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
    payload_ = value;
  }
  /**
   * <pre>
   * Payload encrypted using the target user keys according to WebPush
   * encryption scheme. The payload has to be a valid
   * chrome/browser/sharing/proto/sharing_message.proto serialized using
   * SerializeToString.
   * </pre>
   *
   * <code>optional bytes payload = 3;</code>
   */
  private void clearPayload() {
    bitField0_ = (bitField0_ & ~0x00000004);
    payload_ = getDefaultInstance().getPayload();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeString(1, getMessageId());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeMessage(2, getChannelConfiguration());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeBytes(3, payload_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getMessageId());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getChannelConfiguration());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(3, payload_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.SharingMessageSpecifics parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.SharingMessageSpecifics parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SharingMessageSpecifics parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.SharingMessageSpecifics parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SharingMessageSpecifics parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SharingMessageSpecifics parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SharingMessageSpecifics parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SharingMessageSpecifics parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SharingMessageSpecifics parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SharingMessageSpecifics parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.SharingMessageSpecifics prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code sync_pb.SharingMessageSpecifics}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.SharingMessageSpecifics, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.SharingMessageSpecifics)
      org.chromium.components.sync.protocol.SharingMessageSpecificsOrBuilder {
    // Construct using org.chromium.components.sync.protocol.SharingMessageSpecifics.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Unique identifier of message.
     * </pre>
     *
     * <code>optional string message_id = 1;</code>
     */
    public boolean hasMessageId() {
      return instance.hasMessageId();
    }
    /**
     * <pre>
     * Unique identifier of message.
     * </pre>
     *
     * <code>optional string message_id = 1;</code>
     */
    public java.lang.String getMessageId() {
      return instance.getMessageId();
    }
    /**
     * <pre>
     * Unique identifier of message.
     * </pre>
     *
     * <code>optional string message_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getMessageIdBytes() {
      return instance.getMessageIdBytes();
    }
    /**
     * <pre>
     * Unique identifier of message.
     * </pre>
     *
     * <code>optional string message_id = 1;</code>
     */
    public Builder setMessageId(
        java.lang.String value) {
      copyOnWrite();
      instance.setMessageId(value);
      return this;
    }
    /**
     * <pre>
     * Unique identifier of message.
     * </pre>
     *
     * <code>optional string message_id = 1;</code>
     */
    public Builder clearMessageId() {
      copyOnWrite();
      instance.clearMessageId();
      return this;
    }
    /**
     * <pre>
     * Unique identifier of message.
     * </pre>
     *
     * <code>optional string message_id = 1;</code>
     */
    public Builder setMessageIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setMessageIdBytes(value);
      return this;
    }

    /**
     * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;</code>
     */
    public boolean hasChannelConfiguration() {
      return instance.hasChannelConfiguration();
    }
    /**
     * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;</code>
     */
    public org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration getChannelConfiguration() {
      return instance.getChannelConfiguration();
    }
    /**
     * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;</code>
     */
    public Builder setChannelConfiguration(org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration value) {
      copyOnWrite();
      instance.setChannelConfiguration(value);
      return this;
      }
    /**
     * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;</code>
     */
    public Builder setChannelConfiguration(
        org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.Builder builderForValue) {
      copyOnWrite();
      instance.setChannelConfiguration(builderForValue);
      return this;
    }
    /**
     * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;</code>
     */
    public Builder mergeChannelConfiguration(org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration value) {
      copyOnWrite();
      instance.mergeChannelConfiguration(value);
      return this;
    }
    /**
     * <code>optional .sync_pb.SharingMessageSpecifics.ChannelConfiguration channel_configuration = 2;</code>
     */
    public Builder clearChannelConfiguration() {  copyOnWrite();
      instance.clearChannelConfiguration();
      return this;
    }

    /**
     * <pre>
     * Payload encrypted using the target user keys according to WebPush
     * encryption scheme. The payload has to be a valid
     * chrome/browser/sharing/proto/sharing_message.proto serialized using
     * SerializeToString.
     * </pre>
     *
     * <code>optional bytes payload = 3;</code>
     */
    public boolean hasPayload() {
      return instance.hasPayload();
    }
    /**
     * <pre>
     * Payload encrypted using the target user keys according to WebPush
     * encryption scheme. The payload has to be a valid
     * chrome/browser/sharing/proto/sharing_message.proto serialized using
     * SerializeToString.
     * </pre>
     *
     * <code>optional bytes payload = 3;</code>
     */
    public com.google.protobuf.ByteString getPayload() {
      return instance.getPayload();
    }
    /**
     * <pre>
     * Payload encrypted using the target user keys according to WebPush
     * encryption scheme. The payload has to be a valid
     * chrome/browser/sharing/proto/sharing_message.proto serialized using
     * SerializeToString.
     * </pre>
     *
     * <code>optional bytes payload = 3;</code>
     */
    public Builder setPayload(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPayload(value);
      return this;
    }
    /**
     * <pre>
     * Payload encrypted using the target user keys according to WebPush
     * encryption scheme. The payload has to be a valid
     * chrome/browser/sharing/proto/sharing_message.proto serialized using
     * SerializeToString.
     * </pre>
     *
     * <code>optional bytes payload = 3;</code>
     */
    public Builder clearPayload() {
      copyOnWrite();
      instance.clearPayload();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.SharingMessageSpecifics)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.SharingMessageSpecifics();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.SharingMessageSpecifics other = (org.chromium.components.sync.protocol.SharingMessageSpecifics) arg1;
        messageId_ = visitor.visitString(
            hasMessageId(), messageId_,
            other.hasMessageId(), other.messageId_);
        channelConfiguration_ = visitor.visitMessage(channelConfiguration_, other.channelConfiguration_);
        payload_ = visitor.visitByteString(
            hasPayload(), payload_,
            other.hasPayload(), other.payload_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                bitField0_ |= 0x00000001;
                messageId_ = s;
                break;
              }
              case 18: {
                org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = channelConfiguration_.toBuilder();
                }
                channelConfiguration_ = input.readMessage(org.chromium.components.sync.protocol.SharingMessageSpecifics.ChannelConfiguration.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(channelConfiguration_);
                  channelConfiguration_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 26: {
                bitField0_ |= 0x00000004;
                payload_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.SharingMessageSpecifics.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.SharingMessageSpecifics)
  private static final org.chromium.components.sync.protocol.SharingMessageSpecifics DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new SharingMessageSpecifics();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.SharingMessageSpecifics getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SharingMessageSpecifics> PARSER;

  public static com.google.protobuf.Parser<SharingMessageSpecifics> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

