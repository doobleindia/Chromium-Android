// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_info_specifics.proto

package org.chromium.components.sync.protocol;

public interface DeviceInfoSpecificsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sync_pb.DeviceInfoSpecifics)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * The cache_guid created to identify a sync client on this device.
   * </pre>
   *
   * <code>optional string cache_guid = 1;</code>
   */
  boolean hasCacheGuid();
  /**
   * <pre>
   * The cache_guid created to identify a sync client on this device.
   * </pre>
   *
   * <code>optional string cache_guid = 1;</code>
   */
  java.lang.String getCacheGuid();
  /**
   * <pre>
   * The cache_guid created to identify a sync client on this device.
   * </pre>
   *
   * <code>optional string cache_guid = 1;</code>
   */
  com.google.protobuf.ByteString
      getCacheGuidBytes();

  /**
   * <pre>
   * A non-unique but human readable name to describe this client.
   * </pre>
   *
   * <code>optional string client_name = 2;</code>
   */
  boolean hasClientName();
  /**
   * <pre>
   * A non-unique but human readable name to describe this client.
   * </pre>
   *
   * <code>optional string client_name = 2;</code>
   */
  java.lang.String getClientName();
  /**
   * <pre>
   * A non-unique but human readable name to describe this client.
   * </pre>
   *
   * <code>optional string client_name = 2;</code>
   */
  com.google.protobuf.ByteString
      getClientNameBytes();

  /**
   * <pre>
   * The platform of the device.
   * </pre>
   *
   * <code>optional .sync_pb.SyncEnums.DeviceType device_type = 3;</code>
   */
  boolean hasDeviceType();
  /**
   * <pre>
   * The platform of the device.
   * </pre>
   *
   * <code>optional .sync_pb.SyncEnums.DeviceType device_type = 3;</code>
   */
  org.chromium.components.sync.protocol.SyncEnums.DeviceType getDeviceType();

  /**
   * <pre>
   * The UserAgent used when contacting the Chrome Sync server.
   * </pre>
   *
   * <code>optional string sync_user_agent = 4;</code>
   */
  boolean hasSyncUserAgent();
  /**
   * <pre>
   * The UserAgent used when contacting the Chrome Sync server.
   * </pre>
   *
   * <code>optional string sync_user_agent = 4;</code>
   */
  java.lang.String getSyncUserAgent();
  /**
   * <pre>
   * The UserAgent used when contacting the Chrome Sync server.
   * </pre>
   *
   * <code>optional string sync_user_agent = 4;</code>
   */
  com.google.protobuf.ByteString
      getSyncUserAgentBytes();

  /**
   * <pre>
   * The Chrome instance's version.  Updated (if necessary) on every startup.
   * </pre>
   *
   * <code>optional string chrome_version = 5;</code>
   */
  boolean hasChromeVersion();
  /**
   * <pre>
   * The Chrome instance's version.  Updated (if necessary) on every startup.
   * </pre>
   *
   * <code>optional string chrome_version = 5;</code>
   */
  java.lang.String getChromeVersion();
  /**
   * <pre>
   * The Chrome instance's version.  Updated (if necessary) on every startup.
   * </pre>
   *
   * <code>optional string chrome_version = 5;</code>
   */
  com.google.protobuf.ByteString
      getChromeVersionBytes();

  /**
   * <pre>
   * Last time when pre-sync data on the device was saved. The device can be
   * restored to state back to this time. In millisecond since UNIX epoch.
   * DEPRECATED in M50.
   * </pre>
   *
   * <code>optional int64 deprecated_backup_timestamp = 6 [deprecated = true];</code>
   */
  @java.lang.Deprecated boolean hasDeprecatedBackupTimestamp();
  /**
   * <pre>
   * Last time when pre-sync data on the device was saved. The device can be
   * restored to state back to this time. In millisecond since UNIX epoch.
   * DEPRECATED in M50.
   * </pre>
   *
   * <code>optional int64 deprecated_backup_timestamp = 6 [deprecated = true];</code>
   */
  @java.lang.Deprecated long getDeprecatedBackupTimestamp();

  /**
   * <pre>
   * Device_id that is stable until user signs out. This device_id is used for
   * annotating login scoped refresh token.
   * </pre>
   *
   * <code>optional string signin_scoped_device_id = 7;</code>
   */
  boolean hasSigninScopedDeviceId();
  /**
   * <pre>
   * Device_id that is stable until user signs out. This device_id is used for
   * annotating login scoped refresh token.
   * </pre>
   *
   * <code>optional string signin_scoped_device_id = 7;</code>
   */
  java.lang.String getSigninScopedDeviceId();
  /**
   * <pre>
   * Device_id that is stable until user signs out. This device_id is used for
   * annotating login scoped refresh token.
   * </pre>
   *
   * <code>optional string signin_scoped_device_id = 7;</code>
   */
  com.google.protobuf.ByteString
      getSigninScopedDeviceIdBytes();

  /**
   * <pre>
   * This field is updated to be the current time periodically, and is also set
   * to the current time whenever another field changes. By examining the
   * difference between this field and the current time, it should be possible
   * to reason about the inactivity of any device that was syncing at one time.
   * </pre>
   *
   * <code>optional int64 last_updated_timestamp = 8;</code>
   */
  boolean hasLastUpdatedTimestamp();
  /**
   * <pre>
   * This field is updated to be the current time periodically, and is also set
   * to the current time whenever another field changes. By examining the
   * difference between this field and the current time, it should be possible
   * to reason about the inactivity of any device that was syncing at one time.
   * </pre>
   *
   * <code>optional int64 last_updated_timestamp = 8;</code>
   */
  long getLastUpdatedTimestamp();

  /**
   * <pre>
   * Device info fields that are specific to a feature. This is information that
   * can not be derived from the other fields in the proto and are not general
   * enough to be used by another feature.
   * </pre>
   *
   * <code>optional .sync_pb.FeatureSpecificFields feature_fields = 9;</code>
   */
  boolean hasFeatureFields();
  /**
   * <pre>
   * Device info fields that are specific to a feature. This is information that
   * can not be derived from the other fields in the proto and are not general
   * enough to be used by another feature.
   * </pre>
   *
   * <code>optional .sync_pb.FeatureSpecificFields feature_fields = 9;</code>
   */
  org.chromium.components.sync.protocol.FeatureSpecificFields getFeatureFields();

  /**
   * <pre>
   * Device specific information for Sharing feature.
   * </pre>
   *
   * <code>optional .sync_pb.SharingSpecificFields sharing_fields = 10;</code>
   */
  boolean hasSharingFields();
  /**
   * <pre>
   * Device specific information for Sharing feature.
   * </pre>
   *
   * <code>optional .sync_pb.SharingSpecificFields sharing_fields = 10;</code>
   */
  org.chromium.components.sync.protocol.SharingSpecificFields getSharingFields();

  /**
   * <pre>
   * Model of device.
   * </pre>
   *
   * <code>optional string model = 11;</code>
   */
  boolean hasModel();
  /**
   * <pre>
   * Model of device.
   * </pre>
   *
   * <code>optional string model = 11;</code>
   */
  java.lang.String getModel();
  /**
   * <pre>
   * Model of device.
   * </pre>
   *
   * <code>optional string model = 11;</code>
   */
  com.google.protobuf.ByteString
      getModelBytes();

  /**
   * <pre>
   * Name of device manufacturer.
   * </pre>
   *
   * <code>optional string manufacturer = 12;</code>
   */
  boolean hasManufacturer();
  /**
   * <pre>
   * Name of device manufacturer.
   * </pre>
   *
   * <code>optional string manufacturer = 12;</code>
   */
  java.lang.String getManufacturer();
  /**
   * <pre>
   * Name of device manufacturer.
   * </pre>
   *
   * <code>optional string manufacturer = 12;</code>
   */
  com.google.protobuf.ByteString
      getManufacturerBytes();

  /**
   * <pre>
   * The interval in minutes with which |last_updated_timestamp| is updated to
   * the sync servers if online and while sync is actively running (e.g.
   * excludes backgrounded apps on Android). Introduced in M81. The legacy
   * default was 1 day.
   * </pre>
   *
   * <code>optional int32 pulse_interval_in_minutes = 13;</code>
   */
  boolean hasPulseIntervalInMinutes();
  /**
   * <pre>
   * The interval in minutes with which |last_updated_timestamp| is updated to
   * the sync servers if online and while sync is actively running (e.g.
   * excludes backgrounded apps on Android). Introduced in M81. The legacy
   * default was 1 day.
   * </pre>
   *
   * <code>optional int32 pulse_interval_in_minutes = 13;</code>
   */
  int getPulseIntervalInMinutes();
}
