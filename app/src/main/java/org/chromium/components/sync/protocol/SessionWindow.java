// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session_specifics.proto

package org.chromium.components.sync.protocol;

/**
 * Protobuf type {@code sync_pb.SessionWindow}
 */
public  final class SessionWindow extends
    com.google.protobuf.GeneratedMessageLite<
        SessionWindow, SessionWindow.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.SessionWindow)
    SessionWindowOrBuilder {
  private SessionWindow() {
    selectedTabIndex_ = -1;
    browserType_ = 1;
    tab_ = emptyIntList();
  }
  /**
   * <pre>
   * Type of the window.
   * </pre>
   *
   * Protobuf enum {@code sync_pb.SessionWindow.BrowserType}
   */
  public enum BrowserType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * A normal tabbed window.
     * </pre>
     *
     * <code>TYPE_TABBED = 1;</code>
     */
    TYPE_TABBED(1),
    /**
     * <pre>
     * A popup window.
     * </pre>
     *
     * <code>TYPE_POPUP = 2;</code>
     */
    TYPE_POPUP(2),
    /**
     * <pre>
     * A custom tab within an app. Not restored
     * </pre>
     *
     * <code>TYPE_CUSTOM_TAB = 3;</code>
     */
    TYPE_CUSTOM_TAB(3),
    ;

    /**
     * <pre>
     * A normal tabbed window.
     * </pre>
     *
     * <code>TYPE_TABBED = 1;</code>
     */
    public static final int TYPE_TABBED_VALUE = 1;
    /**
     * <pre>
     * A popup window.
     * </pre>
     *
     * <code>TYPE_POPUP = 2;</code>
     */
    public static final int TYPE_POPUP_VALUE = 2;
    /**
     * <pre>
     * A custom tab within an app. Not restored
     * </pre>
     *
     * <code>TYPE_CUSTOM_TAB = 3;</code>
     */
    public static final int TYPE_CUSTOM_TAB_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static BrowserType valueOf(int value) {
      return forNumber(value);
    }

    public static BrowserType forNumber(int value) {
      switch (value) {
        case 1: return TYPE_TABBED;
        case 2: return TYPE_POPUP;
        case 3: return TYPE_CUSTOM_TAB;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BrowserType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        BrowserType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BrowserType>() {
            public BrowserType findValueByNumber(int number) {
              return BrowserType.forNumber(number);
            }
          };

    private final int value;

    private BrowserType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sync_pb.SessionWindow.BrowserType)
  }

  private int bitField0_;
  public static final int WINDOW_ID_FIELD_NUMBER = 1;
  private int windowId_;
  /**
   * <pre>
   * Unique (to the owner) id for this window.
   * </pre>
   *
   * <code>optional int32 window_id = 1;</code>
   */
  public boolean hasWindowId() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * Unique (to the owner) id for this window.
   * </pre>
   *
   * <code>optional int32 window_id = 1;</code>
   */
  public int getWindowId() {
    return windowId_;
  }
  /**
   * <pre>
   * Unique (to the owner) id for this window.
   * </pre>
   *
   * <code>optional int32 window_id = 1;</code>
   */
  private void setWindowId(int value) {
    bitField0_ |= 0x00000001;
    windowId_ = value;
  }
  /**
   * <pre>
   * Unique (to the owner) id for this window.
   * </pre>
   *
   * <code>optional int32 window_id = 1;</code>
   */
  private void clearWindowId() {
    bitField0_ = (bitField0_ & ~0x00000001);
    windowId_ = 0;
  }

  public static final int SELECTED_TAB_INDEX_FIELD_NUMBER = 2;
  private int selectedTabIndex_;
  /**
   * <pre>
   * Index of the selected tab in tabs; -1 if no tab is selected.
   * </pre>
   *
   * <code>optional int32 selected_tab_index = 2 [default = -1];</code>
   */
  public boolean hasSelectedTabIndex() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * Index of the selected tab in tabs; -1 if no tab is selected.
   * </pre>
   *
   * <code>optional int32 selected_tab_index = 2 [default = -1];</code>
   */
  public int getSelectedTabIndex() {
    return selectedTabIndex_;
  }
  /**
   * <pre>
   * Index of the selected tab in tabs; -1 if no tab is selected.
   * </pre>
   *
   * <code>optional int32 selected_tab_index = 2 [default = -1];</code>
   */
  private void setSelectedTabIndex(int value) {
    bitField0_ |= 0x00000002;
    selectedTabIndex_ = value;
  }
  /**
   * <pre>
   * Index of the selected tab in tabs; -1 if no tab is selected.
   * </pre>
   *
   * <code>optional int32 selected_tab_index = 2 [default = -1];</code>
   */
  private void clearSelectedTabIndex() {
    bitField0_ = (bitField0_ & ~0x00000002);
    selectedTabIndex_ = -1;
  }

  public static final int BROWSER_TYPE_FIELD_NUMBER = 3;
  private int browserType_;
  /**
   * <code>optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];</code>
   */
  public boolean hasBrowserType() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];</code>
   */
  public org.chromium.components.sync.protocol.SessionWindow.BrowserType getBrowserType() {
    org.chromium.components.sync.protocol.SessionWindow.BrowserType result = org.chromium.components.sync.protocol.SessionWindow.BrowserType.forNumber(browserType_);
    return result == null ? org.chromium.components.sync.protocol.SessionWindow.BrowserType.TYPE_TABBED : result;
  }
  /**
   * <code>optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];</code>
   */
  private void setBrowserType(org.chromium.components.sync.protocol.SessionWindow.BrowserType value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000004;
    browserType_ = value.getNumber();
  }
  /**
   * <code>optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];</code>
   */
  private void clearBrowserType() {
    bitField0_ = (bitField0_ & ~0x00000004);
    browserType_ = 1;
  }

  public static final int TAB_FIELD_NUMBER = 4;
  private com.google.protobuf.Internal.IntList tab_;
  /**
   * <pre>
   * The tabs that compose a window (correspond to tab id's).
   * </pre>
   *
   * <code>repeated int32 tab = 4;</code>
   */
  public java.util.List<java.lang.Integer>
      getTabList() {
    return tab_;
  }
  /**
   * <pre>
   * The tabs that compose a window (correspond to tab id's).
   * </pre>
   *
   * <code>repeated int32 tab = 4;</code>
   */
  public int getTabCount() {
    return tab_.size();
  }
  /**
   * <pre>
   * The tabs that compose a window (correspond to tab id's).
   * </pre>
   *
   * <code>repeated int32 tab = 4;</code>
   */
  public int getTab(int index) {
    return tab_.getInt(index);
  }
  private void ensureTabIsMutable() {
    if (!tab_.isModifiable()) {
      tab_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tab_);
     }
  }
  /**
   * <pre>
   * The tabs that compose a window (correspond to tab id's).
   * </pre>
   *
   * <code>repeated int32 tab = 4;</code>
   */
  private void setTab(
      int index, int value) {
    ensureTabIsMutable();
    tab_.setInt(index, value);
  }
  /**
   * <pre>
   * The tabs that compose a window (correspond to tab id's).
   * </pre>
   *
   * <code>repeated int32 tab = 4;</code>
   */
  private void addTab(int value) {
    ensureTabIsMutable();
    tab_.addInt(value);
  }
  /**
   * <pre>
   * The tabs that compose a window (correspond to tab id's).
   * </pre>
   *
   * <code>repeated int32 tab = 4;</code>
   */
  private void addAllTab(
      java.lang.Iterable<? extends java.lang.Integer> values) {
    ensureTabIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, tab_);
  }
  /**
   * <pre>
   * The tabs that compose a window (correspond to tab id's).
   * </pre>
   *
   * <code>repeated int32 tab = 4;</code>
   */
  private void clearTab() {
    tab_ = emptyIntList();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, windowId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt32(2, selectedTabIndex_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeEnum(3, browserType_);
    }
    for (int i = 0; i < tab_.size(); i++) {
      output.writeInt32(4, tab_.getInt(i));
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, windowId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, selectedTabIndex_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, browserType_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < tab_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(tab_.getInt(i));
      }
      size += dataSize;
      size += 1 * getTabList().size();
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.SessionWindow parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.SessionWindow parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SessionWindow parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.SessionWindow parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SessionWindow parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SessionWindow parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SessionWindow parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SessionWindow parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SessionWindow parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SessionWindow parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.SessionWindow prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code sync_pb.SessionWindow}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.SessionWindow, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.SessionWindow)
      org.chromium.components.sync.protocol.SessionWindowOrBuilder {
    // Construct using org.chromium.components.sync.protocol.SessionWindow.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Unique (to the owner) id for this window.
     * </pre>
     *
     * <code>optional int32 window_id = 1;</code>
     */
    public boolean hasWindowId() {
      return instance.hasWindowId();
    }
    /**
     * <pre>
     * Unique (to the owner) id for this window.
     * </pre>
     *
     * <code>optional int32 window_id = 1;</code>
     */
    public int getWindowId() {
      return instance.getWindowId();
    }
    /**
     * <pre>
     * Unique (to the owner) id for this window.
     * </pre>
     *
     * <code>optional int32 window_id = 1;</code>
     */
    public Builder setWindowId(int value) {
      copyOnWrite();
      instance.setWindowId(value);
      return this;
    }
    /**
     * <pre>
     * Unique (to the owner) id for this window.
     * </pre>
     *
     * <code>optional int32 window_id = 1;</code>
     */
    public Builder clearWindowId() {
      copyOnWrite();
      instance.clearWindowId();
      return this;
    }

    /**
     * <pre>
     * Index of the selected tab in tabs; -1 if no tab is selected.
     * </pre>
     *
     * <code>optional int32 selected_tab_index = 2 [default = -1];</code>
     */
    public boolean hasSelectedTabIndex() {
      return instance.hasSelectedTabIndex();
    }
    /**
     * <pre>
     * Index of the selected tab in tabs; -1 if no tab is selected.
     * </pre>
     *
     * <code>optional int32 selected_tab_index = 2 [default = -1];</code>
     */
    public int getSelectedTabIndex() {
      return instance.getSelectedTabIndex();
    }
    /**
     * <pre>
     * Index of the selected tab in tabs; -1 if no tab is selected.
     * </pre>
     *
     * <code>optional int32 selected_tab_index = 2 [default = -1];</code>
     */
    public Builder setSelectedTabIndex(int value) {
      copyOnWrite();
      instance.setSelectedTabIndex(value);
      return this;
    }
    /**
     * <pre>
     * Index of the selected tab in tabs; -1 if no tab is selected.
     * </pre>
     *
     * <code>optional int32 selected_tab_index = 2 [default = -1];</code>
     */
    public Builder clearSelectedTabIndex() {
      copyOnWrite();
      instance.clearSelectedTabIndex();
      return this;
    }

    /**
     * <code>optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];</code>
     */
    public boolean hasBrowserType() {
      return instance.hasBrowserType();
    }
    /**
     * <code>optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];</code>
     */
    public org.chromium.components.sync.protocol.SessionWindow.BrowserType getBrowserType() {
      return instance.getBrowserType();
    }
    /**
     * <code>optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];</code>
     */
    public Builder setBrowserType(org.chromium.components.sync.protocol.SessionWindow.BrowserType value) {
      copyOnWrite();
      instance.setBrowserType(value);
      return this;
    }
    /**
     * <code>optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];</code>
     */
    public Builder clearBrowserType() {
      copyOnWrite();
      instance.clearBrowserType();
      return this;
    }

    /**
     * <pre>
     * The tabs that compose a window (correspond to tab id's).
     * </pre>
     *
     * <code>repeated int32 tab = 4;</code>
     */
    public java.util.List<java.lang.Integer>
        getTabList() {
      return java.util.Collections.unmodifiableList(
          instance.getTabList());
    }
    /**
     * <pre>
     * The tabs that compose a window (correspond to tab id's).
     * </pre>
     *
     * <code>repeated int32 tab = 4;</code>
     */
    public int getTabCount() {
      return instance.getTabCount();
    }
    /**
     * <pre>
     * The tabs that compose a window (correspond to tab id's).
     * </pre>
     *
     * <code>repeated int32 tab = 4;</code>
     */
    public int getTab(int index) {
      return instance.getTab(index);
    }
    /**
     * <pre>
     * The tabs that compose a window (correspond to tab id's).
     * </pre>
     *
     * <code>repeated int32 tab = 4;</code>
     */
    public Builder setTab(
        int index, int value) {
      copyOnWrite();
      instance.setTab(index, value);
      return this;
    }
    /**
     * <pre>
     * The tabs that compose a window (correspond to tab id's).
     * </pre>
     *
     * <code>repeated int32 tab = 4;</code>
     */
    public Builder addTab(int value) {
      copyOnWrite();
      instance.addTab(value);
      return this;
    }
    /**
     * <pre>
     * The tabs that compose a window (correspond to tab id's).
     * </pre>
     *
     * <code>repeated int32 tab = 4;</code>
     */
    public Builder addAllTab(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllTab(values);
      return this;
    }
    /**
     * <pre>
     * The tabs that compose a window (correspond to tab id's).
     * </pre>
     *
     * <code>repeated int32 tab = 4;</code>
     */
    public Builder clearTab() {
      copyOnWrite();
      instance.clearTab();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.SessionWindow)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.SessionWindow();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        tab_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.SessionWindow other = (org.chromium.components.sync.protocol.SessionWindow) arg1;
        windowId_ = visitor.visitInt(
            hasWindowId(), windowId_,
            other.hasWindowId(), other.windowId_);
        selectedTabIndex_ = visitor.visitInt(
            hasSelectedTabIndex(), selectedTabIndex_,
            other.hasSelectedTabIndex(), other.selectedTabIndex_);
        browserType_ = visitor.visitInt(hasBrowserType(), browserType_,
            other.hasBrowserType(), other.browserType_);
        tab_= visitor.visitIntList(tab_, other.tab_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                windowId_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                selectedTabIndex_ = input.readInt32();
                break;
              }
              case 24: {
                int rawValue = input.readEnum();
                org.chromium.components.sync.protocol.SessionWindow.BrowserType value = org.chromium.components.sync.protocol.SessionWindow.BrowserType.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(3, rawValue);
                } else {
                  bitField0_ |= 0x00000004;
                  browserType_ = rawValue;
                }
                break;
              }
              case 32: {
                if (!tab_.isModifiable()) {
                  tab_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(tab_);
                }
                tab_.addInt(input.readInt32());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!tab_.isModifiable() && input.getBytesUntilLimit() > 0) {
                  tab_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(tab_);
                }
                while (input.getBytesUntilLimit() > 0) {
                  tab_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.SessionWindow.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.SessionWindow)
  private static final org.chromium.components.sync.protocol.SessionWindow DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new SessionWindow();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.SessionWindow getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SessionWindow> PARSER;

  public static com.google.protobuf.Parser<SessionWindow> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

