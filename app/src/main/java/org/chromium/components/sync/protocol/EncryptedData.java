// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: encryption.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * Encrypted sync data consists of two parts: a key name and a blob. Key name is
 * the name of the key that was used to encrypt blob and blob is encrypted data
 * itself.
 * The reason we need to keep track of the key name is that a sync user can
 * change their passphrase (and thus their encryption key) at any time. When
 * that happens, we make a best effort to reencrypt all nodes with the new
 * passphrase, but since we don't have transactions on the server-side, we
 * cannot guarantee that every node will be reencrypted. As a workaround, we
 * keep track of all keys, assign each key a name (by using that key to encrypt
 * a well known string) and keep track of which key was used to encrypt each
 * node.
 * </pre>
 *
 * Protobuf type {@code sync_pb.EncryptedData}
 */
public  final class EncryptedData extends
    com.google.protobuf.GeneratedMessageLite<
        EncryptedData, EncryptedData.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.EncryptedData)
    EncryptedDataOrBuilder {
  private EncryptedData() {
    keyName_ = "";
    blob_ = "";
  }
  private int bitField0_;
  public static final int KEY_NAME_FIELD_NUMBER = 1;
  private java.lang.String keyName_;
  /**
   * <code>optional string key_name = 1;</code>
   */
  public boolean hasKeyName() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional string key_name = 1;</code>
   */
  public java.lang.String getKeyName() {
    return keyName_;
  }
  /**
   * <code>optional string key_name = 1;</code>
   */
  public com.google.protobuf.ByteString
      getKeyNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(keyName_);
  }
  /**
   * <code>optional string key_name = 1;</code>
   */
  private void setKeyName(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    keyName_ = value;
  }
  /**
   * <code>optional string key_name = 1;</code>
   */
  private void clearKeyName() {
    bitField0_ = (bitField0_ & ~0x00000001);
    keyName_ = getDefaultInstance().getKeyName();
  }
  /**
   * <code>optional string key_name = 1;</code>
   */
  private void setKeyNameBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    keyName_ = value.toStringUtf8();
  }

  public static final int BLOB_FIELD_NUMBER = 2;
  private java.lang.String blob_;
  /**
   * <code>optional string blob = 2;</code>
   */
  public boolean hasBlob() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional string blob = 2;</code>
   */
  public java.lang.String getBlob() {
    return blob_;
  }
  /**
   * <code>optional string blob = 2;</code>
   */
  public com.google.protobuf.ByteString
      getBlobBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(blob_);
  }
  /**
   * <code>optional string blob = 2;</code>
   */
  private void setBlob(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    blob_ = value;
  }
  /**
   * <code>optional string blob = 2;</code>
   */
  private void clearBlob() {
    bitField0_ = (bitField0_ & ~0x00000002);
    blob_ = getDefaultInstance().getBlob();
  }
  /**
   * <code>optional string blob = 2;</code>
   */
  private void setBlobBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    blob_ = value.toStringUtf8();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeString(1, getKeyName());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeString(2, getBlob());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getKeyName());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getBlob());
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.EncryptedData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.EncryptedData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.EncryptedData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.EncryptedData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.EncryptedData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.EncryptedData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.EncryptedData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.EncryptedData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.EncryptedData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.EncryptedData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.EncryptedData prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Encrypted sync data consists of two parts: a key name and a blob. Key name is
   * the name of the key that was used to encrypt blob and blob is encrypted data
   * itself.
   * The reason we need to keep track of the key name is that a sync user can
   * change their passphrase (and thus their encryption key) at any time. When
   * that happens, we make a best effort to reencrypt all nodes with the new
   * passphrase, but since we don't have transactions on the server-side, we
   * cannot guarantee that every node will be reencrypted. As a workaround, we
   * keep track of all keys, assign each key a name (by using that key to encrypt
   * a well known string) and keep track of which key was used to encrypt each
   * node.
   * </pre>
   *
   * Protobuf type {@code sync_pb.EncryptedData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.EncryptedData, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.EncryptedData)
      org.chromium.components.sync.protocol.EncryptedDataOrBuilder {
    // Construct using org.chromium.components.sync.protocol.EncryptedData.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>optional string key_name = 1;</code>
     */
    public boolean hasKeyName() {
      return instance.hasKeyName();
    }
    /**
     * <code>optional string key_name = 1;</code>
     */
    public java.lang.String getKeyName() {
      return instance.getKeyName();
    }
    /**
     * <code>optional string key_name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getKeyNameBytes() {
      return instance.getKeyNameBytes();
    }
    /**
     * <code>optional string key_name = 1;</code>
     */
    public Builder setKeyName(
        java.lang.String value) {
      copyOnWrite();
      instance.setKeyName(value);
      return this;
    }
    /**
     * <code>optional string key_name = 1;</code>
     */
    public Builder clearKeyName() {
      copyOnWrite();
      instance.clearKeyName();
      return this;
    }
    /**
     * <code>optional string key_name = 1;</code>
     */
    public Builder setKeyNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setKeyNameBytes(value);
      return this;
    }

    /**
     * <code>optional string blob = 2;</code>
     */
    public boolean hasBlob() {
      return instance.hasBlob();
    }
    /**
     * <code>optional string blob = 2;</code>
     */
    public java.lang.String getBlob() {
      return instance.getBlob();
    }
    /**
     * <code>optional string blob = 2;</code>
     */
    public com.google.protobuf.ByteString
        getBlobBytes() {
      return instance.getBlobBytes();
    }
    /**
     * <code>optional string blob = 2;</code>
     */
    public Builder setBlob(
        java.lang.String value) {
      copyOnWrite();
      instance.setBlob(value);
      return this;
    }
    /**
     * <code>optional string blob = 2;</code>
     */
    public Builder clearBlob() {
      copyOnWrite();
      instance.clearBlob();
      return this;
    }
    /**
     * <code>optional string blob = 2;</code>
     */
    public Builder setBlobBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setBlobBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.EncryptedData)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.EncryptedData();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.EncryptedData other = (org.chromium.components.sync.protocol.EncryptedData) arg1;
        keyName_ = visitor.visitString(
            hasKeyName(), keyName_,
            other.hasKeyName(), other.keyName_);
        blob_ = visitor.visitString(
            hasBlob(), blob_,
            other.hasBlob(), other.blob_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                bitField0_ |= 0x00000001;
                keyName_ = s;
                break;
              }
              case 18: {
                String s = input.readString();
                bitField0_ |= 0x00000002;
                blob_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.EncryptedData.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.EncryptedData)
  private static final org.chromium.components.sync.protocol.EncryptedData DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new EncryptedData();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.EncryptedData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<EncryptedData> PARSER;

  public static com.google.protobuf.Parser<EncryptedData> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

