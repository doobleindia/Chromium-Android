// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync.proto

package org.chromium.components.sync.protocol;

public interface ClientToServerMessageOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sync_pb.ClientToServerMessage)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * |share| field is only used on the server for logging and can sometimes
   * contain empty string. It is still useful for logging username when it can't
   * be derived from access token in case of auth error.
   * </pre>
   *
   * <code>required string share = 1;</code>
   */
  boolean hasShare();
  /**
   * <pre>
   * |share| field is only used on the server for logging and can sometimes
   * contain empty string. It is still useful for logging username when it can't
   * be derived from access token in case of auth error.
   * </pre>
   *
   * <code>required string share = 1;</code>
   */
  java.lang.String getShare();
  /**
   * <pre>
   * |share| field is only used on the server for logging and can sometimes
   * contain empty string. It is still useful for logging username when it can't
   * be derived from access token in case of auth error.
   * </pre>
   *
   * <code>required string share = 1;</code>
   */
  com.google.protobuf.ByteString
      getShareBytes();

  /**
   * <code>optional int32 protocol_version = 2 [default = 52];</code>
   */
  boolean hasProtocolVersion();
  /**
   * <code>optional int32 protocol_version = 2 [default = 52];</code>
   */
  int getProtocolVersion();

  /**
   * <pre>
   * Each ClientToServerMessage contains one request defined by the
   * message_contents. Each type has a corresponding message field that will be
   * present iff the message is of that type. E.g. a commit message will have a
   * message_contents of COMMIT and its commit field will be present.
   * </pre>
   *
   * <code>required .sync_pb.ClientToServerMessage.Contents message_contents = 3;</code>
   */
  boolean hasMessageContents();
  /**
   * <pre>
   * Each ClientToServerMessage contains one request defined by the
   * message_contents. Each type has a corresponding message field that will be
   * present iff the message is of that type. E.g. a commit message will have a
   * message_contents of COMMIT and its commit field will be present.
   * </pre>
   *
   * <code>required .sync_pb.ClientToServerMessage.Contents message_contents = 3;</code>
   */
  org.chromium.components.sync.protocol.ClientToServerMessage.Contents getMessageContents();

  /**
   * <code>optional .sync_pb.CommitMessage commit = 4;</code>
   */
  boolean hasCommit();
  /**
   * <code>optional .sync_pb.CommitMessage commit = 4;</code>
   */
  org.chromium.components.sync.protocol.CommitMessage getCommit();

  /**
   * <code>optional .sync_pb.GetUpdatesMessage get_updates = 5;</code>
   */
  boolean hasGetUpdates();
  /**
   * <code>optional .sync_pb.GetUpdatesMessage get_updates = 5;</code>
   */
  org.chromium.components.sync.protocol.GetUpdatesMessage getGetUpdates();

  /**
   * <pre>
   * Opaque store ID; if it changes, duck!
   * </pre>
   *
   * <code>optional string store_birthday = 7;</code>
   */
  boolean hasStoreBirthday();
  /**
   * <pre>
   * Opaque store ID; if it changes, duck!
   * </pre>
   *
   * <code>optional string store_birthday = 7;</code>
   */
  java.lang.String getStoreBirthday();
  /**
   * <pre>
   * Opaque store ID; if it changes, duck!
   * </pre>
   *
   * <code>optional string store_birthday = 7;</code>
   */
  com.google.protobuf.ByteString
      getStoreBirthdayBytes();

  /**
   * <pre>
   * The client sets this if it detects a sync issue. The server will tell it
   * if it should perform a refresh.
   * </pre>
   *
   * <code>optional bool sync_problem_detected = 8 [default = false];</code>
   */
  boolean hasSyncProblemDetected();
  /**
   * <pre>
   * The client sets this if it detects a sync issue. The server will tell it
   * if it should perform a refresh.
   * </pre>
   *
   * <code>optional bool sync_problem_detected = 8 [default = false];</code>
   */
  boolean getSyncProblemDetected();

  /**
   * <pre>
   * Client side state information for debugging purpose.
   * This is only sent on the first getupdates of every sync cycle,
   * as an optimization to save bandwidth.
   * </pre>
   *
   * <code>optional .sync_pb.DebugInfo debug_info = 10;</code>
   */
  boolean hasDebugInfo();
  /**
   * <pre>
   * Client side state information for debugging purpose.
   * This is only sent on the first getupdates of every sync cycle,
   * as an optimization to save bandwidth.
   * </pre>
   *
   * <code>optional .sync_pb.DebugInfo debug_info = 10;</code>
   */
  org.chromium.components.sync.protocol.DebugInfo getDebugInfo();

  /**
   * <pre>
   * Per-client state for use by the server. Sent with every message sent to the
   * server.
   * </pre>
   *
   * <code>optional .sync_pb.ChipBag bag_of_chips = 11;</code>
   */
  boolean hasBagOfChips();
  /**
   * <pre>
   * Per-client state for use by the server. Sent with every message sent to the
   * server.
   * </pre>
   *
   * <code>optional .sync_pb.ChipBag bag_of_chips = 11;</code>
   */
  org.chromium.components.sync.protocol.ChipBag getBagOfChips();

  /**
   * <pre>
   * Google API key.
   * </pre>
   *
   * <code>optional string api_key = 12;</code>
   */
  boolean hasApiKey();
  /**
   * <pre>
   * Google API key.
   * </pre>
   *
   * <code>optional string api_key = 12;</code>
   */
  java.lang.String getApiKey();
  /**
   * <pre>
   * Google API key.
   * </pre>
   *
   * <code>optional string api_key = 12;</code>
   */
  com.google.protobuf.ByteString
      getApiKeyBytes();

  /**
   * <pre>
   * Client's self-reported state.
   * The client should set this on every message sent to the server, though its
   * member fields may often be unset.
   * </pre>
   *
   * <code>optional .sync_pb.ClientStatus client_status = 13;</code>
   */
  boolean hasClientStatus();
  /**
   * <pre>
   * Client's self-reported state.
   * The client should set this on every message sent to the server, though its
   * member fields may often be unset.
   * </pre>
   *
   * <code>optional .sync_pb.ClientStatus client_status = 13;</code>
   */
  org.chromium.components.sync.protocol.ClientStatus getClientStatus();

  /**
   * <pre>
   * The ID that our invalidation client used to identify itself to the server.
   * Sending the ID here allows the server to not send notifications of our own
   * changes to our invalidator.
   * </pre>
   *
   * <code>optional string invalidator_client_id = 14;</code>
   */
  boolean hasInvalidatorClientId();
  /**
   * <pre>
   * The ID that our invalidation client used to identify itself to the server.
   * Sending the ID here allows the server to not send notifications of our own
   * changes to our invalidator.
   * </pre>
   *
   * <code>optional string invalidator_client_id = 14;</code>
   */
  java.lang.String getInvalidatorClientId();
  /**
   * <pre>
   * The ID that our invalidation client used to identify itself to the server.
   * Sending the ID here allows the server to not send notifications of our own
   * changes to our invalidator.
   * </pre>
   *
   * <code>optional string invalidator_client_id = 14;</code>
   */
  com.google.protobuf.ByteString
      getInvalidatorClientIdBytes();

  /**
   * <pre>
   * Identifies this ClientToServerMessage as a clear server data request. This
   * field is present when message_contents is CLEAR_SERVER_DATA.
   * </pre>
   *
   * <code>optional .sync_pb.ClearServerDataMessage clear_server_data = 15;</code>
   */
  boolean hasClearServerData();
  /**
   * <pre>
   * Identifies this ClientToServerMessage as a clear server data request. This
   * field is present when message_contents is CLEAR_SERVER_DATA.
   * </pre>
   *
   * <code>optional .sync_pb.ClearServerDataMessage clear_server_data = 15;</code>
   */
  org.chromium.components.sync.protocol.ClearServerDataMessage getClearServerData();
}
