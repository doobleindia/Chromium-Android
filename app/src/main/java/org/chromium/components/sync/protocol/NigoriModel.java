// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nigori_local_data.proto

package org.chromium.components.sync.protocol;

/**
 * Protobuf type {@code sync_pb.NigoriModel}
 */
public  final class NigoriModel extends
    com.google.protobuf.GeneratedMessageLite<
        NigoriModel, NigoriModel.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.NigoriModel)
    NigoriModelOrBuilder {
  private NigoriModel() {
    currentKeystoreKeyName_ = "";
    encryptedTypesSpecificsFieldNumber_ = emptyIntList();
    keystoreKey_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
  }
  private int bitField0_;
  public static final int CRYPTOGRAPHER_DATA_FIELD_NUMBER = 1;
  private org.chromium.components.sync.protocol.CryptographerData cryptographerData_;
  /**
   * <pre>
   * Represents state of the cryptographer.
   * </pre>
   *
   * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
   */
  public boolean hasCryptographerData() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * Represents state of the cryptographer.
   * </pre>
   *
   * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
   */
  public org.chromium.components.sync.protocol.CryptographerData getCryptographerData() {
    return cryptographerData_ == null ? org.chromium.components.sync.protocol.CryptographerData.getDefaultInstance() : cryptographerData_;
  }
  /**
   * <pre>
   * Represents state of the cryptographer.
   * </pre>
   *
   * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
   */
  private void setCryptographerData(org.chromium.components.sync.protocol.CryptographerData value) {
    if (value == null) {
      throw new NullPointerException();
    }
    cryptographerData_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * Represents state of the cryptographer.
   * </pre>
   *
   * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
   */
  private void setCryptographerData(
      org.chromium.components.sync.protocol.CryptographerData.Builder builderForValue) {
    cryptographerData_ = builderForValue.build();
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * Represents state of the cryptographer.
   * </pre>
   *
   * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
   */
  private void mergeCryptographerData(org.chromium.components.sync.protocol.CryptographerData value) {
    if (cryptographerData_ != null &&
        cryptographerData_ != org.chromium.components.sync.protocol.CryptographerData.getDefaultInstance()) {
      cryptographerData_ =
        org.chromium.components.sync.protocol.CryptographerData.newBuilder(cryptographerData_).mergeFrom(value).buildPartial();
    } else {
      cryptographerData_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * Represents state of the cryptographer.
   * </pre>
   *
   * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
   */
  private void clearCryptographerData() {  cryptographerData_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int CURRENT_KEYSTORE_KEY_NAME_FIELD_NUMBER = 2;
  private java.lang.String currentKeystoreKeyName_;
  /**
   * <pre>
   * Contains the name of the key, used for encryption of
   * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
   * latest keystore key. Equals to cryptographer_data.default_key_name iff it
   * is Nigori in full keystore mode (not in backward compatible keystore
   * mode).
   * </pre>
   *
   * <code>optional string current_keystore_key_name = 2;</code>
   */
  public boolean hasCurrentKeystoreKeyName() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * Contains the name of the key, used for encryption of
   * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
   * latest keystore key. Equals to cryptographer_data.default_key_name iff it
   * is Nigori in full keystore mode (not in backward compatible keystore
   * mode).
   * </pre>
   *
   * <code>optional string current_keystore_key_name = 2;</code>
   */
  public java.lang.String getCurrentKeystoreKeyName() {
    return currentKeystoreKeyName_;
  }
  /**
   * <pre>
   * Contains the name of the key, used for encryption of
   * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
   * latest keystore key. Equals to cryptographer_data.default_key_name iff it
   * is Nigori in full keystore mode (not in backward compatible keystore
   * mode).
   * </pre>
   *
   * <code>optional string current_keystore_key_name = 2;</code>
   */
  public com.google.protobuf.ByteString
      getCurrentKeystoreKeyNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(currentKeystoreKeyName_);
  }
  /**
   * <pre>
   * Contains the name of the key, used for encryption of
   * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
   * latest keystore key. Equals to cryptographer_data.default_key_name iff it
   * is Nigori in full keystore mode (not in backward compatible keystore
   * mode).
   * </pre>
   *
   * <code>optional string current_keystore_key_name = 2;</code>
   */
  private void setCurrentKeystoreKeyName(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    currentKeystoreKeyName_ = value;
  }
  /**
   * <pre>
   * Contains the name of the key, used for encryption of
   * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
   * latest keystore key. Equals to cryptographer_data.default_key_name iff it
   * is Nigori in full keystore mode (not in backward compatible keystore
   * mode).
   * </pre>
   *
   * <code>optional string current_keystore_key_name = 2;</code>
   */
  private void clearCurrentKeystoreKeyName() {
    bitField0_ = (bitField0_ & ~0x00000002);
    currentKeystoreKeyName_ = getDefaultInstance().getCurrentKeystoreKeyName();
  }
  /**
   * <pre>
   * Contains the name of the key, used for encryption of
   * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
   * latest keystore key. Equals to cryptographer_data.default_key_name iff it
   * is Nigori in full keystore mode (not in backward compatible keystore
   * mode).
   * </pre>
   *
   * <code>optional string current_keystore_key_name = 2;</code>
   */
  private void setCurrentKeystoreKeyNameBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    currentKeystoreKeyName_ = value.toStringUtf8();
  }

  public static final int PENDING_KEYS_FIELD_NUMBER = 3;
  private org.chromium.components.sync.protocol.EncryptedData pendingKeys_;
  /**
   * <pre>
   * Contains keybag in encrypted form, should be empty once we were able to
   * decrypt keybag from specifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
   */
  public boolean hasPendingKeys() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * Contains keybag in encrypted form, should be empty once we were able to
   * decrypt keybag from specifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
   */
  public org.chromium.components.sync.protocol.EncryptedData getPendingKeys() {
    return pendingKeys_ == null ? org.chromium.components.sync.protocol.EncryptedData.getDefaultInstance() : pendingKeys_;
  }
  /**
   * <pre>
   * Contains keybag in encrypted form, should be empty once we were able to
   * decrypt keybag from specifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
   */
  private void setPendingKeys(org.chromium.components.sync.protocol.EncryptedData value) {
    if (value == null) {
      throw new NullPointerException();
    }
    pendingKeys_ = value;
    bitField0_ |= 0x00000004;
    }
  /**
   * <pre>
   * Contains keybag in encrypted form, should be empty once we were able to
   * decrypt keybag from specifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
   */
  private void setPendingKeys(
      org.chromium.components.sync.protocol.EncryptedData.Builder builderForValue) {
    pendingKeys_ = builderForValue.build();
    bitField0_ |= 0x00000004;
  }
  /**
   * <pre>
   * Contains keybag in encrypted form, should be empty once we were able to
   * decrypt keybag from specifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
   */
  private void mergePendingKeys(org.chromium.components.sync.protocol.EncryptedData value) {
    if (pendingKeys_ != null &&
        pendingKeys_ != org.chromium.components.sync.protocol.EncryptedData.getDefaultInstance()) {
      pendingKeys_ =
        org.chromium.components.sync.protocol.EncryptedData.newBuilder(pendingKeys_).mergeFrom(value).buildPartial();
    } else {
      pendingKeys_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   * <pre>
   * Contains keybag in encrypted form, should be empty once we were able to
   * decrypt keybag from specifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
   */
  private void clearPendingKeys() {  pendingKeys_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static final int PASSPHRASE_TYPE_FIELD_NUMBER = 4;
  private int passphraseType_;
  /**
   * <pre>
   * PassphraseType used for encryption. IMPLICIT_PASSPRHASE shouldn't be used
   * here.
   * </pre>
   *
   * <code>optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];</code>
   */
  public boolean hasPassphraseType() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * PassphraseType used for encryption. IMPLICIT_PASSPRHASE shouldn't be used
   * here.
   * </pre>
   *
   * <code>optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];</code>
   */
  public org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType getPassphraseType() {
    org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType result = org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType.forNumber(passphraseType_);
    return result == null ? org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType.UNKNOWN : result;
  }
  /**
   * <pre>
   * PassphraseType used for encryption. IMPLICIT_PASSPRHASE shouldn't be used
   * here.
   * </pre>
   *
   * <code>optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];</code>
   */
  private void setPassphraseType(org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000008;
    passphraseType_ = value.getNumber();
  }
  /**
   * <pre>
   * PassphraseType used for encryption. IMPLICIT_PASSPRHASE shouldn't be used
   * here.
   * </pre>
   *
   * <code>optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];</code>
   */
  private void clearPassphraseType() {
    bitField0_ = (bitField0_ & ~0x00000008);
    passphraseType_ = 0;
  }

  public static final int KEYSTORE_MIGRATION_TIME_FIELD_NUMBER = 5;
  private long keystoreMigrationTime_;
  /**
   * <pre>
   * The time (in UNIX epoch milliseconds) at which the keystore migration was
   * performed.
   * </pre>
   *
   * <code>optional int64 keystore_migration_time = 5;</code>
   */
  public boolean hasKeystoreMigrationTime() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <pre>
   * The time (in UNIX epoch milliseconds) at which the keystore migration was
   * performed.
   * </pre>
   *
   * <code>optional int64 keystore_migration_time = 5;</code>
   */
  public long getKeystoreMigrationTime() {
    return keystoreMigrationTime_;
  }
  /**
   * <pre>
   * The time (in UNIX epoch milliseconds) at which the keystore migration was
   * performed.
   * </pre>
   *
   * <code>optional int64 keystore_migration_time = 5;</code>
   */
  private void setKeystoreMigrationTime(long value) {
    bitField0_ |= 0x00000010;
    keystoreMigrationTime_ = value;
  }
  /**
   * <pre>
   * The time (in UNIX epoch milliseconds) at which the keystore migration was
   * performed.
   * </pre>
   *
   * <code>optional int64 keystore_migration_time = 5;</code>
   */
  private void clearKeystoreMigrationTime() {
    bitField0_ = (bitField0_ & ~0x00000010);
    keystoreMigrationTime_ = 0L;
  }

  public static final int CUSTOM_PASSPHRASE_TIME_FIELD_NUMBER = 6;
  private long customPassphraseTime_;
  /**
   * <pre>
   * The time (in UNIX epoch milliseconds) at which a custom passphrase was
   * set.
   * Note: this field may not be set if the custom passphrase was applied before
   * corresponding field in NigoriSpecifics was introduced.
   * </pre>
   *
   * <code>optional int64 custom_passphrase_time = 6;</code>
   */
  public boolean hasCustomPassphraseTime() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * The time (in UNIX epoch milliseconds) at which a custom passphrase was
   * set.
   * Note: this field may not be set if the custom passphrase was applied before
   * corresponding field in NigoriSpecifics was introduced.
   * </pre>
   *
   * <code>optional int64 custom_passphrase_time = 6;</code>
   */
  public long getCustomPassphraseTime() {
    return customPassphraseTime_;
  }
  /**
   * <pre>
   * The time (in UNIX epoch milliseconds) at which a custom passphrase was
   * set.
   * Note: this field may not be set if the custom passphrase was applied before
   * corresponding field in NigoriSpecifics was introduced.
   * </pre>
   *
   * <code>optional int64 custom_passphrase_time = 6;</code>
   */
  private void setCustomPassphraseTime(long value) {
    bitField0_ |= 0x00000020;
    customPassphraseTime_ = value;
  }
  /**
   * <pre>
   * The time (in UNIX epoch milliseconds) at which a custom passphrase was
   * set.
   * Note: this field may not be set if the custom passphrase was applied before
   * corresponding field in NigoriSpecifics was introduced.
   * </pre>
   *
   * <code>optional int64 custom_passphrase_time = 6;</code>
   */
  private void clearCustomPassphraseTime() {
    bitField0_ = (bitField0_ & ~0x00000020);
    customPassphraseTime_ = 0L;
  }

  public static final int CUSTOM_PASSPHRASE_KEY_DERIVATION_PARAMS_FIELD_NUMBER = 7;
  private org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams customPassphraseKeyDerivationParams_;
  /**
   * <pre>
   * Params used for deriving keys from custom passphrase. Should be set iff
   * |passphrase_type| is CUSTOM_PASSPHRASE.
   * </pre>
   *
   * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
   */
  public boolean hasCustomPassphraseKeyDerivationParams() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <pre>
   * Params used for deriving keys from custom passphrase. Should be set iff
   * |passphrase_type| is CUSTOM_PASSPHRASE.
   * </pre>
   *
   * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
   */
  public org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams getCustomPassphraseKeyDerivationParams() {
    return customPassphraseKeyDerivationParams_ == null ? org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams.getDefaultInstance() : customPassphraseKeyDerivationParams_;
  }
  /**
   * <pre>
   * Params used for deriving keys from custom passphrase. Should be set iff
   * |passphrase_type| is CUSTOM_PASSPHRASE.
   * </pre>
   *
   * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
   */
  private void setCustomPassphraseKeyDerivationParams(org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams value) {
    if (value == null) {
      throw new NullPointerException();
    }
    customPassphraseKeyDerivationParams_ = value;
    bitField0_ |= 0x00000040;
    }
  /**
   * <pre>
   * Params used for deriving keys from custom passphrase. Should be set iff
   * |passphrase_type| is CUSTOM_PASSPHRASE.
   * </pre>
   *
   * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
   */
  private void setCustomPassphraseKeyDerivationParams(
      org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams.Builder builderForValue) {
    customPassphraseKeyDerivationParams_ = builderForValue.build();
    bitField0_ |= 0x00000040;
  }
  /**
   * <pre>
   * Params used for deriving keys from custom passphrase. Should be set iff
   * |passphrase_type| is CUSTOM_PASSPHRASE.
   * </pre>
   *
   * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
   */
  private void mergeCustomPassphraseKeyDerivationParams(org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams value) {
    if (customPassphraseKeyDerivationParams_ != null &&
        customPassphraseKeyDerivationParams_ != org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams.getDefaultInstance()) {
      customPassphraseKeyDerivationParams_ =
        org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams.newBuilder(customPassphraseKeyDerivationParams_).mergeFrom(value).buildPartial();
    } else {
      customPassphraseKeyDerivationParams_ = value;
    }
    bitField0_ |= 0x00000040;
  }
  /**
   * <pre>
   * Params used for deriving keys from custom passphrase. Should be set iff
   * |passphrase_type| is CUSTOM_PASSPHRASE.
   * </pre>
   *
   * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
   */
  private void clearCustomPassphraseKeyDerivationParams() {  customPassphraseKeyDerivationParams_ = null;
    bitField0_ = (bitField0_ & ~0x00000040);
  }

  public static final int ENCRYPT_EVERYTHING_FIELD_NUMBER = 8;
  private boolean encryptEverything_;
  /**
   * <pre>
   * Indicates whether we need to encrypt all encryptable user types.
   * </pre>
   *
   * <code>optional bool encrypt_everything = 8;</code>
   */
  public boolean hasEncryptEverything() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <pre>
   * Indicates whether we need to encrypt all encryptable user types.
   * </pre>
   *
   * <code>optional bool encrypt_everything = 8;</code>
   */
  public boolean getEncryptEverything() {
    return encryptEverything_;
  }
  /**
   * <pre>
   * Indicates whether we need to encrypt all encryptable user types.
   * </pre>
   *
   * <code>optional bool encrypt_everything = 8;</code>
   */
  private void setEncryptEverything(boolean value) {
    bitField0_ |= 0x00000080;
    encryptEverything_ = value;
  }
  /**
   * <pre>
   * Indicates whether we need to encrypt all encryptable user types.
   * </pre>
   *
   * <code>optional bool encrypt_everything = 8;</code>
   */
  private void clearEncryptEverything() {
    bitField0_ = (bitField0_ & ~0x00000080);
    encryptEverything_ = false;
  }

  public static final int ENCRYPTED_TYPES_SPECIFICS_FIELD_NUMBER_FIELD_NUMBER = 9;
  private com.google.protobuf.Internal.IntList encryptedTypesSpecificsFieldNumber_;
  /**
   * <pre>
   * The list of encrypted UserEncryptableTypes, represented by their specifics
   * field number.
   * </pre>
   *
   * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
   */
  public java.util.List<java.lang.Integer>
      getEncryptedTypesSpecificsFieldNumberList() {
    return encryptedTypesSpecificsFieldNumber_;
  }
  /**
   * <pre>
   * The list of encrypted UserEncryptableTypes, represented by their specifics
   * field number.
   * </pre>
   *
   * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
   */
  public int getEncryptedTypesSpecificsFieldNumberCount() {
    return encryptedTypesSpecificsFieldNumber_.size();
  }
  /**
   * <pre>
   * The list of encrypted UserEncryptableTypes, represented by their specifics
   * field number.
   * </pre>
   *
   * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
   */
  public int getEncryptedTypesSpecificsFieldNumber(int index) {
    return encryptedTypesSpecificsFieldNumber_.getInt(index);
  }
  private void ensureEncryptedTypesSpecificsFieldNumberIsMutable() {
    if (!encryptedTypesSpecificsFieldNumber_.isModifiable()) {
      encryptedTypesSpecificsFieldNumber_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(encryptedTypesSpecificsFieldNumber_);
     }
  }
  /**
   * <pre>
   * The list of encrypted UserEncryptableTypes, represented by their specifics
   * field number.
   * </pre>
   *
   * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
   */
  private void setEncryptedTypesSpecificsFieldNumber(
      int index, int value) {
    ensureEncryptedTypesSpecificsFieldNumberIsMutable();
    encryptedTypesSpecificsFieldNumber_.setInt(index, value);
  }
  /**
   * <pre>
   * The list of encrypted UserEncryptableTypes, represented by their specifics
   * field number.
   * </pre>
   *
   * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
   */
  private void addEncryptedTypesSpecificsFieldNumber(int value) {
    ensureEncryptedTypesSpecificsFieldNumberIsMutable();
    encryptedTypesSpecificsFieldNumber_.addInt(value);
  }
  /**
   * <pre>
   * The list of encrypted UserEncryptableTypes, represented by their specifics
   * field number.
   * </pre>
   *
   * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
   */
  private void addAllEncryptedTypesSpecificsFieldNumber(
      java.lang.Iterable<? extends java.lang.Integer> values) {
    ensureEncryptedTypesSpecificsFieldNumberIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, encryptedTypesSpecificsFieldNumber_);
  }
  /**
   * <pre>
   * The list of encrypted UserEncryptableTypes, represented by their specifics
   * field number.
   * </pre>
   *
   * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
   */
  private void clearEncryptedTypesSpecificsFieldNumber() {
    encryptedTypesSpecificsFieldNumber_ = emptyIntList();
  }

  public static final int KEYSTORE_KEY_FIELD_NUMBER = 10;
  private com.google.protobuf.Internal.ProtobufList<String> keystoreKey_;
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   */
  public java.util.List<String> getKeystoreKeyList() {
    return keystoreKey_;
  }
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   */
  public int getKeystoreKeyCount() {
    return keystoreKey_.size();
  }
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   */
  public java.lang.String getKeystoreKey(int index) {
    return keystoreKey_.get(index);
  }
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   */
  public com.google.protobuf.ByteString
      getKeystoreKeyBytes(int index) {
    return com.google.protobuf.ByteString.copyFromUtf8(
        keystoreKey_.get(index));
  }
  private void ensureKeystoreKeyIsMutable() {
    if (!keystoreKey_.isModifiable()) {
      keystoreKey_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(keystoreKey_);
     }
  }
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   */
  private void setKeystoreKey(
      int index, java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  ensureKeystoreKeyIsMutable();
    keystoreKey_.set(index, value);
  }
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   */
  private void addKeystoreKey(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  ensureKeystoreKeyIsMutable();
    keystoreKey_.add(value);
  }
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   */
  private void addAllKeystoreKey(
      java.lang.Iterable<java.lang.String> values) {
    ensureKeystoreKeyIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, keystoreKey_);
  }
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   */
  private void clearKeystoreKey() {
    keystoreKey_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
  }
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   */
  private void addKeystoreKeyBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  ensureKeystoreKeyIsMutable();
    keystoreKey_.add(value.toStringUtf8());
  }

  public static final int PENDING_KEYSTORE_DECRYPTOR_TOKEN_FIELD_NUMBER = 11;
  private org.chromium.components.sync.protocol.EncryptedData pendingKeystoreDecryptorToken_;
  /**
   * <pre>
   * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
   * in case keystore keys arrived after NigoriSpecifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
   */
  public boolean hasPendingKeystoreDecryptorToken() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <pre>
   * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
   * in case keystore keys arrived after NigoriSpecifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
   */
  public org.chromium.components.sync.protocol.EncryptedData getPendingKeystoreDecryptorToken() {
    return pendingKeystoreDecryptorToken_ == null ? org.chromium.components.sync.protocol.EncryptedData.getDefaultInstance() : pendingKeystoreDecryptorToken_;
  }
  /**
   * <pre>
   * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
   * in case keystore keys arrived after NigoriSpecifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
   */
  private void setPendingKeystoreDecryptorToken(org.chromium.components.sync.protocol.EncryptedData value) {
    if (value == null) {
      throw new NullPointerException();
    }
    pendingKeystoreDecryptorToken_ = value;
    bitField0_ |= 0x00000100;
    }
  /**
   * <pre>
   * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
   * in case keystore keys arrived after NigoriSpecifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
   */
  private void setPendingKeystoreDecryptorToken(
      org.chromium.components.sync.protocol.EncryptedData.Builder builderForValue) {
    pendingKeystoreDecryptorToken_ = builderForValue.build();
    bitField0_ |= 0x00000100;
  }
  /**
   * <pre>
   * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
   * in case keystore keys arrived after NigoriSpecifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
   */
  private void mergePendingKeystoreDecryptorToken(org.chromium.components.sync.protocol.EncryptedData value) {
    if (pendingKeystoreDecryptorToken_ != null &&
        pendingKeystoreDecryptorToken_ != org.chromium.components.sync.protocol.EncryptedData.getDefaultInstance()) {
      pendingKeystoreDecryptorToken_ =
        org.chromium.components.sync.protocol.EncryptedData.newBuilder(pendingKeystoreDecryptorToken_).mergeFrom(value).buildPartial();
    } else {
      pendingKeystoreDecryptorToken_ = value;
    }
    bitField0_ |= 0x00000100;
  }
  /**
   * <pre>
   * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
   * in case keystore keys arrived after NigoriSpecifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
   */
  private void clearPendingKeystoreDecryptorToken() {  pendingKeystoreDecryptorToken_ = null;
    bitField0_ = (bitField0_ & ~0x00000100);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeMessage(1, getCryptographerData());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeString(2, getCurrentKeystoreKeyName());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeMessage(3, getPendingKeys());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeEnum(4, passphraseType_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeInt64(5, keystoreMigrationTime_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeInt64(6, customPassphraseTime_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeMessage(7, getCustomPassphraseKeyDerivationParams());
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeBool(8, encryptEverything_);
    }
    for (int i = 0; i < encryptedTypesSpecificsFieldNumber_.size(); i++) {
      output.writeInt32(9, encryptedTypesSpecificsFieldNumber_.getInt(i));
    }
    for (int i = 0; i < keystoreKey_.size(); i++) {
      output.writeString(10, keystoreKey_.get(i));
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeMessage(11, getPendingKeystoreDecryptorToken());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getCryptographerData());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getCurrentKeystoreKeyName());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getPendingKeys());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, passphraseType_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(5, keystoreMigrationTime_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(6, customPassphraseTime_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getCustomPassphraseKeyDerivationParams());
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, encryptEverything_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < encryptedTypesSpecificsFieldNumber_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(encryptedTypesSpecificsFieldNumber_.getInt(i));
      }
      size += dataSize;
      size += 1 * getEncryptedTypesSpecificsFieldNumberList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < keystoreKey_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeStringSizeNoTag(keystoreKey_.get(i));
      }
      size += dataSize;
      size += 1 * getKeystoreKeyList().size();
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getPendingKeystoreDecryptorToken());
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.NigoriModel prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code sync_pb.NigoriModel}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.NigoriModel, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.NigoriModel)
      org.chromium.components.sync.protocol.NigoriModelOrBuilder {
    // Construct using org.chromium.components.sync.protocol.NigoriModel.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Represents state of the cryptographer.
     * </pre>
     *
     * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
     */
    public boolean hasCryptographerData() {
      return instance.hasCryptographerData();
    }
    /**
     * <pre>
     * Represents state of the cryptographer.
     * </pre>
     *
     * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
     */
    public org.chromium.components.sync.protocol.CryptographerData getCryptographerData() {
      return instance.getCryptographerData();
    }
    /**
     * <pre>
     * Represents state of the cryptographer.
     * </pre>
     *
     * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
     */
    public Builder setCryptographerData(org.chromium.components.sync.protocol.CryptographerData value) {
      copyOnWrite();
      instance.setCryptographerData(value);
      return this;
      }
    /**
     * <pre>
     * Represents state of the cryptographer.
     * </pre>
     *
     * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
     */
    public Builder setCryptographerData(
        org.chromium.components.sync.protocol.CryptographerData.Builder builderForValue) {
      copyOnWrite();
      instance.setCryptographerData(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Represents state of the cryptographer.
     * </pre>
     *
     * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
     */
    public Builder mergeCryptographerData(org.chromium.components.sync.protocol.CryptographerData value) {
      copyOnWrite();
      instance.mergeCryptographerData(value);
      return this;
    }
    /**
     * <pre>
     * Represents state of the cryptographer.
     * </pre>
     *
     * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
     */
    public Builder clearCryptographerData() {  copyOnWrite();
      instance.clearCryptographerData();
      return this;
    }

    /**
     * <pre>
     * Contains the name of the key, used for encryption of
     * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
     * latest keystore key. Equals to cryptographer_data.default_key_name iff it
     * is Nigori in full keystore mode (not in backward compatible keystore
     * mode).
     * </pre>
     *
     * <code>optional string current_keystore_key_name = 2;</code>
     */
    public boolean hasCurrentKeystoreKeyName() {
      return instance.hasCurrentKeystoreKeyName();
    }
    /**
     * <pre>
     * Contains the name of the key, used for encryption of
     * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
     * latest keystore key. Equals to cryptographer_data.default_key_name iff it
     * is Nigori in full keystore mode (not in backward compatible keystore
     * mode).
     * </pre>
     *
     * <code>optional string current_keystore_key_name = 2;</code>
     */
    public java.lang.String getCurrentKeystoreKeyName() {
      return instance.getCurrentKeystoreKeyName();
    }
    /**
     * <pre>
     * Contains the name of the key, used for encryption of
     * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
     * latest keystore key. Equals to cryptographer_data.default_key_name iff it
     * is Nigori in full keystore mode (not in backward compatible keystore
     * mode).
     * </pre>
     *
     * <code>optional string current_keystore_key_name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getCurrentKeystoreKeyNameBytes() {
      return instance.getCurrentKeystoreKeyNameBytes();
    }
    /**
     * <pre>
     * Contains the name of the key, used for encryption of
     * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
     * latest keystore key. Equals to cryptographer_data.default_key_name iff it
     * is Nigori in full keystore mode (not in backward compatible keystore
     * mode).
     * </pre>
     *
     * <code>optional string current_keystore_key_name = 2;</code>
     */
    public Builder setCurrentKeystoreKeyName(
        java.lang.String value) {
      copyOnWrite();
      instance.setCurrentKeystoreKeyName(value);
      return this;
    }
    /**
     * <pre>
     * Contains the name of the key, used for encryption of
     * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
     * latest keystore key. Equals to cryptographer_data.default_key_name iff it
     * is Nigori in full keystore mode (not in backward compatible keystore
     * mode).
     * </pre>
     *
     * <code>optional string current_keystore_key_name = 2;</code>
     */
    public Builder clearCurrentKeystoreKeyName() {
      copyOnWrite();
      instance.clearCurrentKeystoreKeyName();
      return this;
    }
    /**
     * <pre>
     * Contains the name of the key, used for encryption of
     * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
     * latest keystore key. Equals to cryptographer_data.default_key_name iff it
     * is Nigori in full keystore mode (not in backward compatible keystore
     * mode).
     * </pre>
     *
     * <code>optional string current_keystore_key_name = 2;</code>
     */
    public Builder setCurrentKeystoreKeyNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCurrentKeystoreKeyNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * Contains keybag in encrypted form, should be empty once we were able to
     * decrypt keybag from specifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
     */
    public boolean hasPendingKeys() {
      return instance.hasPendingKeys();
    }
    /**
     * <pre>
     * Contains keybag in encrypted form, should be empty once we were able to
     * decrypt keybag from specifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
     */
    public org.chromium.components.sync.protocol.EncryptedData getPendingKeys() {
      return instance.getPendingKeys();
    }
    /**
     * <pre>
     * Contains keybag in encrypted form, should be empty once we were able to
     * decrypt keybag from specifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
     */
    public Builder setPendingKeys(org.chromium.components.sync.protocol.EncryptedData value) {
      copyOnWrite();
      instance.setPendingKeys(value);
      return this;
      }
    /**
     * <pre>
     * Contains keybag in encrypted form, should be empty once we were able to
     * decrypt keybag from specifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
     */
    public Builder setPendingKeys(
        org.chromium.components.sync.protocol.EncryptedData.Builder builderForValue) {
      copyOnWrite();
      instance.setPendingKeys(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Contains keybag in encrypted form, should be empty once we were able to
     * decrypt keybag from specifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
     */
    public Builder mergePendingKeys(org.chromium.components.sync.protocol.EncryptedData value) {
      copyOnWrite();
      instance.mergePendingKeys(value);
      return this;
    }
    /**
     * <pre>
     * Contains keybag in encrypted form, should be empty once we were able to
     * decrypt keybag from specifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
     */
    public Builder clearPendingKeys() {  copyOnWrite();
      instance.clearPendingKeys();
      return this;
    }

    /**
     * <pre>
     * PassphraseType used for encryption. IMPLICIT_PASSPRHASE shouldn't be used
     * here.
     * </pre>
     *
     * <code>optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];</code>
     */
    public boolean hasPassphraseType() {
      return instance.hasPassphraseType();
    }
    /**
     * <pre>
     * PassphraseType used for encryption. IMPLICIT_PASSPRHASE shouldn't be used
     * here.
     * </pre>
     *
     * <code>optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];</code>
     */
    public org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType getPassphraseType() {
      return instance.getPassphraseType();
    }
    /**
     * <pre>
     * PassphraseType used for encryption. IMPLICIT_PASSPRHASE shouldn't be used
     * here.
     * </pre>
     *
     * <code>optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];</code>
     */
    public Builder setPassphraseType(org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType value) {
      copyOnWrite();
      instance.setPassphraseType(value);
      return this;
    }
    /**
     * <pre>
     * PassphraseType used for encryption. IMPLICIT_PASSPRHASE shouldn't be used
     * here.
     * </pre>
     *
     * <code>optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];</code>
     */
    public Builder clearPassphraseType() {
      copyOnWrite();
      instance.clearPassphraseType();
      return this;
    }

    /**
     * <pre>
     * The time (in UNIX epoch milliseconds) at which the keystore migration was
     * performed.
     * </pre>
     *
     * <code>optional int64 keystore_migration_time = 5;</code>
     */
    public boolean hasKeystoreMigrationTime() {
      return instance.hasKeystoreMigrationTime();
    }
    /**
     * <pre>
     * The time (in UNIX epoch milliseconds) at which the keystore migration was
     * performed.
     * </pre>
     *
     * <code>optional int64 keystore_migration_time = 5;</code>
     */
    public long getKeystoreMigrationTime() {
      return instance.getKeystoreMigrationTime();
    }
    /**
     * <pre>
     * The time (in UNIX epoch milliseconds) at which the keystore migration was
     * performed.
     * </pre>
     *
     * <code>optional int64 keystore_migration_time = 5;</code>
     */
    public Builder setKeystoreMigrationTime(long value) {
      copyOnWrite();
      instance.setKeystoreMigrationTime(value);
      return this;
    }
    /**
     * <pre>
     * The time (in UNIX epoch milliseconds) at which the keystore migration was
     * performed.
     * </pre>
     *
     * <code>optional int64 keystore_migration_time = 5;</code>
     */
    public Builder clearKeystoreMigrationTime() {
      copyOnWrite();
      instance.clearKeystoreMigrationTime();
      return this;
    }

    /**
     * <pre>
     * The time (in UNIX epoch milliseconds) at which a custom passphrase was
     * set.
     * Note: this field may not be set if the custom passphrase was applied before
     * corresponding field in NigoriSpecifics was introduced.
     * </pre>
     *
     * <code>optional int64 custom_passphrase_time = 6;</code>
     */
    public boolean hasCustomPassphraseTime() {
      return instance.hasCustomPassphraseTime();
    }
    /**
     * <pre>
     * The time (in UNIX epoch milliseconds) at which a custom passphrase was
     * set.
     * Note: this field may not be set if the custom passphrase was applied before
     * corresponding field in NigoriSpecifics was introduced.
     * </pre>
     *
     * <code>optional int64 custom_passphrase_time = 6;</code>
     */
    public long getCustomPassphraseTime() {
      return instance.getCustomPassphraseTime();
    }
    /**
     * <pre>
     * The time (in UNIX epoch milliseconds) at which a custom passphrase was
     * set.
     * Note: this field may not be set if the custom passphrase was applied before
     * corresponding field in NigoriSpecifics was introduced.
     * </pre>
     *
     * <code>optional int64 custom_passphrase_time = 6;</code>
     */
    public Builder setCustomPassphraseTime(long value) {
      copyOnWrite();
      instance.setCustomPassphraseTime(value);
      return this;
    }
    /**
     * <pre>
     * The time (in UNIX epoch milliseconds) at which a custom passphrase was
     * set.
     * Note: this field may not be set if the custom passphrase was applied before
     * corresponding field in NigoriSpecifics was introduced.
     * </pre>
     *
     * <code>optional int64 custom_passphrase_time = 6;</code>
     */
    public Builder clearCustomPassphraseTime() {
      copyOnWrite();
      instance.clearCustomPassphraseTime();
      return this;
    }

    /**
     * <pre>
     * Params used for deriving keys from custom passphrase. Should be set iff
     * |passphrase_type| is CUSTOM_PASSPHRASE.
     * </pre>
     *
     * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
     */
    public boolean hasCustomPassphraseKeyDerivationParams() {
      return instance.hasCustomPassphraseKeyDerivationParams();
    }
    /**
     * <pre>
     * Params used for deriving keys from custom passphrase. Should be set iff
     * |passphrase_type| is CUSTOM_PASSPHRASE.
     * </pre>
     *
     * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
     */
    public org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams getCustomPassphraseKeyDerivationParams() {
      return instance.getCustomPassphraseKeyDerivationParams();
    }
    /**
     * <pre>
     * Params used for deriving keys from custom passphrase. Should be set iff
     * |passphrase_type| is CUSTOM_PASSPHRASE.
     * </pre>
     *
     * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
     */
    public Builder setCustomPassphraseKeyDerivationParams(org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams value) {
      copyOnWrite();
      instance.setCustomPassphraseKeyDerivationParams(value);
      return this;
      }
    /**
     * <pre>
     * Params used for deriving keys from custom passphrase. Should be set iff
     * |passphrase_type| is CUSTOM_PASSPHRASE.
     * </pre>
     *
     * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
     */
    public Builder setCustomPassphraseKeyDerivationParams(
        org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams.Builder builderForValue) {
      copyOnWrite();
      instance.setCustomPassphraseKeyDerivationParams(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Params used for deriving keys from custom passphrase. Should be set iff
     * |passphrase_type| is CUSTOM_PASSPHRASE.
     * </pre>
     *
     * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
     */
    public Builder mergeCustomPassphraseKeyDerivationParams(org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams value) {
      copyOnWrite();
      instance.mergeCustomPassphraseKeyDerivationParams(value);
      return this;
    }
    /**
     * <pre>
     * Params used for deriving keys from custom passphrase. Should be set iff
     * |passphrase_type| is CUSTOM_PASSPHRASE.
     * </pre>
     *
     * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
     */
    public Builder clearCustomPassphraseKeyDerivationParams() {  copyOnWrite();
      instance.clearCustomPassphraseKeyDerivationParams();
      return this;
    }

    /**
     * <pre>
     * Indicates whether we need to encrypt all encryptable user types.
     * </pre>
     *
     * <code>optional bool encrypt_everything = 8;</code>
     */
    public boolean hasEncryptEverything() {
      return instance.hasEncryptEverything();
    }
    /**
     * <pre>
     * Indicates whether we need to encrypt all encryptable user types.
     * </pre>
     *
     * <code>optional bool encrypt_everything = 8;</code>
     */
    public boolean getEncryptEverything() {
      return instance.getEncryptEverything();
    }
    /**
     * <pre>
     * Indicates whether we need to encrypt all encryptable user types.
     * </pre>
     *
     * <code>optional bool encrypt_everything = 8;</code>
     */
    public Builder setEncryptEverything(boolean value) {
      copyOnWrite();
      instance.setEncryptEverything(value);
      return this;
    }
    /**
     * <pre>
     * Indicates whether we need to encrypt all encryptable user types.
     * </pre>
     *
     * <code>optional bool encrypt_everything = 8;</code>
     */
    public Builder clearEncryptEverything() {
      copyOnWrite();
      instance.clearEncryptEverything();
      return this;
    }

    /**
     * <pre>
     * The list of encrypted UserEncryptableTypes, represented by their specifics
     * field number.
     * </pre>
     *
     * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
     */
    public java.util.List<java.lang.Integer>
        getEncryptedTypesSpecificsFieldNumberList() {
      return java.util.Collections.unmodifiableList(
          instance.getEncryptedTypesSpecificsFieldNumberList());
    }
    /**
     * <pre>
     * The list of encrypted UserEncryptableTypes, represented by their specifics
     * field number.
     * </pre>
     *
     * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
     */
    public int getEncryptedTypesSpecificsFieldNumberCount() {
      return instance.getEncryptedTypesSpecificsFieldNumberCount();
    }
    /**
     * <pre>
     * The list of encrypted UserEncryptableTypes, represented by their specifics
     * field number.
     * </pre>
     *
     * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
     */
    public int getEncryptedTypesSpecificsFieldNumber(int index) {
      return instance.getEncryptedTypesSpecificsFieldNumber(index);
    }
    /**
     * <pre>
     * The list of encrypted UserEncryptableTypes, represented by their specifics
     * field number.
     * </pre>
     *
     * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
     */
    public Builder setEncryptedTypesSpecificsFieldNumber(
        int index, int value) {
      copyOnWrite();
      instance.setEncryptedTypesSpecificsFieldNumber(index, value);
      return this;
    }
    /**
     * <pre>
     * The list of encrypted UserEncryptableTypes, represented by their specifics
     * field number.
     * </pre>
     *
     * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
     */
    public Builder addEncryptedTypesSpecificsFieldNumber(int value) {
      copyOnWrite();
      instance.addEncryptedTypesSpecificsFieldNumber(value);
      return this;
    }
    /**
     * <pre>
     * The list of encrypted UserEncryptableTypes, represented by their specifics
     * field number.
     * </pre>
     *
     * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
     */
    public Builder addAllEncryptedTypesSpecificsFieldNumber(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllEncryptedTypesSpecificsFieldNumber(values);
      return this;
    }
    /**
     * <pre>
     * The list of encrypted UserEncryptableTypes, represented by their specifics
     * field number.
     * </pre>
     *
     * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
     */
    public Builder clearEncryptedTypesSpecificsFieldNumber() {
      copyOnWrite();
      instance.clearEncryptedTypesSpecificsFieldNumber();
      return this;
    }

    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     */
    public java.util.List<String>
        getKeystoreKeyList() {
      return java.util.Collections.unmodifiableList(
          instance.getKeystoreKeyList());
    }
    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     */
    public int getKeystoreKeyCount() {
      return instance.getKeystoreKeyCount();
    }
    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     */
    public java.lang.String getKeystoreKey(int index) {
      return instance.getKeystoreKey(index);
    }
    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     */
    public com.google.protobuf.ByteString
        getKeystoreKeyBytes(int index) {
      return instance.getKeystoreKeyBytes(index);
    }
    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     */
    public Builder setKeystoreKey(
        int index, java.lang.String value) {
      copyOnWrite();
      instance.setKeystoreKey(index, value);
      return this;
    }
    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     */
    public Builder addKeystoreKey(
        java.lang.String value) {
      copyOnWrite();
      instance.addKeystoreKey(value);
      return this;
    }
    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     */
    public Builder addAllKeystoreKey(
        java.lang.Iterable<java.lang.String> values) {
      copyOnWrite();
      instance.addAllKeystoreKey(values);
      return this;
    }
    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     */
    public Builder clearKeystoreKey() {
      copyOnWrite();
      instance.clearKeystoreKey();
      return this;
    }
    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     */
    public Builder addKeystoreKeyBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.addKeystoreKeyBytes(value);
      return this;
    }

    /**
     * <pre>
     * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
     * in case keystore keys arrived after NigoriSpecifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
     */
    public boolean hasPendingKeystoreDecryptorToken() {
      return instance.hasPendingKeystoreDecryptorToken();
    }
    /**
     * <pre>
     * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
     * in case keystore keys arrived after NigoriSpecifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
     */
    public org.chromium.components.sync.protocol.EncryptedData getPendingKeystoreDecryptorToken() {
      return instance.getPendingKeystoreDecryptorToken();
    }
    /**
     * <pre>
     * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
     * in case keystore keys arrived after NigoriSpecifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
     */
    public Builder setPendingKeystoreDecryptorToken(org.chromium.components.sync.protocol.EncryptedData value) {
      copyOnWrite();
      instance.setPendingKeystoreDecryptorToken(value);
      return this;
      }
    /**
     * <pre>
     * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
     * in case keystore keys arrived after NigoriSpecifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
     */
    public Builder setPendingKeystoreDecryptorToken(
        org.chromium.components.sync.protocol.EncryptedData.Builder builderForValue) {
      copyOnWrite();
      instance.setPendingKeystoreDecryptorToken(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
     * in case keystore keys arrived after NigoriSpecifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
     */
    public Builder mergePendingKeystoreDecryptorToken(org.chromium.components.sync.protocol.EncryptedData value) {
      copyOnWrite();
      instance.mergePendingKeystoreDecryptorToken(value);
      return this;
    }
    /**
     * <pre>
     * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
     * in case keystore keys arrived after NigoriSpecifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
     */
    public Builder clearPendingKeystoreDecryptorToken() {  copyOnWrite();
      instance.clearPendingKeystoreDecryptorToken();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.NigoriModel)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.NigoriModel();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        encryptedTypesSpecificsFieldNumber_.makeImmutable();
        keystoreKey_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.NigoriModel other = (org.chromium.components.sync.protocol.NigoriModel) arg1;
        cryptographerData_ = visitor.visitMessage(cryptographerData_, other.cryptographerData_);
        currentKeystoreKeyName_ = visitor.visitString(
            hasCurrentKeystoreKeyName(), currentKeystoreKeyName_,
            other.hasCurrentKeystoreKeyName(), other.currentKeystoreKeyName_);
        pendingKeys_ = visitor.visitMessage(pendingKeys_, other.pendingKeys_);
        passphraseType_ = visitor.visitInt(hasPassphraseType(), passphraseType_,
            other.hasPassphraseType(), other.passphraseType_);
        keystoreMigrationTime_ = visitor.visitLong(
            hasKeystoreMigrationTime(), keystoreMigrationTime_,
            other.hasKeystoreMigrationTime(), other.keystoreMigrationTime_);
        customPassphraseTime_ = visitor.visitLong(
            hasCustomPassphraseTime(), customPassphraseTime_,
            other.hasCustomPassphraseTime(), other.customPassphraseTime_);
        customPassphraseKeyDerivationParams_ = visitor.visitMessage(customPassphraseKeyDerivationParams_, other.customPassphraseKeyDerivationParams_);
        encryptEverything_ = visitor.visitBoolean(
            hasEncryptEverything(), encryptEverything_,
            other.hasEncryptEverything(), other.encryptEverything_);
        encryptedTypesSpecificsFieldNumber_= visitor.visitIntList(encryptedTypesSpecificsFieldNumber_, other.encryptedTypesSpecificsFieldNumber_);
        keystoreKey_= visitor.visitList(keystoreKey_, other.keystoreKey_);
        pendingKeystoreDecryptorToken_ = visitor.visitMessage(pendingKeystoreDecryptorToken_, other.pendingKeystoreDecryptorToken_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                org.chromium.components.sync.protocol.CryptographerData.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = cryptographerData_.toBuilder();
                }
                cryptographerData_ = input.readMessage(org.chromium.components.sync.protocol.CryptographerData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(cryptographerData_);
                  cryptographerData_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
              case 18: {
                String s = input.readString();
                bitField0_ |= 0x00000002;
                currentKeystoreKeyName_ = s;
                break;
              }
              case 26: {
                org.chromium.components.sync.protocol.EncryptedData.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                  subBuilder = pendingKeys_.toBuilder();
                }
                pendingKeys_ = input.readMessage(org.chromium.components.sync.protocol.EncryptedData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(pendingKeys_);
                  pendingKeys_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
              case 32: {
                int rawValue = input.readEnum();
                org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType value = org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(4, rawValue);
                } else {
                  bitField0_ |= 0x00000008;
                  passphraseType_ = rawValue;
                }
                break;
              }
              case 40: {
                bitField0_ |= 0x00000010;
                keystoreMigrationTime_ = input.readInt64();
                break;
              }
              case 48: {
                bitField0_ |= 0x00000020;
                customPassphraseTime_ = input.readInt64();
                break;
              }
              case 58: {
                org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams.Builder subBuilder = null;
                if (((bitField0_ & 0x00000040) == 0x00000040)) {
                  subBuilder = customPassphraseKeyDerivationParams_.toBuilder();
                }
                customPassphraseKeyDerivationParams_ = input.readMessage(org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(customPassphraseKeyDerivationParams_);
                  customPassphraseKeyDerivationParams_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000040;
                break;
              }
              case 64: {
                bitField0_ |= 0x00000080;
                encryptEverything_ = input.readBool();
                break;
              }
              case 72: {
                if (!encryptedTypesSpecificsFieldNumber_.isModifiable()) {
                  encryptedTypesSpecificsFieldNumber_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(encryptedTypesSpecificsFieldNumber_);
                }
                encryptedTypesSpecificsFieldNumber_.addInt(input.readInt32());
                break;
              }
              case 74: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!encryptedTypesSpecificsFieldNumber_.isModifiable() && input.getBytesUntilLimit() > 0) {
                  encryptedTypesSpecificsFieldNumber_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(encryptedTypesSpecificsFieldNumber_);
                }
                while (input.getBytesUntilLimit() > 0) {
                  encryptedTypesSpecificsFieldNumber_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 82: {
                String s = input.readString();
                if (!keystoreKey_.isModifiable()) {
                  keystoreKey_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(keystoreKey_);
                }
                keystoreKey_.add(s);
                break;
              }
              case 90: {
                org.chromium.components.sync.protocol.EncryptedData.Builder subBuilder = null;
                if (((bitField0_ & 0x00000100) == 0x00000100)) {
                  subBuilder = pendingKeystoreDecryptorToken_.toBuilder();
                }
                pendingKeystoreDecryptorToken_ = input.readMessage(org.chromium.components.sync.protocol.EncryptedData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(pendingKeystoreDecryptorToken_);
                  pendingKeystoreDecryptorToken_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000100;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.NigoriModel.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.NigoriModel)
  private static final org.chromium.components.sync.protocol.NigoriModel DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new NigoriModel();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.NigoriModel getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<NigoriModel> PARSER;

  public static com.google.protobuf.Parser<NigoriModel> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

