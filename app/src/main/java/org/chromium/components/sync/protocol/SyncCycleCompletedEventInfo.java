// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_debug_info.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * The additional info here is from the StatusController. They get sent when
 * the event SYNC_CYCLE_COMPLETED  is sent.
 * </pre>
 *
 * Protobuf type {@code sync_pb.SyncCycleCompletedEventInfo}
 */
public  final class SyncCycleCompletedEventInfo extends
    com.google.protobuf.GeneratedMessageLite<
        SyncCycleCompletedEventInfo, SyncCycleCompletedEventInfo.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.SyncCycleCompletedEventInfo)
    SyncCycleCompletedEventInfoOrBuilder {
  private SyncCycleCompletedEventInfo() {
  }
  private int bitField0_;
  public static final int NUM_ENCRYPTION_CONFLICTS_FIELD_NUMBER = 4;
  private int numEncryptionConflicts_;
  /**
   * <pre>
   * These new conflict counters replace the ones above.
   * </pre>
   *
   * <code>optional int32 num_encryption_conflicts = 4;</code>
   */
  public boolean hasNumEncryptionConflicts() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * These new conflict counters replace the ones above.
   * </pre>
   *
   * <code>optional int32 num_encryption_conflicts = 4;</code>
   */
  public int getNumEncryptionConflicts() {
    return numEncryptionConflicts_;
  }
  /**
   * <pre>
   * These new conflict counters replace the ones above.
   * </pre>
   *
   * <code>optional int32 num_encryption_conflicts = 4;</code>
   */
  private void setNumEncryptionConflicts(int value) {
    bitField0_ |= 0x00000001;
    numEncryptionConflicts_ = value;
  }
  /**
   * <pre>
   * These new conflict counters replace the ones above.
   * </pre>
   *
   * <code>optional int32 num_encryption_conflicts = 4;</code>
   */
  private void clearNumEncryptionConflicts() {
    bitField0_ = (bitField0_ & ~0x00000001);
    numEncryptionConflicts_ = 0;
  }

  public static final int NUM_HIERARCHY_CONFLICTS_FIELD_NUMBER = 5;
  private int numHierarchyConflicts_;
  /**
   * <code>optional int32 num_hierarchy_conflicts = 5;</code>
   */
  public boolean hasNumHierarchyConflicts() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional int32 num_hierarchy_conflicts = 5;</code>
   */
  public int getNumHierarchyConflicts() {
    return numHierarchyConflicts_;
  }
  /**
   * <code>optional int32 num_hierarchy_conflicts = 5;</code>
   */
  private void setNumHierarchyConflicts(int value) {
    bitField0_ |= 0x00000002;
    numHierarchyConflicts_ = value;
  }
  /**
   * <code>optional int32 num_hierarchy_conflicts = 5;</code>
   */
  private void clearNumHierarchyConflicts() {
    bitField0_ = (bitField0_ & ~0x00000002);
    numHierarchyConflicts_ = 0;
  }

  public static final int NUM_SIMPLE_CONFLICTS_FIELD_NUMBER = 6;
  private int numSimpleConflicts_;
  /**
   * <pre>
   * No longer sent since M24.
   * </pre>
   *
   * <code>optional int32 num_simple_conflicts = 6;</code>
   */
  public boolean hasNumSimpleConflicts() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * No longer sent since M24.
   * </pre>
   *
   * <code>optional int32 num_simple_conflicts = 6;</code>
   */
  public int getNumSimpleConflicts() {
    return numSimpleConflicts_;
  }
  /**
   * <pre>
   * No longer sent since M24.
   * </pre>
   *
   * <code>optional int32 num_simple_conflicts = 6;</code>
   */
  private void setNumSimpleConflicts(int value) {
    bitField0_ |= 0x00000004;
    numSimpleConflicts_ = value;
  }
  /**
   * <pre>
   * No longer sent since M24.
   * </pre>
   *
   * <code>optional int32 num_simple_conflicts = 6;</code>
   */
  private void clearNumSimpleConflicts() {
    bitField0_ = (bitField0_ & ~0x00000004);
    numSimpleConflicts_ = 0;
  }

  public static final int NUM_SERVER_CONFLICTS_FIELD_NUMBER = 7;
  private int numServerConflicts_;
  /**
   * <code>optional int32 num_server_conflicts = 7;</code>
   */
  public boolean hasNumServerConflicts() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional int32 num_server_conflicts = 7;</code>
   */
  public int getNumServerConflicts() {
    return numServerConflicts_;
  }
  /**
   * <code>optional int32 num_server_conflicts = 7;</code>
   */
  private void setNumServerConflicts(int value) {
    bitField0_ |= 0x00000008;
    numServerConflicts_ = value;
  }
  /**
   * <code>optional int32 num_server_conflicts = 7;</code>
   */
  private void clearNumServerConflicts() {
    bitField0_ = (bitField0_ & ~0x00000008);
    numServerConflicts_ = 0;
  }

  public static final int NUM_UPDATES_DOWNLOADED_FIELD_NUMBER = 8;
  private int numUpdatesDownloaded_;
  /**
   * <pre>
   * Counts to track the effective usefulness of our GetUpdate requests.
   * </pre>
   *
   * <code>optional int32 num_updates_downloaded = 8;</code>
   */
  public boolean hasNumUpdatesDownloaded() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <pre>
   * Counts to track the effective usefulness of our GetUpdate requests.
   * </pre>
   *
   * <code>optional int32 num_updates_downloaded = 8;</code>
   */
  public int getNumUpdatesDownloaded() {
    return numUpdatesDownloaded_;
  }
  /**
   * <pre>
   * Counts to track the effective usefulness of our GetUpdate requests.
   * </pre>
   *
   * <code>optional int32 num_updates_downloaded = 8;</code>
   */
  private void setNumUpdatesDownloaded(int value) {
    bitField0_ |= 0x00000010;
    numUpdatesDownloaded_ = value;
  }
  /**
   * <pre>
   * Counts to track the effective usefulness of our GetUpdate requests.
   * </pre>
   *
   * <code>optional int32 num_updates_downloaded = 8;</code>
   */
  private void clearNumUpdatesDownloaded() {
    bitField0_ = (bitField0_ & ~0x00000010);
    numUpdatesDownloaded_ = 0;
  }

  public static final int NUM_REFLECTED_UPDATES_DOWNLOADED_FIELD_NUMBER = 9;
  private int numReflectedUpdatesDownloaded_;
  /**
   * <code>optional int32 num_reflected_updates_downloaded = 9;</code>
   */
  public boolean hasNumReflectedUpdatesDownloaded() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <code>optional int32 num_reflected_updates_downloaded = 9;</code>
   */
  public int getNumReflectedUpdatesDownloaded() {
    return numReflectedUpdatesDownloaded_;
  }
  /**
   * <code>optional int32 num_reflected_updates_downloaded = 9;</code>
   */
  private void setNumReflectedUpdatesDownloaded(int value) {
    bitField0_ |= 0x00000020;
    numReflectedUpdatesDownloaded_ = value;
  }
  /**
   * <code>optional int32 num_reflected_updates_downloaded = 9;</code>
   */
  private void clearNumReflectedUpdatesDownloaded() {
    bitField0_ = (bitField0_ & ~0x00000020);
    numReflectedUpdatesDownloaded_ = 0;
  }

  public static final int CALLER_INFO_FIELD_NUMBER = 10;
  private org.chromium.components.sync.protocol.GetUpdatesCallerInfo callerInfo_;
  /**
   * <pre>
   * |caller_info| was mostly replaced by |get_updates_origin|; now it only
   * contains the |notifications_enabled| flag.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;</code>
   */
  public boolean hasCallerInfo() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <pre>
   * |caller_info| was mostly replaced by |get_updates_origin|; now it only
   * contains the |notifications_enabled| flag.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;</code>
   */
  public org.chromium.components.sync.protocol.GetUpdatesCallerInfo getCallerInfo() {
    return callerInfo_ == null ? org.chromium.components.sync.protocol.GetUpdatesCallerInfo.getDefaultInstance() : callerInfo_;
  }
  /**
   * <pre>
   * |caller_info| was mostly replaced by |get_updates_origin|; now it only
   * contains the |notifications_enabled| flag.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;</code>
   */
  private void setCallerInfo(org.chromium.components.sync.protocol.GetUpdatesCallerInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    callerInfo_ = value;
    bitField0_ |= 0x00000040;
    }
  /**
   * <pre>
   * |caller_info| was mostly replaced by |get_updates_origin|; now it only
   * contains the |notifications_enabled| flag.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;</code>
   */
  private void setCallerInfo(
      org.chromium.components.sync.protocol.GetUpdatesCallerInfo.Builder builderForValue) {
    callerInfo_ = builderForValue.build();
    bitField0_ |= 0x00000040;
  }
  /**
   * <pre>
   * |caller_info| was mostly replaced by |get_updates_origin|; now it only
   * contains the |notifications_enabled| flag.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;</code>
   */
  private void mergeCallerInfo(org.chromium.components.sync.protocol.GetUpdatesCallerInfo value) {
    if (callerInfo_ != null &&
        callerInfo_ != org.chromium.components.sync.protocol.GetUpdatesCallerInfo.getDefaultInstance()) {
      callerInfo_ =
        org.chromium.components.sync.protocol.GetUpdatesCallerInfo.newBuilder(callerInfo_).mergeFrom(value).buildPartial();
    } else {
      callerInfo_ = value;
    }
    bitField0_ |= 0x00000040;
  }
  /**
   * <pre>
   * |caller_info| was mostly replaced by |get_updates_origin|; now it only
   * contains the |notifications_enabled| flag.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;</code>
   */
  private void clearCallerInfo() {  callerInfo_ = null;
    bitField0_ = (bitField0_ & ~0x00000040);
  }

  public static final int GET_UPDATES_ORIGIN_FIELD_NUMBER = 12;
  private int getUpdatesOrigin_;
  /**
   * <code>optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;</code>
   */
  public boolean hasGetUpdatesOrigin() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <code>optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;</code>
   */
  public org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin getGetUpdatesOrigin() {
    org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin result = org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin.forNumber(getUpdatesOrigin_);
    return result == null ? org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin.UNKNOWN_ORIGIN : result;
  }
  /**
   * <code>optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;</code>
   */
  private void setGetUpdatesOrigin(org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000080;
    getUpdatesOrigin_ = value.getNumber();
  }
  /**
   * <code>optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;</code>
   */
  private void clearGetUpdatesOrigin() {
    bitField0_ = (bitField0_ & ~0x00000080);
    getUpdatesOrigin_ = 0;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(4, numEncryptionConflicts_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt32(5, numHierarchyConflicts_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt32(6, numSimpleConflicts_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeInt32(7, numServerConflicts_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeInt32(8, numUpdatesDownloaded_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeInt32(9, numReflectedUpdatesDownloaded_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeMessage(10, getCallerInfo());
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeEnum(12, getUpdatesOrigin_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, numEncryptionConflicts_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, numHierarchyConflicts_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(6, numSimpleConflicts_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(7, numServerConflicts_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(8, numUpdatesDownloaded_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(9, numReflectedUpdatesDownloaded_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getCallerInfo());
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(12, getUpdatesOrigin_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * The additional info here is from the StatusController. They get sent when
   * the event SYNC_CYCLE_COMPLETED  is sent.
   * </pre>
   *
   * Protobuf type {@code sync_pb.SyncCycleCompletedEventInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.SyncCycleCompletedEventInfo)
      org.chromium.components.sync.protocol.SyncCycleCompletedEventInfoOrBuilder {
    // Construct using org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * These new conflict counters replace the ones above.
     * </pre>
     *
     * <code>optional int32 num_encryption_conflicts = 4;</code>
     */
    public boolean hasNumEncryptionConflicts() {
      return instance.hasNumEncryptionConflicts();
    }
    /**
     * <pre>
     * These new conflict counters replace the ones above.
     * </pre>
     *
     * <code>optional int32 num_encryption_conflicts = 4;</code>
     */
    public int getNumEncryptionConflicts() {
      return instance.getNumEncryptionConflicts();
    }
    /**
     * <pre>
     * These new conflict counters replace the ones above.
     * </pre>
     *
     * <code>optional int32 num_encryption_conflicts = 4;</code>
     */
    public Builder setNumEncryptionConflicts(int value) {
      copyOnWrite();
      instance.setNumEncryptionConflicts(value);
      return this;
    }
    /**
     * <pre>
     * These new conflict counters replace the ones above.
     * </pre>
     *
     * <code>optional int32 num_encryption_conflicts = 4;</code>
     */
    public Builder clearNumEncryptionConflicts() {
      copyOnWrite();
      instance.clearNumEncryptionConflicts();
      return this;
    }

    /**
     * <code>optional int32 num_hierarchy_conflicts = 5;</code>
     */
    public boolean hasNumHierarchyConflicts() {
      return instance.hasNumHierarchyConflicts();
    }
    /**
     * <code>optional int32 num_hierarchy_conflicts = 5;</code>
     */
    public int getNumHierarchyConflicts() {
      return instance.getNumHierarchyConflicts();
    }
    /**
     * <code>optional int32 num_hierarchy_conflicts = 5;</code>
     */
    public Builder setNumHierarchyConflicts(int value) {
      copyOnWrite();
      instance.setNumHierarchyConflicts(value);
      return this;
    }
    /**
     * <code>optional int32 num_hierarchy_conflicts = 5;</code>
     */
    public Builder clearNumHierarchyConflicts() {
      copyOnWrite();
      instance.clearNumHierarchyConflicts();
      return this;
    }

    /**
     * <pre>
     * No longer sent since M24.
     * </pre>
     *
     * <code>optional int32 num_simple_conflicts = 6;</code>
     */
    public boolean hasNumSimpleConflicts() {
      return instance.hasNumSimpleConflicts();
    }
    /**
     * <pre>
     * No longer sent since M24.
     * </pre>
     *
     * <code>optional int32 num_simple_conflicts = 6;</code>
     */
    public int getNumSimpleConflicts() {
      return instance.getNumSimpleConflicts();
    }
    /**
     * <pre>
     * No longer sent since M24.
     * </pre>
     *
     * <code>optional int32 num_simple_conflicts = 6;</code>
     */
    public Builder setNumSimpleConflicts(int value) {
      copyOnWrite();
      instance.setNumSimpleConflicts(value);
      return this;
    }
    /**
     * <pre>
     * No longer sent since M24.
     * </pre>
     *
     * <code>optional int32 num_simple_conflicts = 6;</code>
     */
    public Builder clearNumSimpleConflicts() {
      copyOnWrite();
      instance.clearNumSimpleConflicts();
      return this;
    }

    /**
     * <code>optional int32 num_server_conflicts = 7;</code>
     */
    public boolean hasNumServerConflicts() {
      return instance.hasNumServerConflicts();
    }
    /**
     * <code>optional int32 num_server_conflicts = 7;</code>
     */
    public int getNumServerConflicts() {
      return instance.getNumServerConflicts();
    }
    /**
     * <code>optional int32 num_server_conflicts = 7;</code>
     */
    public Builder setNumServerConflicts(int value) {
      copyOnWrite();
      instance.setNumServerConflicts(value);
      return this;
    }
    /**
     * <code>optional int32 num_server_conflicts = 7;</code>
     */
    public Builder clearNumServerConflicts() {
      copyOnWrite();
      instance.clearNumServerConflicts();
      return this;
    }

    /**
     * <pre>
     * Counts to track the effective usefulness of our GetUpdate requests.
     * </pre>
     *
     * <code>optional int32 num_updates_downloaded = 8;</code>
     */
    public boolean hasNumUpdatesDownloaded() {
      return instance.hasNumUpdatesDownloaded();
    }
    /**
     * <pre>
     * Counts to track the effective usefulness of our GetUpdate requests.
     * </pre>
     *
     * <code>optional int32 num_updates_downloaded = 8;</code>
     */
    public int getNumUpdatesDownloaded() {
      return instance.getNumUpdatesDownloaded();
    }
    /**
     * <pre>
     * Counts to track the effective usefulness of our GetUpdate requests.
     * </pre>
     *
     * <code>optional int32 num_updates_downloaded = 8;</code>
     */
    public Builder setNumUpdatesDownloaded(int value) {
      copyOnWrite();
      instance.setNumUpdatesDownloaded(value);
      return this;
    }
    /**
     * <pre>
     * Counts to track the effective usefulness of our GetUpdate requests.
     * </pre>
     *
     * <code>optional int32 num_updates_downloaded = 8;</code>
     */
    public Builder clearNumUpdatesDownloaded() {
      copyOnWrite();
      instance.clearNumUpdatesDownloaded();
      return this;
    }

    /**
     * <code>optional int32 num_reflected_updates_downloaded = 9;</code>
     */
    public boolean hasNumReflectedUpdatesDownloaded() {
      return instance.hasNumReflectedUpdatesDownloaded();
    }
    /**
     * <code>optional int32 num_reflected_updates_downloaded = 9;</code>
     */
    public int getNumReflectedUpdatesDownloaded() {
      return instance.getNumReflectedUpdatesDownloaded();
    }
    /**
     * <code>optional int32 num_reflected_updates_downloaded = 9;</code>
     */
    public Builder setNumReflectedUpdatesDownloaded(int value) {
      copyOnWrite();
      instance.setNumReflectedUpdatesDownloaded(value);
      return this;
    }
    /**
     * <code>optional int32 num_reflected_updates_downloaded = 9;</code>
     */
    public Builder clearNumReflectedUpdatesDownloaded() {
      copyOnWrite();
      instance.clearNumReflectedUpdatesDownloaded();
      return this;
    }

    /**
     * <pre>
     * |caller_info| was mostly replaced by |get_updates_origin|; now it only
     * contains the |notifications_enabled| flag.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;</code>
     */
    public boolean hasCallerInfo() {
      return instance.hasCallerInfo();
    }
    /**
     * <pre>
     * |caller_info| was mostly replaced by |get_updates_origin|; now it only
     * contains the |notifications_enabled| flag.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;</code>
     */
    public org.chromium.components.sync.protocol.GetUpdatesCallerInfo getCallerInfo() {
      return instance.getCallerInfo();
    }
    /**
     * <pre>
     * |caller_info| was mostly replaced by |get_updates_origin|; now it only
     * contains the |notifications_enabled| flag.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;</code>
     */
    public Builder setCallerInfo(org.chromium.components.sync.protocol.GetUpdatesCallerInfo value) {
      copyOnWrite();
      instance.setCallerInfo(value);
      return this;
      }
    /**
     * <pre>
     * |caller_info| was mostly replaced by |get_updates_origin|; now it only
     * contains the |notifications_enabled| flag.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;</code>
     */
    public Builder setCallerInfo(
        org.chromium.components.sync.protocol.GetUpdatesCallerInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setCallerInfo(builderForValue);
      return this;
    }
    /**
     * <pre>
     * |caller_info| was mostly replaced by |get_updates_origin|; now it only
     * contains the |notifications_enabled| flag.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;</code>
     */
    public Builder mergeCallerInfo(org.chromium.components.sync.protocol.GetUpdatesCallerInfo value) {
      copyOnWrite();
      instance.mergeCallerInfo(value);
      return this;
    }
    /**
     * <pre>
     * |caller_info| was mostly replaced by |get_updates_origin|; now it only
     * contains the |notifications_enabled| flag.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;</code>
     */
    public Builder clearCallerInfo() {  copyOnWrite();
      instance.clearCallerInfo();
      return this;
    }

    /**
     * <code>optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;</code>
     */
    public boolean hasGetUpdatesOrigin() {
      return instance.hasGetUpdatesOrigin();
    }
    /**
     * <code>optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;</code>
     */
    public org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin getGetUpdatesOrigin() {
      return instance.getGetUpdatesOrigin();
    }
    /**
     * <code>optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;</code>
     */
    public Builder setGetUpdatesOrigin(org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin value) {
      copyOnWrite();
      instance.setGetUpdatesOrigin(value);
      return this;
    }
    /**
     * <code>optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 12;</code>
     */
    public Builder clearGetUpdatesOrigin() {
      copyOnWrite();
      instance.clearGetUpdatesOrigin();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.SyncCycleCompletedEventInfo)
  }
  private byte memoizedIsInitialized = -1;
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo();
      }
      case IS_INITIALIZED: {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return DEFAULT_INSTANCE;
        if (isInitialized == 0) return null;

        boolean shouldMemoize = ((Boolean) arg0).booleanValue();
        if (hasCallerInfo()) {
          if (!getCallerInfo().isInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
        }
        if (shouldMemoize) memoizedIsInitialized = 1;
        return DEFAULT_INSTANCE;

      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo other = (org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo) arg1;
        numEncryptionConflicts_ = visitor.visitInt(
            hasNumEncryptionConflicts(), numEncryptionConflicts_,
            other.hasNumEncryptionConflicts(), other.numEncryptionConflicts_);
        numHierarchyConflicts_ = visitor.visitInt(
            hasNumHierarchyConflicts(), numHierarchyConflicts_,
            other.hasNumHierarchyConflicts(), other.numHierarchyConflicts_);
        numSimpleConflicts_ = visitor.visitInt(
            hasNumSimpleConflicts(), numSimpleConflicts_,
            other.hasNumSimpleConflicts(), other.numSimpleConflicts_);
        numServerConflicts_ = visitor.visitInt(
            hasNumServerConflicts(), numServerConflicts_,
            other.hasNumServerConflicts(), other.numServerConflicts_);
        numUpdatesDownloaded_ = visitor.visitInt(
            hasNumUpdatesDownloaded(), numUpdatesDownloaded_,
            other.hasNumUpdatesDownloaded(), other.numUpdatesDownloaded_);
        numReflectedUpdatesDownloaded_ = visitor.visitInt(
            hasNumReflectedUpdatesDownloaded(), numReflectedUpdatesDownloaded_,
            other.hasNumReflectedUpdatesDownloaded(), other.numReflectedUpdatesDownloaded_);
        callerInfo_ = visitor.visitMessage(callerInfo_, other.callerInfo_);
        getUpdatesOrigin_ = visitor.visitInt(hasGetUpdatesOrigin(), getUpdatesOrigin_,
            other.hasGetUpdatesOrigin(), other.getUpdatesOrigin_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 32: {
                bitField0_ |= 0x00000001;
                numEncryptionConflicts_ = input.readInt32();
                break;
              }
              case 40: {
                bitField0_ |= 0x00000002;
                numHierarchyConflicts_ = input.readInt32();
                break;
              }
              case 48: {
                bitField0_ |= 0x00000004;
                numSimpleConflicts_ = input.readInt32();
                break;
              }
              case 56: {
                bitField0_ |= 0x00000008;
                numServerConflicts_ = input.readInt32();
                break;
              }
              case 64: {
                bitField0_ |= 0x00000010;
                numUpdatesDownloaded_ = input.readInt32();
                break;
              }
              case 72: {
                bitField0_ |= 0x00000020;
                numReflectedUpdatesDownloaded_ = input.readInt32();
                break;
              }
              case 82: {
                org.chromium.components.sync.protocol.GetUpdatesCallerInfo.Builder subBuilder = null;
                if (((bitField0_ & 0x00000040) == 0x00000040)) {
                  subBuilder = callerInfo_.toBuilder();
                }
                callerInfo_ = input.readMessage(org.chromium.components.sync.protocol.GetUpdatesCallerInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(callerInfo_);
                  callerInfo_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000040;
                break;
              }
              case 96: {
                int rawValue = input.readEnum();
                org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin value = org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(12, rawValue);
                } else {
                  bitField0_ |= 0x00000080;
                  getUpdatesOrigin_ = rawValue;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.SyncCycleCompletedEventInfo)
  private static final org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new SyncCycleCompletedEventInfo();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.SyncCycleCompletedEventInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SyncCycleCompletedEventInfo> PARSER;

  public static com.google.protobuf.Parser<SyncCycleCompletedEventInfo> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

