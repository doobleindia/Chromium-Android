// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_info_specifics.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * Device specific information for Sharing feature. Used to send end-to-end
 * encrypted message through FCM to other devices.
 * </pre>
 *
 * Protobuf type {@code sync_pb.SharingSpecificFields}
 */
public  final class SharingSpecificFields extends
    com.google.protobuf.GeneratedMessageLite<
        SharingSpecificFields, SharingSpecificFields.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.SharingSpecificFields)
    SharingSpecificFieldsOrBuilder {
  private SharingSpecificFields() {
    vapidFcmToken_ = "";
    vapidP256Dh_ = com.google.protobuf.ByteString.EMPTY;
    vapidAuthSecret_ = com.google.protobuf.ByteString.EMPTY;
    enabledFeatures_ = emptyIntList();
    senderIdFcmToken_ = "";
    senderIdP256Dh_ = com.google.protobuf.ByteString.EMPTY;
    senderIdAuthSecret_ = com.google.protobuf.ByteString.EMPTY;
  }
  /**
   * <pre>
   * Enum defining available Sharing features.
   * </pre>
   *
   * Protobuf enum {@code sync_pb.SharingSpecificFields.EnabledFeatures}
   */
  public enum EnabledFeatures
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>UNKNOWN = 0;</code>
     */
    UNKNOWN(0),
    /**
     * <pre>
     * Supports Click to Call only via VAPID.
     * </pre>
     *
     * <code>CLICK_TO_CALL_VAPID = 1;</code>
     */
    CLICK_TO_CALL_VAPID(1),
    /**
     * <pre>
     * Supports Shared Clipboard only via VAPID.
     * </pre>
     *
     * <code>SHARED_CLIPBOARD_VAPID = 2;</code>
     */
    SHARED_CLIPBOARD_VAPID(2),
    /**
     * <code>SMS_FETCHER = 3;</code>
     */
    SMS_FETCHER(3),
    /**
     * <code>REMOTE_COPY = 4;</code>
     */
    REMOTE_COPY(4),
    /**
     * <code>PEER_CONNECTION = 5;</code>
     */
    PEER_CONNECTION(5),
    /**
     * <code>DISCOVERY = 6;</code>
     */
    DISCOVERY(6),
    /**
     * <pre>
     * Suppots Click to Call via both VAPID and sender ID.
     * </pre>
     *
     * <code>CLICK_TO_CALL = 7;</code>
     */
    CLICK_TO_CALL(7),
    /**
     * <pre>
     * Suppots Shared Clipboard via both VAPID and sender ID.
     * </pre>
     *
     * <code>SHARED_CLIPBOARD = 8;</code>
     */
    SHARED_CLIPBOARD(8),
    ;

    /**
     * <code>UNKNOWN = 0;</code>
     */
    public static final int UNKNOWN_VALUE = 0;
    /**
     * <pre>
     * Supports Click to Call only via VAPID.
     * </pre>
     *
     * <code>CLICK_TO_CALL_VAPID = 1;</code>
     */
    public static final int CLICK_TO_CALL_VAPID_VALUE = 1;
    /**
     * <pre>
     * Supports Shared Clipboard only via VAPID.
     * </pre>
     *
     * <code>SHARED_CLIPBOARD_VAPID = 2;</code>
     */
    public static final int SHARED_CLIPBOARD_VAPID_VALUE = 2;
    /**
     * <code>SMS_FETCHER = 3;</code>
     */
    public static final int SMS_FETCHER_VALUE = 3;
    /**
     * <code>REMOTE_COPY = 4;</code>
     */
    public static final int REMOTE_COPY_VALUE = 4;
    /**
     * <code>PEER_CONNECTION = 5;</code>
     */
    public static final int PEER_CONNECTION_VALUE = 5;
    /**
     * <code>DISCOVERY = 6;</code>
     */
    public static final int DISCOVERY_VALUE = 6;
    /**
     * <pre>
     * Suppots Click to Call via both VAPID and sender ID.
     * </pre>
     *
     * <code>CLICK_TO_CALL = 7;</code>
     */
    public static final int CLICK_TO_CALL_VALUE = 7;
    /**
     * <pre>
     * Suppots Shared Clipboard via both VAPID and sender ID.
     * </pre>
     *
     * <code>SHARED_CLIPBOARD = 8;</code>
     */
    public static final int SHARED_CLIPBOARD_VALUE = 8;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnabledFeatures valueOf(int value) {
      return forNumber(value);
    }

    public static EnabledFeatures forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN;
        case 1: return CLICK_TO_CALL_VAPID;
        case 2: return SHARED_CLIPBOARD_VAPID;
        case 3: return SMS_FETCHER;
        case 4: return REMOTE_COPY;
        case 5: return PEER_CONNECTION;
        case 6: return DISCOVERY;
        case 7: return CLICK_TO_CALL;
        case 8: return SHARED_CLIPBOARD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnabledFeatures>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnabledFeatures> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnabledFeatures>() {
            public EnabledFeatures findValueByNumber(int number) {
              return EnabledFeatures.forNumber(number);
            }
          };

    private final int value;

    private EnabledFeatures(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sync_pb.SharingSpecificFields.EnabledFeatures)
  }

  private int bitField0_;
  public static final int VAPID_FCM_TOKEN_FIELD_NUMBER = 1;
  private java.lang.String vapidFcmToken_;
  /**
   * <pre>
   * FCM registration token of device subscribed using VAPID key.
   * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
   * </pre>
   *
   * <code>optional string vapid_fcm_token = 1;</code>
   */
  public boolean hasVapidFcmToken() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * FCM registration token of device subscribed using VAPID key.
   * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
   * </pre>
   *
   * <code>optional string vapid_fcm_token = 1;</code>
   */
  public java.lang.String getVapidFcmToken() {
    return vapidFcmToken_;
  }
  /**
   * <pre>
   * FCM registration token of device subscribed using VAPID key.
   * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
   * </pre>
   *
   * <code>optional string vapid_fcm_token = 1;</code>
   */
  public com.google.protobuf.ByteString
      getVapidFcmTokenBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(vapidFcmToken_);
  }
  /**
   * <pre>
   * FCM registration token of device subscribed using VAPID key.
   * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
   * </pre>
   *
   * <code>optional string vapid_fcm_token = 1;</code>
   */
  private void setVapidFcmToken(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    vapidFcmToken_ = value;
  }
  /**
   * <pre>
   * FCM registration token of device subscribed using VAPID key.
   * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
   * </pre>
   *
   * <code>optional string vapid_fcm_token = 1;</code>
   */
  private void clearVapidFcmToken() {
    bitField0_ = (bitField0_ & ~0x00000001);
    vapidFcmToken_ = getDefaultInstance().getVapidFcmToken();
  }
  /**
   * <pre>
   * FCM registration token of device subscribed using VAPID key.
   * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
   * </pre>
   *
   * <code>optional string vapid_fcm_token = 1;</code>
   */
  private void setVapidFcmTokenBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    vapidFcmToken_ = value.toStringUtf8();
  }

  public static final int VAPID_P256DH_FIELD_NUMBER = 2;
  private com.google.protobuf.ByteString vapidP256Dh_;
  /**
   * <pre>
   * Public key for message encryption [RFC8291] using VAPID key.
   * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
   * </pre>
   *
   * <code>optional bytes vapid_p256dh = 2;</code>
   */
  public boolean hasVapidP256Dh() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * Public key for message encryption [RFC8291] using VAPID key.
   * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
   * </pre>
   *
   * <code>optional bytes vapid_p256dh = 2;</code>
   */
  public com.google.protobuf.ByteString getVapidP256Dh() {
    return vapidP256Dh_;
  }
  /**
   * <pre>
   * Public key for message encryption [RFC8291] using VAPID key.
   * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
   * </pre>
   *
   * <code>optional bytes vapid_p256dh = 2;</code>
   */
  private void setVapidP256Dh(com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    vapidP256Dh_ = value;
  }
  /**
   * <pre>
   * Public key for message encryption [RFC8291] using VAPID key.
   * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
   * </pre>
   *
   * <code>optional bytes vapid_p256dh = 2;</code>
   */
  private void clearVapidP256Dh() {
    bitField0_ = (bitField0_ & ~0x00000002);
    vapidP256Dh_ = getDefaultInstance().getVapidP256Dh();
  }

  public static final int VAPID_AUTH_SECRET_FIELD_NUMBER = 3;
  private com.google.protobuf.ByteString vapidAuthSecret_;
  /**
   * <pre>
   * Auth secret for message encryption [RFC8291] using VAPID key.
   * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
   * </pre>
   *
   * <code>optional bytes vapid_auth_secret = 3;</code>
   */
  public boolean hasVapidAuthSecret() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * Auth secret for message encryption [RFC8291] using VAPID key.
   * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
   * </pre>
   *
   * <code>optional bytes vapid_auth_secret = 3;</code>
   */
  public com.google.protobuf.ByteString getVapidAuthSecret() {
    return vapidAuthSecret_;
  }
  /**
   * <pre>
   * Auth secret for message encryption [RFC8291] using VAPID key.
   * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
   * </pre>
   *
   * <code>optional bytes vapid_auth_secret = 3;</code>
   */
  private void setVapidAuthSecret(com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
    vapidAuthSecret_ = value;
  }
  /**
   * <pre>
   * Auth secret for message encryption [RFC8291] using VAPID key.
   * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
   * </pre>
   *
   * <code>optional bytes vapid_auth_secret = 3;</code>
   */
  private void clearVapidAuthSecret() {
    bitField0_ = (bitField0_ & ~0x00000004);
    vapidAuthSecret_ = getDefaultInstance().getVapidAuthSecret();
  }

  public static final int ENABLED_FEATURES_FIELD_NUMBER = 4;
  private com.google.protobuf.Internal.IntList enabledFeatures_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures> enabledFeatures_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures>() {
            public org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures convert(java.lang.Integer from) {
              org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures result = org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures.forNumber(from);
              return result == null ? org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures.UNKNOWN : result;
            }
          };
  /**
   * <pre>
   * A list of enabled Sharing features.
   * </pre>
   *
   * <code>repeated .sync_pb.SharingSpecificFields.EnabledFeatures enabled_features = 4;</code>
   */
  public java.util.List<org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures> getEnabledFeaturesList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures>(enabledFeatures_, enabledFeatures_converter_);
  }
  /**
   * <pre>
   * A list of enabled Sharing features.
   * </pre>
   *
   * <code>repeated .sync_pb.SharingSpecificFields.EnabledFeatures enabled_features = 4;</code>
   */
  public int getEnabledFeaturesCount() {
    return enabledFeatures_.size();
  }
  /**
   * <pre>
   * A list of enabled Sharing features.
   * </pre>
   *
   * <code>repeated .sync_pb.SharingSpecificFields.EnabledFeatures enabled_features = 4;</code>
   */
  public org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures getEnabledFeatures(int index) {
    return enabledFeatures_converter_.convert(enabledFeatures_.getInt(index));
  }
  private void ensureEnabledFeaturesIsMutable() {
    if (!enabledFeatures_.isModifiable()) {
      enabledFeatures_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(enabledFeatures_);
    }
  }
  /**
   * <pre>
   * A list of enabled Sharing features.
   * </pre>
   *
   * <code>repeated .sync_pb.SharingSpecificFields.EnabledFeatures enabled_features = 4;</code>
   */
  private void setEnabledFeatures(
      int index, org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureEnabledFeaturesIsMutable();
    enabledFeatures_.setInt(index, value.getNumber());
  }
  /**
   * <pre>
   * A list of enabled Sharing features.
   * </pre>
   *
   * <code>repeated .sync_pb.SharingSpecificFields.EnabledFeatures enabled_features = 4;</code>
   */
  private void addEnabledFeatures(org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureEnabledFeaturesIsMutable();
    enabledFeatures_.addInt(value.getNumber());
  }
  /**
   * <pre>
   * A list of enabled Sharing features.
   * </pre>
   *
   * <code>repeated .sync_pb.SharingSpecificFields.EnabledFeatures enabled_features = 4;</code>
   */
  private void addAllEnabledFeatures(
      java.lang.Iterable<? extends org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures> values) {
    ensureEnabledFeaturesIsMutable();
    for (org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures value : values) {
      enabledFeatures_.addInt(value.getNumber());
    }
  }
  /**
   * <pre>
   * A list of enabled Sharing features.
   * </pre>
   *
   * <code>repeated .sync_pb.SharingSpecificFields.EnabledFeatures enabled_features = 4;</code>
   */
  private void clearEnabledFeatures() {
    enabledFeatures_ = emptyIntList();
  }

  public static final int SENDER_ID_FCM_TOKEN_FIELD_NUMBER = 8;
  private java.lang.String senderIdFcmToken_;
  /**
   * <pre>
   * FCM registration token of device subscribed using Sharing sender ID.
   * </pre>
   *
   * <code>optional string sender_id_fcm_token = 8;</code>
   */
  public boolean hasSenderIdFcmToken() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * FCM registration token of device subscribed using Sharing sender ID.
   * </pre>
   *
   * <code>optional string sender_id_fcm_token = 8;</code>
   */
  public java.lang.String getSenderIdFcmToken() {
    return senderIdFcmToken_;
  }
  /**
   * <pre>
   * FCM registration token of device subscribed using Sharing sender ID.
   * </pre>
   *
   * <code>optional string sender_id_fcm_token = 8;</code>
   */
  public com.google.protobuf.ByteString
      getSenderIdFcmTokenBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(senderIdFcmToken_);
  }
  /**
   * <pre>
   * FCM registration token of device subscribed using Sharing sender ID.
   * </pre>
   *
   * <code>optional string sender_id_fcm_token = 8;</code>
   */
  private void setSenderIdFcmToken(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    senderIdFcmToken_ = value;
  }
  /**
   * <pre>
   * FCM registration token of device subscribed using Sharing sender ID.
   * </pre>
   *
   * <code>optional string sender_id_fcm_token = 8;</code>
   */
  private void clearSenderIdFcmToken() {
    bitField0_ = (bitField0_ & ~0x00000008);
    senderIdFcmToken_ = getDefaultInstance().getSenderIdFcmToken();
  }
  /**
   * <pre>
   * FCM registration token of device subscribed using Sharing sender ID.
   * </pre>
   *
   * <code>optional string sender_id_fcm_token = 8;</code>
   */
  private void setSenderIdFcmTokenBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    senderIdFcmToken_ = value.toStringUtf8();
  }

  public static final int SENDER_ID_P256DH_FIELD_NUMBER = 9;
  private com.google.protobuf.ByteString senderIdP256Dh_;
  /**
   * <pre>
   * Public key for message encryption [RFC8291] using Sharing sender ID.
   * </pre>
   *
   * <code>optional bytes sender_id_p256dh = 9;</code>
   */
  public boolean hasSenderIdP256Dh() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <pre>
   * Public key for message encryption [RFC8291] using Sharing sender ID.
   * </pre>
   *
   * <code>optional bytes sender_id_p256dh = 9;</code>
   */
  public com.google.protobuf.ByteString getSenderIdP256Dh() {
    return senderIdP256Dh_;
  }
  /**
   * <pre>
   * Public key for message encryption [RFC8291] using Sharing sender ID.
   * </pre>
   *
   * <code>optional bytes sender_id_p256dh = 9;</code>
   */
  private void setSenderIdP256Dh(com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
    senderIdP256Dh_ = value;
  }
  /**
   * <pre>
   * Public key for message encryption [RFC8291] using Sharing sender ID.
   * </pre>
   *
   * <code>optional bytes sender_id_p256dh = 9;</code>
   */
  private void clearSenderIdP256Dh() {
    bitField0_ = (bitField0_ & ~0x00000010);
    senderIdP256Dh_ = getDefaultInstance().getSenderIdP256Dh();
  }

  public static final int SENDER_ID_AUTH_SECRET_FIELD_NUMBER = 10;
  private com.google.protobuf.ByteString senderIdAuthSecret_;
  /**
   * <pre>
   * Auth secret for message encryption [RFC8291] using Sharing sender ID.
   * </pre>
   *
   * <code>optional bytes sender_id_auth_secret = 10;</code>
   */
  public boolean hasSenderIdAuthSecret() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * Auth secret for message encryption [RFC8291] using Sharing sender ID.
   * </pre>
   *
   * <code>optional bytes sender_id_auth_secret = 10;</code>
   */
  public com.google.protobuf.ByteString getSenderIdAuthSecret() {
    return senderIdAuthSecret_;
  }
  /**
   * <pre>
   * Auth secret for message encryption [RFC8291] using Sharing sender ID.
   * </pre>
   *
   * <code>optional bytes sender_id_auth_secret = 10;</code>
   */
  private void setSenderIdAuthSecret(com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
    senderIdAuthSecret_ = value;
  }
  /**
   * <pre>
   * Auth secret for message encryption [RFC8291] using Sharing sender ID.
   * </pre>
   *
   * <code>optional bytes sender_id_auth_secret = 10;</code>
   */
  private void clearSenderIdAuthSecret() {
    bitField0_ = (bitField0_ & ~0x00000020);
    senderIdAuthSecret_ = getDefaultInstance().getSenderIdAuthSecret();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeString(1, getVapidFcmToken());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeBytes(2, vapidP256Dh_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeBytes(3, vapidAuthSecret_);
    }
    for (int i = 0; i < enabledFeatures_.size(); i++) {
      output.writeEnum(4, enabledFeatures_.getInt(i));
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeString(8, getSenderIdFcmToken());
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeBytes(9, senderIdP256Dh_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeBytes(10, senderIdAuthSecret_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getVapidFcmToken());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(2, vapidP256Dh_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(3, vapidAuthSecret_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < enabledFeatures_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(enabledFeatures_.getInt(i));
      }
      size += dataSize;
      size += 1 * enabledFeatures_.size();
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(8, getSenderIdFcmToken());
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(9, senderIdP256Dh_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(10, senderIdAuthSecret_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.SharingSpecificFields parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.SharingSpecificFields parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SharingSpecificFields parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.SharingSpecificFields parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SharingSpecificFields parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SharingSpecificFields parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SharingSpecificFields parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SharingSpecificFields parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SharingSpecificFields parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SharingSpecificFields parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.SharingSpecificFields prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Device specific information for Sharing feature. Used to send end-to-end
   * encrypted message through FCM to other devices.
   * </pre>
   *
   * Protobuf type {@code sync_pb.SharingSpecificFields}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.SharingSpecificFields, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.SharingSpecificFields)
      org.chromium.components.sync.protocol.SharingSpecificFieldsOrBuilder {
    // Construct using org.chromium.components.sync.protocol.SharingSpecificFields.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * FCM registration token of device subscribed using VAPID key.
     * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
     * </pre>
     *
     * <code>optional string vapid_fcm_token = 1;</code>
     */
    public boolean hasVapidFcmToken() {
      return instance.hasVapidFcmToken();
    }
    /**
     * <pre>
     * FCM registration token of device subscribed using VAPID key.
     * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
     * </pre>
     *
     * <code>optional string vapid_fcm_token = 1;</code>
     */
    public java.lang.String getVapidFcmToken() {
      return instance.getVapidFcmToken();
    }
    /**
     * <pre>
     * FCM registration token of device subscribed using VAPID key.
     * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
     * </pre>
     *
     * <code>optional string vapid_fcm_token = 1;</code>
     */
    public com.google.protobuf.ByteString
        getVapidFcmTokenBytes() {
      return instance.getVapidFcmTokenBytes();
    }
    /**
     * <pre>
     * FCM registration token of device subscribed using VAPID key.
     * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
     * </pre>
     *
     * <code>optional string vapid_fcm_token = 1;</code>
     */
    public Builder setVapidFcmToken(
        java.lang.String value) {
      copyOnWrite();
      instance.setVapidFcmToken(value);
      return this;
    }
    /**
     * <pre>
     * FCM registration token of device subscribed using VAPID key.
     * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
     * </pre>
     *
     * <code>optional string vapid_fcm_token = 1;</code>
     */
    public Builder clearVapidFcmToken() {
      copyOnWrite();
      instance.clearVapidFcmToken();
      return this;
    }
    /**
     * <pre>
     * FCM registration token of device subscribed using VAPID key.
     * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
     * </pre>
     *
     * <code>optional string vapid_fcm_token = 1;</code>
     */
    public Builder setVapidFcmTokenBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setVapidFcmTokenBytes(value);
      return this;
    }

    /**
     * <pre>
     * Public key for message encryption [RFC8291] using VAPID key.
     * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
     * </pre>
     *
     * <code>optional bytes vapid_p256dh = 2;</code>
     */
    public boolean hasVapidP256Dh() {
      return instance.hasVapidP256Dh();
    }
    /**
     * <pre>
     * Public key for message encryption [RFC8291] using VAPID key.
     * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
     * </pre>
     *
     * <code>optional bytes vapid_p256dh = 2;</code>
     */
    public com.google.protobuf.ByteString getVapidP256Dh() {
      return instance.getVapidP256Dh();
    }
    /**
     * <pre>
     * Public key for message encryption [RFC8291] using VAPID key.
     * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
     * </pre>
     *
     * <code>optional bytes vapid_p256dh = 2;</code>
     */
    public Builder setVapidP256Dh(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setVapidP256Dh(value);
      return this;
    }
    /**
     * <pre>
     * Public key for message encryption [RFC8291] using VAPID key.
     * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
     * </pre>
     *
     * <code>optional bytes vapid_p256dh = 2;</code>
     */
    public Builder clearVapidP256Dh() {
      copyOnWrite();
      instance.clearVapidP256Dh();
      return this;
    }

    /**
     * <pre>
     * Auth secret for message encryption [RFC8291] using VAPID key.
     * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
     * </pre>
     *
     * <code>optional bytes vapid_auth_secret = 3;</code>
     */
    public boolean hasVapidAuthSecret() {
      return instance.hasVapidAuthSecret();
    }
    /**
     * <pre>
     * Auth secret for message encryption [RFC8291] using VAPID key.
     * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
     * </pre>
     *
     * <code>optional bytes vapid_auth_secret = 3;</code>
     */
    public com.google.protobuf.ByteString getVapidAuthSecret() {
      return instance.getVapidAuthSecret();
    }
    /**
     * <pre>
     * Auth secret for message encryption [RFC8291] using VAPID key.
     * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
     * </pre>
     *
     * <code>optional bytes vapid_auth_secret = 3;</code>
     */
    public Builder setVapidAuthSecret(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setVapidAuthSecret(value);
      return this;
    }
    /**
     * <pre>
     * Auth secret for message encryption [RFC8291] using VAPID key.
     * TODO(crbug.com/1012226): Deprecate when VAPID migration is over.
     * </pre>
     *
     * <code>optional bytes vapid_auth_secret = 3;</code>
     */
    public Builder clearVapidAuthSecret() {
      copyOnWrite();
      instance.clearVapidAuthSecret();
      return this;
    }

    /**
     * <pre>
     * A list of enabled Sharing features.
     * </pre>
     *
     * <code>repeated .sync_pb.SharingSpecificFields.EnabledFeatures enabled_features = 4;</code>
     */
    public java.util.List<org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures> getEnabledFeaturesList() {
      return instance.getEnabledFeaturesList();
    }
    /**
     * <pre>
     * A list of enabled Sharing features.
     * </pre>
     *
     * <code>repeated .sync_pb.SharingSpecificFields.EnabledFeatures enabled_features = 4;</code>
     */
    public int getEnabledFeaturesCount() {
      return instance.getEnabledFeaturesCount();
    }
    /**
     * <pre>
     * A list of enabled Sharing features.
     * </pre>
     *
     * <code>repeated .sync_pb.SharingSpecificFields.EnabledFeatures enabled_features = 4;</code>
     */
    public org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures getEnabledFeatures(int index) {
      return instance.getEnabledFeatures(index);
    }
    /**
     * <pre>
     * A list of enabled Sharing features.
     * </pre>
     *
     * <code>repeated .sync_pb.SharingSpecificFields.EnabledFeatures enabled_features = 4;</code>
     */
    public Builder setEnabledFeatures(
        int index, org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures value) {
      copyOnWrite();
      instance.setEnabledFeatures(index, value);
      return this;
    }
    /**
     * <pre>
     * A list of enabled Sharing features.
     * </pre>
     *
     * <code>repeated .sync_pb.SharingSpecificFields.EnabledFeatures enabled_features = 4;</code>
     */
    public Builder addEnabledFeatures(org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures value) {
      copyOnWrite();
      instance.addEnabledFeatures(value);
      return this;
    }
    /**
     * <pre>
     * A list of enabled Sharing features.
     * </pre>
     *
     * <code>repeated .sync_pb.SharingSpecificFields.EnabledFeatures enabled_features = 4;</code>
     */
    public Builder addAllEnabledFeatures(
        java.lang.Iterable<? extends org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures> values) {
      copyOnWrite();
      instance.addAllEnabledFeatures(values);  return this;
    }
    /**
     * <pre>
     * A list of enabled Sharing features.
     * </pre>
     *
     * <code>repeated .sync_pb.SharingSpecificFields.EnabledFeatures enabled_features = 4;</code>
     */
    public Builder clearEnabledFeatures() {
      copyOnWrite();
      instance.clearEnabledFeatures();
      return this;
    }

    /**
     * <pre>
     * FCM registration token of device subscribed using Sharing sender ID.
     * </pre>
     *
     * <code>optional string sender_id_fcm_token = 8;</code>
     */
    public boolean hasSenderIdFcmToken() {
      return instance.hasSenderIdFcmToken();
    }
    /**
     * <pre>
     * FCM registration token of device subscribed using Sharing sender ID.
     * </pre>
     *
     * <code>optional string sender_id_fcm_token = 8;</code>
     */
    public java.lang.String getSenderIdFcmToken() {
      return instance.getSenderIdFcmToken();
    }
    /**
     * <pre>
     * FCM registration token of device subscribed using Sharing sender ID.
     * </pre>
     *
     * <code>optional string sender_id_fcm_token = 8;</code>
     */
    public com.google.protobuf.ByteString
        getSenderIdFcmTokenBytes() {
      return instance.getSenderIdFcmTokenBytes();
    }
    /**
     * <pre>
     * FCM registration token of device subscribed using Sharing sender ID.
     * </pre>
     *
     * <code>optional string sender_id_fcm_token = 8;</code>
     */
    public Builder setSenderIdFcmToken(
        java.lang.String value) {
      copyOnWrite();
      instance.setSenderIdFcmToken(value);
      return this;
    }
    /**
     * <pre>
     * FCM registration token of device subscribed using Sharing sender ID.
     * </pre>
     *
     * <code>optional string sender_id_fcm_token = 8;</code>
     */
    public Builder clearSenderIdFcmToken() {
      copyOnWrite();
      instance.clearSenderIdFcmToken();
      return this;
    }
    /**
     * <pre>
     * FCM registration token of device subscribed using Sharing sender ID.
     * </pre>
     *
     * <code>optional string sender_id_fcm_token = 8;</code>
     */
    public Builder setSenderIdFcmTokenBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setSenderIdFcmTokenBytes(value);
      return this;
    }

    /**
     * <pre>
     * Public key for message encryption [RFC8291] using Sharing sender ID.
     * </pre>
     *
     * <code>optional bytes sender_id_p256dh = 9;</code>
     */
    public boolean hasSenderIdP256Dh() {
      return instance.hasSenderIdP256Dh();
    }
    /**
     * <pre>
     * Public key for message encryption [RFC8291] using Sharing sender ID.
     * </pre>
     *
     * <code>optional bytes sender_id_p256dh = 9;</code>
     */
    public com.google.protobuf.ByteString getSenderIdP256Dh() {
      return instance.getSenderIdP256Dh();
    }
    /**
     * <pre>
     * Public key for message encryption [RFC8291] using Sharing sender ID.
     * </pre>
     *
     * <code>optional bytes sender_id_p256dh = 9;</code>
     */
    public Builder setSenderIdP256Dh(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setSenderIdP256Dh(value);
      return this;
    }
    /**
     * <pre>
     * Public key for message encryption [RFC8291] using Sharing sender ID.
     * </pre>
     *
     * <code>optional bytes sender_id_p256dh = 9;</code>
     */
    public Builder clearSenderIdP256Dh() {
      copyOnWrite();
      instance.clearSenderIdP256Dh();
      return this;
    }

    /**
     * <pre>
     * Auth secret for message encryption [RFC8291] using Sharing sender ID.
     * </pre>
     *
     * <code>optional bytes sender_id_auth_secret = 10;</code>
     */
    public boolean hasSenderIdAuthSecret() {
      return instance.hasSenderIdAuthSecret();
    }
    /**
     * <pre>
     * Auth secret for message encryption [RFC8291] using Sharing sender ID.
     * </pre>
     *
     * <code>optional bytes sender_id_auth_secret = 10;</code>
     */
    public com.google.protobuf.ByteString getSenderIdAuthSecret() {
      return instance.getSenderIdAuthSecret();
    }
    /**
     * <pre>
     * Auth secret for message encryption [RFC8291] using Sharing sender ID.
     * </pre>
     *
     * <code>optional bytes sender_id_auth_secret = 10;</code>
     */
    public Builder setSenderIdAuthSecret(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setSenderIdAuthSecret(value);
      return this;
    }
    /**
     * <pre>
     * Auth secret for message encryption [RFC8291] using Sharing sender ID.
     * </pre>
     *
     * <code>optional bytes sender_id_auth_secret = 10;</code>
     */
    public Builder clearSenderIdAuthSecret() {
      copyOnWrite();
      instance.clearSenderIdAuthSecret();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.SharingSpecificFields)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.SharingSpecificFields();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        enabledFeatures_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.SharingSpecificFields other = (org.chromium.components.sync.protocol.SharingSpecificFields) arg1;
        vapidFcmToken_ = visitor.visitString(
            hasVapidFcmToken(), vapidFcmToken_,
            other.hasVapidFcmToken(), other.vapidFcmToken_);
        vapidP256Dh_ = visitor.visitByteString(
            hasVapidP256Dh(), vapidP256Dh_,
            other.hasVapidP256Dh(), other.vapidP256Dh_);
        vapidAuthSecret_ = visitor.visitByteString(
            hasVapidAuthSecret(), vapidAuthSecret_,
            other.hasVapidAuthSecret(), other.vapidAuthSecret_);
        enabledFeatures_= visitor.visitIntList(enabledFeatures_, other.enabledFeatures_);
        senderIdFcmToken_ = visitor.visitString(
            hasSenderIdFcmToken(), senderIdFcmToken_,
            other.hasSenderIdFcmToken(), other.senderIdFcmToken_);
        senderIdP256Dh_ = visitor.visitByteString(
            hasSenderIdP256Dh(), senderIdP256Dh_,
            other.hasSenderIdP256Dh(), other.senderIdP256Dh_);
        senderIdAuthSecret_ = visitor.visitByteString(
            hasSenderIdAuthSecret(), senderIdAuthSecret_,
            other.hasSenderIdAuthSecret(), other.senderIdAuthSecret_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                bitField0_ |= 0x00000001;
                vapidFcmToken_ = s;
                break;
              }
              case 18: {
                bitField0_ |= 0x00000002;
                vapidP256Dh_ = input.readBytes();
                break;
              }
              case 26: {
                bitField0_ |= 0x00000004;
                vapidAuthSecret_ = input.readBytes();
                break;
              }
              case 32: {
                if (!enabledFeatures_.isModifiable()) {
                  enabledFeatures_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(enabledFeatures_);
                }
                int rawValue = input.readEnum();
                org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures value = org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(4, rawValue);
                } else {
                  enabledFeatures_.addInt(rawValue);
                }
                break;
              }
              case 34: {
                if (!enabledFeatures_.isModifiable()) {
                  enabledFeatures_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(enabledFeatures_);
                }
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while(input.getBytesUntilLimit() > 0) {
                  int rawValue = input.readEnum();
                  org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures value = org.chromium.components.sync.protocol.SharingSpecificFields.EnabledFeatures.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(4, rawValue);
                  } else {
                    enabledFeatures_.addInt(rawValue);
                  }
                }
                input.popLimit(oldLimit);
                break;
              }
              case 66: {
                String s = input.readString();
                bitField0_ |= 0x00000008;
                senderIdFcmToken_ = s;
                break;
              }
              case 74: {
                bitField0_ |= 0x00000010;
                senderIdP256Dh_ = input.readBytes();
                break;
              }
              case 82: {
                bitField0_ |= 0x00000020;
                senderIdAuthSecret_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.SharingSpecificFields.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.SharingSpecificFields)
  private static final org.chromium.components.sync.protocol.SharingSpecificFields DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new SharingSpecificFields();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.SharingSpecificFields getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SharingSpecificFields> PARSER;

  public static com.google.protobuf.Parser<SharingSpecificFields> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

