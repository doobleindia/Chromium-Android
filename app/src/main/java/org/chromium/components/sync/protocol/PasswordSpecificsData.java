// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: password_specifics.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * All the strings are encoded with UTF-8. URLs are encoded in Punycode.
 * </pre>
 *
 * Protobuf type {@code sync_pb.PasswordSpecificsData}
 */
public  final class PasswordSpecificsData extends
    com.google.protobuf.GeneratedMessageLite<
        PasswordSpecificsData, PasswordSpecificsData.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.PasswordSpecificsData)
    PasswordSpecificsDataOrBuilder {
  private PasswordSpecificsData() {
    signonRealm_ = "";
    origin_ = "";
    action_ = "";
    usernameElement_ = "";
    usernameValue_ = "";
    passwordElement_ = "";
    passwordValue_ = "";
    displayName_ = "";
    avatarUrl_ = "";
    federationUrl_ = "";
  }
  private int bitField0_;
  public static final int SCHEME_FIELD_NUMBER = 1;
  private int scheme_;
  /**
   * <pre>
   * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
   * android credential or a password saved through Credential Manager API
   * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
   * SCHEME_BASIC(1), basic access http authentication.
   * SCHEME_DIGEST(2), digest access authentication.
   * SCHEME_OTHER(3), another access authentication.
   * </pre>
   *
   * <code>optional int32 scheme = 1;</code>
   */
  public boolean hasScheme() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
   * android credential or a password saved through Credential Manager API
   * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
   * SCHEME_BASIC(1), basic access http authentication.
   * SCHEME_DIGEST(2), digest access authentication.
   * SCHEME_OTHER(3), another access authentication.
   * </pre>
   *
   * <code>optional int32 scheme = 1;</code>
   */
  public int getScheme() {
    return scheme_;
  }
  /**
   * <pre>
   * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
   * android credential or a password saved through Credential Manager API
   * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
   * SCHEME_BASIC(1), basic access http authentication.
   * SCHEME_DIGEST(2), digest access authentication.
   * SCHEME_OTHER(3), another access authentication.
   * </pre>
   *
   * <code>optional int32 scheme = 1;</code>
   */
  private void setScheme(int value) {
    bitField0_ |= 0x00000001;
    scheme_ = value;
  }
  /**
   * <pre>
   * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
   * android credential or a password saved through Credential Manager API
   * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
   * SCHEME_BASIC(1), basic access http authentication.
   * SCHEME_DIGEST(2), digest access authentication.
   * SCHEME_OTHER(3), another access authentication.
   * </pre>
   *
   * <code>optional int32 scheme = 1;</code>
   */
  private void clearScheme() {
    bitField0_ = (bitField0_ & ~0x00000001);
    scheme_ = 0;
  }

  public static final int SIGNON_REALM_FIELD_NUMBER = 2;
  private java.lang.String signonRealm_;
  /**
   * <pre>
   * For parsed web forms and normal passwords saved through Credential Manager
   * API: url-scheme://url-host[:url-port]/
   * For Android apps (local + federated):
   *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * where the hash is base64 encoded SHA512 of the app's public certificate.
   * For federated credentials:
   *     "federation://" + origin_host + "/" + federation_host
   * For proxy auth: proxy-host/auth-realm
   * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
   * </pre>
   *
   * <code>optional string signon_realm = 2;</code>
   */
  public boolean hasSignonRealm() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * For parsed web forms and normal passwords saved through Credential Manager
   * API: url-scheme://url-host[:url-port]/
   * For Android apps (local + federated):
   *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * where the hash is base64 encoded SHA512 of the app's public certificate.
   * For federated credentials:
   *     "federation://" + origin_host + "/" + federation_host
   * For proxy auth: proxy-host/auth-realm
   * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
   * </pre>
   *
   * <code>optional string signon_realm = 2;</code>
   */
  public java.lang.String getSignonRealm() {
    return signonRealm_;
  }
  /**
   * <pre>
   * For parsed web forms and normal passwords saved through Credential Manager
   * API: url-scheme://url-host[:url-port]/
   * For Android apps (local + federated):
   *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * where the hash is base64 encoded SHA512 of the app's public certificate.
   * For federated credentials:
   *     "federation://" + origin_host + "/" + federation_host
   * For proxy auth: proxy-host/auth-realm
   * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
   * </pre>
   *
   * <code>optional string signon_realm = 2;</code>
   */
  public com.google.protobuf.ByteString
      getSignonRealmBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(signonRealm_);
  }
  /**
   * <pre>
   * For parsed web forms and normal passwords saved through Credential Manager
   * API: url-scheme://url-host[:url-port]/
   * For Android apps (local + federated):
   *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * where the hash is base64 encoded SHA512 of the app's public certificate.
   * For federated credentials:
   *     "federation://" + origin_host + "/" + federation_host
   * For proxy auth: proxy-host/auth-realm
   * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
   * </pre>
   *
   * <code>optional string signon_realm = 2;</code>
   */
  private void setSignonRealm(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    signonRealm_ = value;
  }
  /**
   * <pre>
   * For parsed web forms and normal passwords saved through Credential Manager
   * API: url-scheme://url-host[:url-port]/
   * For Android apps (local + federated):
   *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * where the hash is base64 encoded SHA512 of the app's public certificate.
   * For federated credentials:
   *     "federation://" + origin_host + "/" + federation_host
   * For proxy auth: proxy-host/auth-realm
   * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
   * </pre>
   *
   * <code>optional string signon_realm = 2;</code>
   */
  private void clearSignonRealm() {
    bitField0_ = (bitField0_ & ~0x00000002);
    signonRealm_ = getDefaultInstance().getSignonRealm();
  }
  /**
   * <pre>
   * For parsed web forms and normal passwords saved through Credential Manager
   * API: url-scheme://url-host[:url-port]/
   * For Android apps (local + federated):
   *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * where the hash is base64 encoded SHA512 of the app's public certificate.
   * For federated credentials:
   *     "federation://" + origin_host + "/" + federation_host
   * For proxy auth: proxy-host/auth-realm
   * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
   * </pre>
   *
   * <code>optional string signon_realm = 2;</code>
   */
  private void setSignonRealmBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    signonRealm_ = value.toStringUtf8();
  }

  public static final int ORIGIN_FIELD_NUMBER = 3;
  private java.lang.String origin_;
  /**
   * <pre>
   * For parsed web forms and Credential Manager API:
   *     url-scheme://url-host[:url-port]/path
   * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string origin = 3;</code>
   */
  public boolean hasOrigin() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * For parsed web forms and Credential Manager API:
   *     url-scheme://url-host[:url-port]/path
   * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string origin = 3;</code>
   */
  public java.lang.String getOrigin() {
    return origin_;
  }
  /**
   * <pre>
   * For parsed web forms and Credential Manager API:
   *     url-scheme://url-host[:url-port]/path
   * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string origin = 3;</code>
   */
  public com.google.protobuf.ByteString
      getOriginBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(origin_);
  }
  /**
   * <pre>
   * For parsed web forms and Credential Manager API:
   *     url-scheme://url-host[:url-port]/path
   * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string origin = 3;</code>
   */
  private void setOrigin(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
    origin_ = value;
  }
  /**
   * <pre>
   * For parsed web forms and Credential Manager API:
   *     url-scheme://url-host[:url-port]/path
   * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string origin = 3;</code>
   */
  private void clearOrigin() {
    bitField0_ = (bitField0_ & ~0x00000004);
    origin_ = getDefaultInstance().getOrigin();
  }
  /**
   * <pre>
   * For parsed web forms and Credential Manager API:
   *     url-scheme://url-host[:url-port]/path
   * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string origin = 3;</code>
   */
  private void setOriginBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
    origin_ = value.toStringUtf8();
  }

  public static final int ACTION_FIELD_NUMBER = 4;
  private java.lang.String action_;
  /**
   * <pre>
   * Only for web-parsed forms - the action target of the form:
   *     url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string action = 4;</code>
   */
  public boolean hasAction() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * Only for web-parsed forms - the action target of the form:
   *     url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string action = 4;</code>
   */
  public java.lang.String getAction() {
    return action_;
  }
  /**
   * <pre>
   * Only for web-parsed forms - the action target of the form:
   *     url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string action = 4;</code>
   */
  public com.google.protobuf.ByteString
      getActionBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(action_);
  }
  /**
   * <pre>
   * Only for web-parsed forms - the action target of the form:
   *     url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string action = 4;</code>
   */
  private void setAction(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    action_ = value;
  }
  /**
   * <pre>
   * Only for web-parsed forms - the action target of the form:
   *     url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string action = 4;</code>
   */
  private void clearAction() {
    bitField0_ = (bitField0_ & ~0x00000008);
    action_ = getDefaultInstance().getAction();
  }
  /**
   * <pre>
   * Only for web-parsed forms - the action target of the form:
   *     url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string action = 4;</code>
   */
  private void setActionBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    action_ = value.toStringUtf8();
  }

  public static final int USERNAME_ELEMENT_FIELD_NUMBER = 5;
  private java.lang.String usernameElement_;
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing username.
   * </pre>
   *
   * <code>optional string username_element = 5;</code>
   */
  public boolean hasUsernameElement() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing username.
   * </pre>
   *
   * <code>optional string username_element = 5;</code>
   */
  public java.lang.String getUsernameElement() {
    return usernameElement_;
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing username.
   * </pre>
   *
   * <code>optional string username_element = 5;</code>
   */
  public com.google.protobuf.ByteString
      getUsernameElementBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(usernameElement_);
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing username.
   * </pre>
   *
   * <code>optional string username_element = 5;</code>
   */
  private void setUsernameElement(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
    usernameElement_ = value;
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing username.
   * </pre>
   *
   * <code>optional string username_element = 5;</code>
   */
  private void clearUsernameElement() {
    bitField0_ = (bitField0_ & ~0x00000010);
    usernameElement_ = getDefaultInstance().getUsernameElement();
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing username.
   * </pre>
   *
   * <code>optional string username_element = 5;</code>
   */
  private void setUsernameElementBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
    usernameElement_ = value.toStringUtf8();
  }

  public static final int USERNAME_VALUE_FIELD_NUMBER = 6;
  private java.lang.String usernameValue_;
  /**
   * <pre>
   * For all: the username.
   * For blacklisted forms: &lt;empty&gt;.
   * </pre>
   *
   * <code>optional string username_value = 6;</code>
   */
  public boolean hasUsernameValue() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * For all: the username.
   * For blacklisted forms: &lt;empty&gt;.
   * </pre>
   *
   * <code>optional string username_value = 6;</code>
   */
  public java.lang.String getUsernameValue() {
    return usernameValue_;
  }
  /**
   * <pre>
   * For all: the username.
   * For blacklisted forms: &lt;empty&gt;.
   * </pre>
   *
   * <code>optional string username_value = 6;</code>
   */
  public com.google.protobuf.ByteString
      getUsernameValueBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(usernameValue_);
  }
  /**
   * <pre>
   * For all: the username.
   * For blacklisted forms: &lt;empty&gt;.
   * </pre>
   *
   * <code>optional string username_value = 6;</code>
   */
  private void setUsernameValue(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
    usernameValue_ = value;
  }
  /**
   * <pre>
   * For all: the username.
   * For blacklisted forms: &lt;empty&gt;.
   * </pre>
   *
   * <code>optional string username_value = 6;</code>
   */
  private void clearUsernameValue() {
    bitField0_ = (bitField0_ & ~0x00000020);
    usernameValue_ = getDefaultInstance().getUsernameValue();
  }
  /**
   * <pre>
   * For all: the username.
   * For blacklisted forms: &lt;empty&gt;.
   * </pre>
   *
   * <code>optional string username_value = 6;</code>
   */
  private void setUsernameValueBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
    usernameValue_ = value.toStringUtf8();
  }

  public static final int PASSWORD_ELEMENT_FIELD_NUMBER = 7;
  private java.lang.String passwordElement_;
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing password.
   * </pre>
   *
   * <code>optional string password_element = 7;</code>
   */
  public boolean hasPasswordElement() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing password.
   * </pre>
   *
   * <code>optional string password_element = 7;</code>
   */
  public java.lang.String getPasswordElement() {
    return passwordElement_;
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing password.
   * </pre>
   *
   * <code>optional string password_element = 7;</code>
   */
  public com.google.protobuf.ByteString
      getPasswordElementBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(passwordElement_);
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing password.
   * </pre>
   *
   * <code>optional string password_element = 7;</code>
   */
  private void setPasswordElement(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
    passwordElement_ = value;
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing password.
   * </pre>
   *
   * <code>optional string password_element = 7;</code>
   */
  private void clearPasswordElement() {
    bitField0_ = (bitField0_ & ~0x00000040);
    passwordElement_ = getDefaultInstance().getPasswordElement();
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing password.
   * </pre>
   *
   * <code>optional string password_element = 7;</code>
   */
  private void setPasswordElementBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
    passwordElement_ = value.toStringUtf8();
  }

  public static final int PASSWORD_VALUE_FIELD_NUMBER = 8;
  private java.lang.String passwordValue_;
  /**
   * <pre>
   * For all: the password.
   * For federated logins and blacklisted forms: &lt;empty&gt;
   * </pre>
   *
   * <code>optional string password_value = 8;</code>
   */
  public boolean hasPasswordValue() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <pre>
   * For all: the password.
   * For federated logins and blacklisted forms: &lt;empty&gt;
   * </pre>
   *
   * <code>optional string password_value = 8;</code>
   */
  public java.lang.String getPasswordValue() {
    return passwordValue_;
  }
  /**
   * <pre>
   * For all: the password.
   * For federated logins and blacklisted forms: &lt;empty&gt;
   * </pre>
   *
   * <code>optional string password_value = 8;</code>
   */
  public com.google.protobuf.ByteString
      getPasswordValueBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(passwordValue_);
  }
  /**
   * <pre>
   * For all: the password.
   * For federated logins and blacklisted forms: &lt;empty&gt;
   * </pre>
   *
   * <code>optional string password_value = 8;</code>
   */
  private void setPasswordValue(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
    passwordValue_ = value;
  }
  /**
   * <pre>
   * For all: the password.
   * For federated logins and blacklisted forms: &lt;empty&gt;
   * </pre>
   *
   * <code>optional string password_value = 8;</code>
   */
  private void clearPasswordValue() {
    bitField0_ = (bitField0_ & ~0x00000080);
    passwordValue_ = getDefaultInstance().getPasswordValue();
  }
  /**
   * <pre>
   * For all: the password.
   * For federated logins and blacklisted forms: &lt;empty&gt;
   * </pre>
   *
   * <code>optional string password_value = 8;</code>
   */
  private void setPasswordValueBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
    passwordValue_ = value.toStringUtf8();
  }

  public static final int SSL_VALID_FIELD_NUMBER = 9;
  private boolean sslValid_;
  /**
   * <pre>
   * Deprecated: http://crbug.com/413020
   * True if the credential was saved for a HTTPS session with a valid SSL cert.
   * Ignored for Android apps.
   * </pre>
   *
   * <code>optional bool ssl_valid = 9;</code>
   */
  public boolean hasSslValid() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <pre>
   * Deprecated: http://crbug.com/413020
   * True if the credential was saved for a HTTPS session with a valid SSL cert.
   * Ignored for Android apps.
   * </pre>
   *
   * <code>optional bool ssl_valid = 9;</code>
   */
  public boolean getSslValid() {
    return sslValid_;
  }
  /**
   * <pre>
   * Deprecated: http://crbug.com/413020
   * True if the credential was saved for a HTTPS session with a valid SSL cert.
   * Ignored for Android apps.
   * </pre>
   *
   * <code>optional bool ssl_valid = 9;</code>
   */
  private void setSslValid(boolean value) {
    bitField0_ |= 0x00000100;
    sslValid_ = value;
  }
  /**
   * <pre>
   * Deprecated: http://crbug.com/413020
   * True if the credential was saved for a HTTPS session with a valid SSL cert.
   * Ignored for Android apps.
   * </pre>
   *
   * <code>optional bool ssl_valid = 9;</code>
   */
  private void clearSslValid() {
    bitField0_ = (bitField0_ & ~0x00000100);
    sslValid_ = false;
  }

  public static final int PREFERRED_FIELD_NUMBER = 10;
  private boolean preferred_;
  /**
   * <pre>
   * True for the last credential used for logging in on a given site.
   * Deprecated in M81.
   * </pre>
   *
   * <code>optional bool preferred = 10;</code>
   */
  public boolean hasPreferred() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <pre>
   * True for the last credential used for logging in on a given site.
   * Deprecated in M81.
   * </pre>
   *
   * <code>optional bool preferred = 10;</code>
   */
  public boolean getPreferred() {
    return preferred_;
  }
  /**
   * <pre>
   * True for the last credential used for logging in on a given site.
   * Deprecated in M81.
   * </pre>
   *
   * <code>optional bool preferred = 10;</code>
   */
  private void setPreferred(boolean value) {
    bitField0_ |= 0x00000200;
    preferred_ = value;
  }
  /**
   * <pre>
   * True for the last credential used for logging in on a given site.
   * Deprecated in M81.
   * </pre>
   *
   * <code>optional bool preferred = 10;</code>
   */
  private void clearPreferred() {
    bitField0_ = (bitField0_ & ~0x00000200);
    preferred_ = false;
  }

  public static final int DATE_CREATED_FIELD_NUMBER = 11;
  private long dateCreated_;
  /**
   * <pre>
   * Time when the credential was created. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_created = 11;</code>
   */
  public boolean hasDateCreated() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <pre>
   * Time when the credential was created. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_created = 11;</code>
   */
  public long getDateCreated() {
    return dateCreated_;
  }
  /**
   * <pre>
   * Time when the credential was created. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_created = 11;</code>
   */
  private void setDateCreated(long value) {
    bitField0_ |= 0x00000400;
    dateCreated_ = value;
  }
  /**
   * <pre>
   * Time when the credential was created. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_created = 11;</code>
   */
  private void clearDateCreated() {
    bitField0_ = (bitField0_ & ~0x00000400);
    dateCreated_ = 0L;
  }

  public static final int BLACKLISTED_FIELD_NUMBER = 12;
  private boolean blacklisted_;
  /**
   * <pre>
   * True, if user chose permanently not to save the credentials for the form.
   * </pre>
   *
   * <code>optional bool blacklisted = 12;</code>
   */
  public boolean hasBlacklisted() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <pre>
   * True, if user chose permanently not to save the credentials for the form.
   * </pre>
   *
   * <code>optional bool blacklisted = 12;</code>
   */
  public boolean getBlacklisted() {
    return blacklisted_;
  }
  /**
   * <pre>
   * True, if user chose permanently not to save the credentials for the form.
   * </pre>
   *
   * <code>optional bool blacklisted = 12;</code>
   */
  private void setBlacklisted(boolean value) {
    bitField0_ |= 0x00000800;
    blacklisted_ = value;
  }
  /**
   * <pre>
   * True, if user chose permanently not to save the credentials for the form.
   * </pre>
   *
   * <code>optional bool blacklisted = 12;</code>
   */
  private void clearBlacklisted() {
    bitField0_ = (bitField0_ & ~0x00000800);
    blacklisted_ = false;
  }

  public static final int TYPE_FIELD_NUMBER = 13;
  private int type_;
  /**
   * <pre>
   * TYPE_MANUAL(0), user manually filled the username and the password.
   * TYPE_GENERATED(1), the credential was auto generated.
   * </pre>
   *
   * <code>optional int32 type = 13;</code>
   */
  public boolean hasType() {
    return ((bitField0_ & 0x00001000) == 0x00001000);
  }
  /**
   * <pre>
   * TYPE_MANUAL(0), user manually filled the username and the password.
   * TYPE_GENERATED(1), the credential was auto generated.
   * </pre>
   *
   * <code>optional int32 type = 13;</code>
   */
  public int getType() {
    return type_;
  }
  /**
   * <pre>
   * TYPE_MANUAL(0), user manually filled the username and the password.
   * TYPE_GENERATED(1), the credential was auto generated.
   * </pre>
   *
   * <code>optional int32 type = 13;</code>
   */
  private void setType(int value) {
    bitField0_ |= 0x00001000;
    type_ = value;
  }
  /**
   * <pre>
   * TYPE_MANUAL(0), user manually filled the username and the password.
   * TYPE_GENERATED(1), the credential was auto generated.
   * </pre>
   *
   * <code>optional int32 type = 13;</code>
   */
  private void clearType() {
    bitField0_ = (bitField0_ & ~0x00001000);
    type_ = 0;
  }

  public static final int TIMES_USED_FIELD_NUMBER = 14;
  private int timesUsed_;
  /**
   * <pre>
   * Number of times this login was used for logging in. Chrome uses this field
   * to distinguish log-in and sign-up forms.
   * </pre>
   *
   * <code>optional int32 times_used = 14;</code>
   */
  public boolean hasTimesUsed() {
    return ((bitField0_ & 0x00002000) == 0x00002000);
  }
  /**
   * <pre>
   * Number of times this login was used for logging in. Chrome uses this field
   * to distinguish log-in and sign-up forms.
   * </pre>
   *
   * <code>optional int32 times_used = 14;</code>
   */
  public int getTimesUsed() {
    return timesUsed_;
  }
  /**
   * <pre>
   * Number of times this login was used for logging in. Chrome uses this field
   * to distinguish log-in and sign-up forms.
   * </pre>
   *
   * <code>optional int32 times_used = 14;</code>
   */
  private void setTimesUsed(int value) {
    bitField0_ |= 0x00002000;
    timesUsed_ = value;
  }
  /**
   * <pre>
   * Number of times this login was used for logging in. Chrome uses this field
   * to distinguish log-in and sign-up forms.
   * </pre>
   *
   * <code>optional int32 times_used = 14;</code>
   */
  private void clearTimesUsed() {
    bitField0_ = (bitField0_ & ~0x00002000);
    timesUsed_ = 0;
  }

  public static final int DISPLAY_NAME_FIELD_NUMBER = 15;
  private java.lang.String displayName_;
  /**
   * <pre>
   * A human readable name of the account holder. Set by CredentialManager API
   * and Android.
   * </pre>
   *
   * <code>optional string display_name = 15;</code>
   */
  public boolean hasDisplayName() {
    return ((bitField0_ & 0x00004000) == 0x00004000);
  }
  /**
   * <pre>
   * A human readable name of the account holder. Set by CredentialManager API
   * and Android.
   * </pre>
   *
   * <code>optional string display_name = 15;</code>
   */
  public java.lang.String getDisplayName() {
    return displayName_;
  }
  /**
   * <pre>
   * A human readable name of the account holder. Set by CredentialManager API
   * and Android.
   * </pre>
   *
   * <code>optional string display_name = 15;</code>
   */
  public com.google.protobuf.ByteString
      getDisplayNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(displayName_);
  }
  /**
   * <pre>
   * A human readable name of the account holder. Set by CredentialManager API
   * and Android.
   * </pre>
   *
   * <code>optional string display_name = 15;</code>
   */
  private void setDisplayName(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00004000;
    displayName_ = value;
  }
  /**
   * <pre>
   * A human readable name of the account holder. Set by CredentialManager API
   * and Android.
   * </pre>
   *
   * <code>optional string display_name = 15;</code>
   */
  private void clearDisplayName() {
    bitField0_ = (bitField0_ & ~0x00004000);
    displayName_ = getDefaultInstance().getDisplayName();
  }
  /**
   * <pre>
   * A human readable name of the account holder. Set by CredentialManager API
   * and Android.
   * </pre>
   *
   * <code>optional string display_name = 15;</code>
   */
  private void setDisplayNameBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00004000;
    displayName_ = value.toStringUtf8();
  }

  public static final int AVATAR_URL_FIELD_NUMBER = 16;
  private java.lang.String avatarUrl_;
  /**
   * <pre>
   * A URL of the avatar for the credential. Set by CredentialManager API and
   * Android.
   * </pre>
   *
   * <code>optional string avatar_url = 16;</code>
   */
  public boolean hasAvatarUrl() {
    return ((bitField0_ & 0x00008000) == 0x00008000);
  }
  /**
   * <pre>
   * A URL of the avatar for the credential. Set by CredentialManager API and
   * Android.
   * </pre>
   *
   * <code>optional string avatar_url = 16;</code>
   */
  public java.lang.String getAvatarUrl() {
    return avatarUrl_;
  }
  /**
   * <pre>
   * A URL of the avatar for the credential. Set by CredentialManager API and
   * Android.
   * </pre>
   *
   * <code>optional string avatar_url = 16;</code>
   */
  public com.google.protobuf.ByteString
      getAvatarUrlBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(avatarUrl_);
  }
  /**
   * <pre>
   * A URL of the avatar for the credential. Set by CredentialManager API and
   * Android.
   * </pre>
   *
   * <code>optional string avatar_url = 16;</code>
   */
  private void setAvatarUrl(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
    avatarUrl_ = value;
  }
  /**
   * <pre>
   * A URL of the avatar for the credential. Set by CredentialManager API and
   * Android.
   * </pre>
   *
   * <code>optional string avatar_url = 16;</code>
   */
  private void clearAvatarUrl() {
    bitField0_ = (bitField0_ & ~0x00008000);
    avatarUrl_ = getDefaultInstance().getAvatarUrl();
  }
  /**
   * <pre>
   * A URL of the avatar for the credential. Set by CredentialManager API and
   * Android.
   * </pre>
   *
   * <code>optional string avatar_url = 16;</code>
   */
  private void setAvatarUrlBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
    avatarUrl_ = value.toStringUtf8();
  }

  public static final int FEDERATION_URL_FIELD_NUMBER = 17;
  private java.lang.String federationUrl_;
  /**
   * <pre>
   * A URL of the IdP used to verify the credential. Set by Credential Manager
   * API and Android.
   * </pre>
   *
   * <code>optional string federation_url = 17;</code>
   */
  public boolean hasFederationUrl() {
    return ((bitField0_ & 0x00010000) == 0x00010000);
  }
  /**
   * <pre>
   * A URL of the IdP used to verify the credential. Set by Credential Manager
   * API and Android.
   * </pre>
   *
   * <code>optional string federation_url = 17;</code>
   */
  public java.lang.String getFederationUrl() {
    return federationUrl_;
  }
  /**
   * <pre>
   * A URL of the IdP used to verify the credential. Set by Credential Manager
   * API and Android.
   * </pre>
   *
   * <code>optional string federation_url = 17;</code>
   */
  public com.google.protobuf.ByteString
      getFederationUrlBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(federationUrl_);
  }
  /**
   * <pre>
   * A URL of the IdP used to verify the credential. Set by Credential Manager
   * API and Android.
   * </pre>
   *
   * <code>optional string federation_url = 17;</code>
   */
  private void setFederationUrl(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00010000;
    federationUrl_ = value;
  }
  /**
   * <pre>
   * A URL of the IdP used to verify the credential. Set by Credential Manager
   * API and Android.
   * </pre>
   *
   * <code>optional string federation_url = 17;</code>
   */
  private void clearFederationUrl() {
    bitField0_ = (bitField0_ & ~0x00010000);
    federationUrl_ = getDefaultInstance().getFederationUrl();
  }
  /**
   * <pre>
   * A URL of the IdP used to verify the credential. Set by Credential Manager
   * API and Android.
   * </pre>
   *
   * <code>optional string federation_url = 17;</code>
   */
  private void setFederationUrlBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00010000;
    federationUrl_ = value.toStringUtf8();
  }

  public static final int DATE_LAST_USED_FIELD_NUMBER = 18;
  private long dateLastUsed_;
  /**
   * <pre>
   * Time when the credential was last used. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_last_used = 18;</code>
   */
  public boolean hasDateLastUsed() {
    return ((bitField0_ & 0x00020000) == 0x00020000);
  }
  /**
   * <pre>
   * Time when the credential was last used. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_last_used = 18;</code>
   */
  public long getDateLastUsed() {
    return dateLastUsed_;
  }
  /**
   * <pre>
   * Time when the credential was last used. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_last_used = 18;</code>
   */
  private void setDateLastUsed(long value) {
    bitField0_ |= 0x00020000;
    dateLastUsed_ = value;
  }
  /**
   * <pre>
   * Time when the credential was last used. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_last_used = 18;</code>
   */
  private void clearDateLastUsed() {
    bitField0_ = (bitField0_ & ~0x00020000);
    dateLastUsed_ = 0L;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, scheme_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeString(2, getSignonRealm());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeString(3, getOrigin());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeString(4, getAction());
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeString(5, getUsernameElement());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeString(6, getUsernameValue());
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeString(7, getPasswordElement());
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeString(8, getPasswordValue());
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeBool(9, sslValid_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeBool(10, preferred_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      output.writeInt64(11, dateCreated_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeBool(12, blacklisted_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      output.writeInt32(13, type_);
    }
    if (((bitField0_ & 0x00002000) == 0x00002000)) {
      output.writeInt32(14, timesUsed_);
    }
    if (((bitField0_ & 0x00004000) == 0x00004000)) {
      output.writeString(15, getDisplayName());
    }
    if (((bitField0_ & 0x00008000) == 0x00008000)) {
      output.writeString(16, getAvatarUrl());
    }
    if (((bitField0_ & 0x00010000) == 0x00010000)) {
      output.writeString(17, getFederationUrl());
    }
    if (((bitField0_ & 0x00020000) == 0x00020000)) {
      output.writeInt64(18, dateLastUsed_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, scheme_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getSignonRealm());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getOrigin());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(4, getAction());
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(5, getUsernameElement());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(6, getUsernameValue());
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(7, getPasswordElement());
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(8, getPasswordValue());
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(9, sslValid_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(10, preferred_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(11, dateCreated_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(12, blacklisted_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(13, type_);
    }
    if (((bitField0_ & 0x00002000) == 0x00002000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(14, timesUsed_);
    }
    if (((bitField0_ & 0x00004000) == 0x00004000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(15, getDisplayName());
    }
    if (((bitField0_ & 0x00008000) == 0x00008000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(16, getAvatarUrl());
    }
    if (((bitField0_ & 0x00010000) == 0x00010000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(17, getFederationUrl());
    }
    if (((bitField0_ & 0x00020000) == 0x00020000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(18, dateLastUsed_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.PasswordSpecificsData prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * All the strings are encoded with UTF-8. URLs are encoded in Punycode.
   * </pre>
   *
   * Protobuf type {@code sync_pb.PasswordSpecificsData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.PasswordSpecificsData, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.PasswordSpecificsData)
      org.chromium.components.sync.protocol.PasswordSpecificsDataOrBuilder {
    // Construct using org.chromium.components.sync.protocol.PasswordSpecificsData.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
     * android credential or a password saved through Credential Manager API
     * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
     * SCHEME_BASIC(1), basic access http authentication.
     * SCHEME_DIGEST(2), digest access authentication.
     * SCHEME_OTHER(3), another access authentication.
     * </pre>
     *
     * <code>optional int32 scheme = 1;</code>
     */
    public boolean hasScheme() {
      return instance.hasScheme();
    }
    /**
     * <pre>
     * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
     * android credential or a password saved through Credential Manager API
     * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
     * SCHEME_BASIC(1), basic access http authentication.
     * SCHEME_DIGEST(2), digest access authentication.
     * SCHEME_OTHER(3), another access authentication.
     * </pre>
     *
     * <code>optional int32 scheme = 1;</code>
     */
    public int getScheme() {
      return instance.getScheme();
    }
    /**
     * <pre>
     * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
     * android credential or a password saved through Credential Manager API
     * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
     * SCHEME_BASIC(1), basic access http authentication.
     * SCHEME_DIGEST(2), digest access authentication.
     * SCHEME_OTHER(3), another access authentication.
     * </pre>
     *
     * <code>optional int32 scheme = 1;</code>
     */
    public Builder setScheme(int value) {
      copyOnWrite();
      instance.setScheme(value);
      return this;
    }
    /**
     * <pre>
     * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
     * android credential or a password saved through Credential Manager API
     * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
     * SCHEME_BASIC(1), basic access http authentication.
     * SCHEME_DIGEST(2), digest access authentication.
     * SCHEME_OTHER(3), another access authentication.
     * </pre>
     *
     * <code>optional int32 scheme = 1;</code>
     */
    public Builder clearScheme() {
      copyOnWrite();
      instance.clearScheme();
      return this;
    }

    /**
     * <pre>
     * For parsed web forms and normal passwords saved through Credential Manager
     * API: url-scheme://url-host[:url-port]/
     * For Android apps (local + federated):
     *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * where the hash is base64 encoded SHA512 of the app's public certificate.
     * For federated credentials:
     *     "federation://" + origin_host + "/" + federation_host
     * For proxy auth: proxy-host/auth-realm
     * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
     * </pre>
     *
     * <code>optional string signon_realm = 2;</code>
     */
    public boolean hasSignonRealm() {
      return instance.hasSignonRealm();
    }
    /**
     * <pre>
     * For parsed web forms and normal passwords saved through Credential Manager
     * API: url-scheme://url-host[:url-port]/
     * For Android apps (local + federated):
     *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * where the hash is base64 encoded SHA512 of the app's public certificate.
     * For federated credentials:
     *     "federation://" + origin_host + "/" + federation_host
     * For proxy auth: proxy-host/auth-realm
     * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
     * </pre>
     *
     * <code>optional string signon_realm = 2;</code>
     */
    public java.lang.String getSignonRealm() {
      return instance.getSignonRealm();
    }
    /**
     * <pre>
     * For parsed web forms and normal passwords saved through Credential Manager
     * API: url-scheme://url-host[:url-port]/
     * For Android apps (local + federated):
     *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * where the hash is base64 encoded SHA512 of the app's public certificate.
     * For federated credentials:
     *     "federation://" + origin_host + "/" + federation_host
     * For proxy auth: proxy-host/auth-realm
     * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
     * </pre>
     *
     * <code>optional string signon_realm = 2;</code>
     */
    public com.google.protobuf.ByteString
        getSignonRealmBytes() {
      return instance.getSignonRealmBytes();
    }
    /**
     * <pre>
     * For parsed web forms and normal passwords saved through Credential Manager
     * API: url-scheme://url-host[:url-port]/
     * For Android apps (local + federated):
     *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * where the hash is base64 encoded SHA512 of the app's public certificate.
     * For federated credentials:
     *     "federation://" + origin_host + "/" + federation_host
     * For proxy auth: proxy-host/auth-realm
     * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
     * </pre>
     *
     * <code>optional string signon_realm = 2;</code>
     */
    public Builder setSignonRealm(
        java.lang.String value) {
      copyOnWrite();
      instance.setSignonRealm(value);
      return this;
    }
    /**
     * <pre>
     * For parsed web forms and normal passwords saved through Credential Manager
     * API: url-scheme://url-host[:url-port]/
     * For Android apps (local + federated):
     *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * where the hash is base64 encoded SHA512 of the app's public certificate.
     * For federated credentials:
     *     "federation://" + origin_host + "/" + federation_host
     * For proxy auth: proxy-host/auth-realm
     * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
     * </pre>
     *
     * <code>optional string signon_realm = 2;</code>
     */
    public Builder clearSignonRealm() {
      copyOnWrite();
      instance.clearSignonRealm();
      return this;
    }
    /**
     * <pre>
     * For parsed web forms and normal passwords saved through Credential Manager
     * API: url-scheme://url-host[:url-port]/
     * For Android apps (local + federated):
     *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * where the hash is base64 encoded SHA512 of the app's public certificate.
     * For federated credentials:
     *     "federation://" + origin_host + "/" + federation_host
     * For proxy auth: proxy-host/auth-realm
     * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
     * </pre>
     *
     * <code>optional string signon_realm = 2;</code>
     */
    public Builder setSignonRealmBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setSignonRealmBytes(value);
      return this;
    }

    /**
     * <pre>
     * For parsed web forms and Credential Manager API:
     *     url-scheme://url-host[:url-port]/path
     * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string origin = 3;</code>
     */
    public boolean hasOrigin() {
      return instance.hasOrigin();
    }
    /**
     * <pre>
     * For parsed web forms and Credential Manager API:
     *     url-scheme://url-host[:url-port]/path
     * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string origin = 3;</code>
     */
    public java.lang.String getOrigin() {
      return instance.getOrigin();
    }
    /**
     * <pre>
     * For parsed web forms and Credential Manager API:
     *     url-scheme://url-host[:url-port]/path
     * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string origin = 3;</code>
     */
    public com.google.protobuf.ByteString
        getOriginBytes() {
      return instance.getOriginBytes();
    }
    /**
     * <pre>
     * For parsed web forms and Credential Manager API:
     *     url-scheme://url-host[:url-port]/path
     * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string origin = 3;</code>
     */
    public Builder setOrigin(
        java.lang.String value) {
      copyOnWrite();
      instance.setOrigin(value);
      return this;
    }
    /**
     * <pre>
     * For parsed web forms and Credential Manager API:
     *     url-scheme://url-host[:url-port]/path
     * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string origin = 3;</code>
     */
    public Builder clearOrigin() {
      copyOnWrite();
      instance.clearOrigin();
      return this;
    }
    /**
     * <pre>
     * For parsed web forms and Credential Manager API:
     *     url-scheme://url-host[:url-port]/path
     * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string origin = 3;</code>
     */
    public Builder setOriginBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setOriginBytes(value);
      return this;
    }

    /**
     * <pre>
     * Only for web-parsed forms - the action target of the form:
     *     url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string action = 4;</code>
     */
    public boolean hasAction() {
      return instance.hasAction();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the action target of the form:
     *     url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string action = 4;</code>
     */
    public java.lang.String getAction() {
      return instance.getAction();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the action target of the form:
     *     url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string action = 4;</code>
     */
    public com.google.protobuf.ByteString
        getActionBytes() {
      return instance.getActionBytes();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the action target of the form:
     *     url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string action = 4;</code>
     */
    public Builder setAction(
        java.lang.String value) {
      copyOnWrite();
      instance.setAction(value);
      return this;
    }
    /**
     * <pre>
     * Only for web-parsed forms - the action target of the form:
     *     url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string action = 4;</code>
     */
    public Builder clearAction() {
      copyOnWrite();
      instance.clearAction();
      return this;
    }
    /**
     * <pre>
     * Only for web-parsed forms - the action target of the form:
     *     url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string action = 4;</code>
     */
    public Builder setActionBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setActionBytes(value);
      return this;
    }

    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing username.
     * </pre>
     *
     * <code>optional string username_element = 5;</code>
     */
    public boolean hasUsernameElement() {
      return instance.hasUsernameElement();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing username.
     * </pre>
     *
     * <code>optional string username_element = 5;</code>
     */
    public java.lang.String getUsernameElement() {
      return instance.getUsernameElement();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing username.
     * </pre>
     *
     * <code>optional string username_element = 5;</code>
     */
    public com.google.protobuf.ByteString
        getUsernameElementBytes() {
      return instance.getUsernameElementBytes();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing username.
     * </pre>
     *
     * <code>optional string username_element = 5;</code>
     */
    public Builder setUsernameElement(
        java.lang.String value) {
      copyOnWrite();
      instance.setUsernameElement(value);
      return this;
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing username.
     * </pre>
     *
     * <code>optional string username_element = 5;</code>
     */
    public Builder clearUsernameElement() {
      copyOnWrite();
      instance.clearUsernameElement();
      return this;
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing username.
     * </pre>
     *
     * <code>optional string username_element = 5;</code>
     */
    public Builder setUsernameElementBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setUsernameElementBytes(value);
      return this;
    }

    /**
     * <pre>
     * For all: the username.
     * For blacklisted forms: &lt;empty&gt;.
     * </pre>
     *
     * <code>optional string username_value = 6;</code>
     */
    public boolean hasUsernameValue() {
      return instance.hasUsernameValue();
    }
    /**
     * <pre>
     * For all: the username.
     * For blacklisted forms: &lt;empty&gt;.
     * </pre>
     *
     * <code>optional string username_value = 6;</code>
     */
    public java.lang.String getUsernameValue() {
      return instance.getUsernameValue();
    }
    /**
     * <pre>
     * For all: the username.
     * For blacklisted forms: &lt;empty&gt;.
     * </pre>
     *
     * <code>optional string username_value = 6;</code>
     */
    public com.google.protobuf.ByteString
        getUsernameValueBytes() {
      return instance.getUsernameValueBytes();
    }
    /**
     * <pre>
     * For all: the username.
     * For blacklisted forms: &lt;empty&gt;.
     * </pre>
     *
     * <code>optional string username_value = 6;</code>
     */
    public Builder setUsernameValue(
        java.lang.String value) {
      copyOnWrite();
      instance.setUsernameValue(value);
      return this;
    }
    /**
     * <pre>
     * For all: the username.
     * For blacklisted forms: &lt;empty&gt;.
     * </pre>
     *
     * <code>optional string username_value = 6;</code>
     */
    public Builder clearUsernameValue() {
      copyOnWrite();
      instance.clearUsernameValue();
      return this;
    }
    /**
     * <pre>
     * For all: the username.
     * For blacklisted forms: &lt;empty&gt;.
     * </pre>
     *
     * <code>optional string username_value = 6;</code>
     */
    public Builder setUsernameValueBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setUsernameValueBytes(value);
      return this;
    }

    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing password.
     * </pre>
     *
     * <code>optional string password_element = 7;</code>
     */
    public boolean hasPasswordElement() {
      return instance.hasPasswordElement();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing password.
     * </pre>
     *
     * <code>optional string password_element = 7;</code>
     */
    public java.lang.String getPasswordElement() {
      return instance.getPasswordElement();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing password.
     * </pre>
     *
     * <code>optional string password_element = 7;</code>
     */
    public com.google.protobuf.ByteString
        getPasswordElementBytes() {
      return instance.getPasswordElementBytes();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing password.
     * </pre>
     *
     * <code>optional string password_element = 7;</code>
     */
    public Builder setPasswordElement(
        java.lang.String value) {
      copyOnWrite();
      instance.setPasswordElement(value);
      return this;
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing password.
     * </pre>
     *
     * <code>optional string password_element = 7;</code>
     */
    public Builder clearPasswordElement() {
      copyOnWrite();
      instance.clearPasswordElement();
      return this;
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing password.
     * </pre>
     *
     * <code>optional string password_element = 7;</code>
     */
    public Builder setPasswordElementBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPasswordElementBytes(value);
      return this;
    }

    /**
     * <pre>
     * For all: the password.
     * For federated logins and blacklisted forms: &lt;empty&gt;
     * </pre>
     *
     * <code>optional string password_value = 8;</code>
     */
    public boolean hasPasswordValue() {
      return instance.hasPasswordValue();
    }
    /**
     * <pre>
     * For all: the password.
     * For federated logins and blacklisted forms: &lt;empty&gt;
     * </pre>
     *
     * <code>optional string password_value = 8;</code>
     */
    public java.lang.String getPasswordValue() {
      return instance.getPasswordValue();
    }
    /**
     * <pre>
     * For all: the password.
     * For federated logins and blacklisted forms: &lt;empty&gt;
     * </pre>
     *
     * <code>optional string password_value = 8;</code>
     */
    public com.google.protobuf.ByteString
        getPasswordValueBytes() {
      return instance.getPasswordValueBytes();
    }
    /**
     * <pre>
     * For all: the password.
     * For federated logins and blacklisted forms: &lt;empty&gt;
     * </pre>
     *
     * <code>optional string password_value = 8;</code>
     */
    public Builder setPasswordValue(
        java.lang.String value) {
      copyOnWrite();
      instance.setPasswordValue(value);
      return this;
    }
    /**
     * <pre>
     * For all: the password.
     * For federated logins and blacklisted forms: &lt;empty&gt;
     * </pre>
     *
     * <code>optional string password_value = 8;</code>
     */
    public Builder clearPasswordValue() {
      copyOnWrite();
      instance.clearPasswordValue();
      return this;
    }
    /**
     * <pre>
     * For all: the password.
     * For federated logins and blacklisted forms: &lt;empty&gt;
     * </pre>
     *
     * <code>optional string password_value = 8;</code>
     */
    public Builder setPasswordValueBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPasswordValueBytes(value);
      return this;
    }

    /**
     * <pre>
     * Deprecated: http://crbug.com/413020
     * True if the credential was saved for a HTTPS session with a valid SSL cert.
     * Ignored for Android apps.
     * </pre>
     *
     * <code>optional bool ssl_valid = 9;</code>
     */
    public boolean hasSslValid() {
      return instance.hasSslValid();
    }
    /**
     * <pre>
     * Deprecated: http://crbug.com/413020
     * True if the credential was saved for a HTTPS session with a valid SSL cert.
     * Ignored for Android apps.
     * </pre>
     *
     * <code>optional bool ssl_valid = 9;</code>
     */
    public boolean getSslValid() {
      return instance.getSslValid();
    }
    /**
     * <pre>
     * Deprecated: http://crbug.com/413020
     * True if the credential was saved for a HTTPS session with a valid SSL cert.
     * Ignored for Android apps.
     * </pre>
     *
     * <code>optional bool ssl_valid = 9;</code>
     */
    public Builder setSslValid(boolean value) {
      copyOnWrite();
      instance.setSslValid(value);
      return this;
    }
    /**
     * <pre>
     * Deprecated: http://crbug.com/413020
     * True if the credential was saved for a HTTPS session with a valid SSL cert.
     * Ignored for Android apps.
     * </pre>
     *
     * <code>optional bool ssl_valid = 9;</code>
     */
    public Builder clearSslValid() {
      copyOnWrite();
      instance.clearSslValid();
      return this;
    }

    /**
     * <pre>
     * True for the last credential used for logging in on a given site.
     * Deprecated in M81.
     * </pre>
     *
     * <code>optional bool preferred = 10;</code>
     */
    public boolean hasPreferred() {
      return instance.hasPreferred();
    }
    /**
     * <pre>
     * True for the last credential used for logging in on a given site.
     * Deprecated in M81.
     * </pre>
     *
     * <code>optional bool preferred = 10;</code>
     */
    public boolean getPreferred() {
      return instance.getPreferred();
    }
    /**
     * <pre>
     * True for the last credential used for logging in on a given site.
     * Deprecated in M81.
     * </pre>
     *
     * <code>optional bool preferred = 10;</code>
     */
    public Builder setPreferred(boolean value) {
      copyOnWrite();
      instance.setPreferred(value);
      return this;
    }
    /**
     * <pre>
     * True for the last credential used for logging in on a given site.
     * Deprecated in M81.
     * </pre>
     *
     * <code>optional bool preferred = 10;</code>
     */
    public Builder clearPreferred() {
      copyOnWrite();
      instance.clearPreferred();
      return this;
    }

    /**
     * <pre>
     * Time when the credential was created. Amount of microseconds since 1601.
     * </pre>
     *
     * <code>optional int64 date_created = 11;</code>
     */
    public boolean hasDateCreated() {
      return instance.hasDateCreated();
    }
    /**
     * <pre>
     * Time when the credential was created. Amount of microseconds since 1601.
     * </pre>
     *
     * <code>optional int64 date_created = 11;</code>
     */
    public long getDateCreated() {
      return instance.getDateCreated();
    }
    /**
     * <pre>
     * Time when the credential was created. Amount of microseconds since 1601.
     * </pre>
     *
     * <code>optional int64 date_created = 11;</code>
     */
    public Builder setDateCreated(long value) {
      copyOnWrite();
      instance.setDateCreated(value);
      return this;
    }
    /**
     * <pre>
     * Time when the credential was created. Amount of microseconds since 1601.
     * </pre>
     *
     * <code>optional int64 date_created = 11;</code>
     */
    public Builder clearDateCreated() {
      copyOnWrite();
      instance.clearDateCreated();
      return this;
    }

    /**
     * <pre>
     * True, if user chose permanently not to save the credentials for the form.
     * </pre>
     *
     * <code>optional bool blacklisted = 12;</code>
     */
    public boolean hasBlacklisted() {
      return instance.hasBlacklisted();
    }
    /**
     * <pre>
     * True, if user chose permanently not to save the credentials for the form.
     * </pre>
     *
     * <code>optional bool blacklisted = 12;</code>
     */
    public boolean getBlacklisted() {
      return instance.getBlacklisted();
    }
    /**
     * <pre>
     * True, if user chose permanently not to save the credentials for the form.
     * </pre>
     *
     * <code>optional bool blacklisted = 12;</code>
     */
    public Builder setBlacklisted(boolean value) {
      copyOnWrite();
      instance.setBlacklisted(value);
      return this;
    }
    /**
     * <pre>
     * True, if user chose permanently not to save the credentials for the form.
     * </pre>
     *
     * <code>optional bool blacklisted = 12;</code>
     */
    public Builder clearBlacklisted() {
      copyOnWrite();
      instance.clearBlacklisted();
      return this;
    }

    /**
     * <pre>
     * TYPE_MANUAL(0), user manually filled the username and the password.
     * TYPE_GENERATED(1), the credential was auto generated.
     * </pre>
     *
     * <code>optional int32 type = 13;</code>
     */
    public boolean hasType() {
      return instance.hasType();
    }
    /**
     * <pre>
     * TYPE_MANUAL(0), user manually filled the username and the password.
     * TYPE_GENERATED(1), the credential was auto generated.
     * </pre>
     *
     * <code>optional int32 type = 13;</code>
     */
    public int getType() {
      return instance.getType();
    }
    /**
     * <pre>
     * TYPE_MANUAL(0), user manually filled the username and the password.
     * TYPE_GENERATED(1), the credential was auto generated.
     * </pre>
     *
     * <code>optional int32 type = 13;</code>
     */
    public Builder setType(int value) {
      copyOnWrite();
      instance.setType(value);
      return this;
    }
    /**
     * <pre>
     * TYPE_MANUAL(0), user manually filled the username and the password.
     * TYPE_GENERATED(1), the credential was auto generated.
     * </pre>
     *
     * <code>optional int32 type = 13;</code>
     */
    public Builder clearType() {
      copyOnWrite();
      instance.clearType();
      return this;
    }

    /**
     * <pre>
     * Number of times this login was used for logging in. Chrome uses this field
     * to distinguish log-in and sign-up forms.
     * </pre>
     *
     * <code>optional int32 times_used = 14;</code>
     */
    public boolean hasTimesUsed() {
      return instance.hasTimesUsed();
    }
    /**
     * <pre>
     * Number of times this login was used for logging in. Chrome uses this field
     * to distinguish log-in and sign-up forms.
     * </pre>
     *
     * <code>optional int32 times_used = 14;</code>
     */
    public int getTimesUsed() {
      return instance.getTimesUsed();
    }
    /**
     * <pre>
     * Number of times this login was used for logging in. Chrome uses this field
     * to distinguish log-in and sign-up forms.
     * </pre>
     *
     * <code>optional int32 times_used = 14;</code>
     */
    public Builder setTimesUsed(int value) {
      copyOnWrite();
      instance.setTimesUsed(value);
      return this;
    }
    /**
     * <pre>
     * Number of times this login was used for logging in. Chrome uses this field
     * to distinguish log-in and sign-up forms.
     * </pre>
     *
     * <code>optional int32 times_used = 14;</code>
     */
    public Builder clearTimesUsed() {
      copyOnWrite();
      instance.clearTimesUsed();
      return this;
    }

    /**
     * <pre>
     * A human readable name of the account holder. Set by CredentialManager API
     * and Android.
     * </pre>
     *
     * <code>optional string display_name = 15;</code>
     */
    public boolean hasDisplayName() {
      return instance.hasDisplayName();
    }
    /**
     * <pre>
     * A human readable name of the account holder. Set by CredentialManager API
     * and Android.
     * </pre>
     *
     * <code>optional string display_name = 15;</code>
     */
    public java.lang.String getDisplayName() {
      return instance.getDisplayName();
    }
    /**
     * <pre>
     * A human readable name of the account holder. Set by CredentialManager API
     * and Android.
     * </pre>
     *
     * <code>optional string display_name = 15;</code>
     */
    public com.google.protobuf.ByteString
        getDisplayNameBytes() {
      return instance.getDisplayNameBytes();
    }
    /**
     * <pre>
     * A human readable name of the account holder. Set by CredentialManager API
     * and Android.
     * </pre>
     *
     * <code>optional string display_name = 15;</code>
     */
    public Builder setDisplayName(
        java.lang.String value) {
      copyOnWrite();
      instance.setDisplayName(value);
      return this;
    }
    /**
     * <pre>
     * A human readable name of the account holder. Set by CredentialManager API
     * and Android.
     * </pre>
     *
     * <code>optional string display_name = 15;</code>
     */
    public Builder clearDisplayName() {
      copyOnWrite();
      instance.clearDisplayName();
      return this;
    }
    /**
     * <pre>
     * A human readable name of the account holder. Set by CredentialManager API
     * and Android.
     * </pre>
     *
     * <code>optional string display_name = 15;</code>
     */
    public Builder setDisplayNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDisplayNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * A URL of the avatar for the credential. Set by CredentialManager API and
     * Android.
     * </pre>
     *
     * <code>optional string avatar_url = 16;</code>
     */
    public boolean hasAvatarUrl() {
      return instance.hasAvatarUrl();
    }
    /**
     * <pre>
     * A URL of the avatar for the credential. Set by CredentialManager API and
     * Android.
     * </pre>
     *
     * <code>optional string avatar_url = 16;</code>
     */
    public java.lang.String getAvatarUrl() {
      return instance.getAvatarUrl();
    }
    /**
     * <pre>
     * A URL of the avatar for the credential. Set by CredentialManager API and
     * Android.
     * </pre>
     *
     * <code>optional string avatar_url = 16;</code>
     */
    public com.google.protobuf.ByteString
        getAvatarUrlBytes() {
      return instance.getAvatarUrlBytes();
    }
    /**
     * <pre>
     * A URL of the avatar for the credential. Set by CredentialManager API and
     * Android.
     * </pre>
     *
     * <code>optional string avatar_url = 16;</code>
     */
    public Builder setAvatarUrl(
        java.lang.String value) {
      copyOnWrite();
      instance.setAvatarUrl(value);
      return this;
    }
    /**
     * <pre>
     * A URL of the avatar for the credential. Set by CredentialManager API and
     * Android.
     * </pre>
     *
     * <code>optional string avatar_url = 16;</code>
     */
    public Builder clearAvatarUrl() {
      copyOnWrite();
      instance.clearAvatarUrl();
      return this;
    }
    /**
     * <pre>
     * A URL of the avatar for the credential. Set by CredentialManager API and
     * Android.
     * </pre>
     *
     * <code>optional string avatar_url = 16;</code>
     */
    public Builder setAvatarUrlBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setAvatarUrlBytes(value);
      return this;
    }

    /**
     * <pre>
     * A URL of the IdP used to verify the credential. Set by Credential Manager
     * API and Android.
     * </pre>
     *
     * <code>optional string federation_url = 17;</code>
     */
    public boolean hasFederationUrl() {
      return instance.hasFederationUrl();
    }
    /**
     * <pre>
     * A URL of the IdP used to verify the credential. Set by Credential Manager
     * API and Android.
     * </pre>
     *
     * <code>optional string federation_url = 17;</code>
     */
    public java.lang.String getFederationUrl() {
      return instance.getFederationUrl();
    }
    /**
     * <pre>
     * A URL of the IdP used to verify the credential. Set by Credential Manager
     * API and Android.
     * </pre>
     *
     * <code>optional string federation_url = 17;</code>
     */
    public com.google.protobuf.ByteString
        getFederationUrlBytes() {
      return instance.getFederationUrlBytes();
    }
    /**
     * <pre>
     * A URL of the IdP used to verify the credential. Set by Credential Manager
     * API and Android.
     * </pre>
     *
     * <code>optional string federation_url = 17;</code>
     */
    public Builder setFederationUrl(
        java.lang.String value) {
      copyOnWrite();
      instance.setFederationUrl(value);
      return this;
    }
    /**
     * <pre>
     * A URL of the IdP used to verify the credential. Set by Credential Manager
     * API and Android.
     * </pre>
     *
     * <code>optional string federation_url = 17;</code>
     */
    public Builder clearFederationUrl() {
      copyOnWrite();
      instance.clearFederationUrl();
      return this;
    }
    /**
     * <pre>
     * A URL of the IdP used to verify the credential. Set by Credential Manager
     * API and Android.
     * </pre>
     *
     * <code>optional string federation_url = 17;</code>
     */
    public Builder setFederationUrlBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setFederationUrlBytes(value);
      return this;
    }

    /**
     * <pre>
     * Time when the credential was last used. Amount of microseconds since 1601.
     * </pre>
     *
     * <code>optional int64 date_last_used = 18;</code>
     */
    public boolean hasDateLastUsed() {
      return instance.hasDateLastUsed();
    }
    /**
     * <pre>
     * Time when the credential was last used. Amount of microseconds since 1601.
     * </pre>
     *
     * <code>optional int64 date_last_used = 18;</code>
     */
    public long getDateLastUsed() {
      return instance.getDateLastUsed();
    }
    /**
     * <pre>
     * Time when the credential was last used. Amount of microseconds since 1601.
     * </pre>
     *
     * <code>optional int64 date_last_used = 18;</code>
     */
    public Builder setDateLastUsed(long value) {
      copyOnWrite();
      instance.setDateLastUsed(value);
      return this;
    }
    /**
     * <pre>
     * Time when the credential was last used. Amount of microseconds since 1601.
     * </pre>
     *
     * <code>optional int64 date_last_used = 18;</code>
     */
    public Builder clearDateLastUsed() {
      copyOnWrite();
      instance.clearDateLastUsed();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.PasswordSpecificsData)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.PasswordSpecificsData();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.PasswordSpecificsData other = (org.chromium.components.sync.protocol.PasswordSpecificsData) arg1;
        scheme_ = visitor.visitInt(
            hasScheme(), scheme_,
            other.hasScheme(), other.scheme_);
        signonRealm_ = visitor.visitString(
            hasSignonRealm(), signonRealm_,
            other.hasSignonRealm(), other.signonRealm_);
        origin_ = visitor.visitString(
            hasOrigin(), origin_,
            other.hasOrigin(), other.origin_);
        action_ = visitor.visitString(
            hasAction(), action_,
            other.hasAction(), other.action_);
        usernameElement_ = visitor.visitString(
            hasUsernameElement(), usernameElement_,
            other.hasUsernameElement(), other.usernameElement_);
        usernameValue_ = visitor.visitString(
            hasUsernameValue(), usernameValue_,
            other.hasUsernameValue(), other.usernameValue_);
        passwordElement_ = visitor.visitString(
            hasPasswordElement(), passwordElement_,
            other.hasPasswordElement(), other.passwordElement_);
        passwordValue_ = visitor.visitString(
            hasPasswordValue(), passwordValue_,
            other.hasPasswordValue(), other.passwordValue_);
        sslValid_ = visitor.visitBoolean(
            hasSslValid(), sslValid_,
            other.hasSslValid(), other.sslValid_);
        preferred_ = visitor.visitBoolean(
            hasPreferred(), preferred_,
            other.hasPreferred(), other.preferred_);
        dateCreated_ = visitor.visitLong(
            hasDateCreated(), dateCreated_,
            other.hasDateCreated(), other.dateCreated_);
        blacklisted_ = visitor.visitBoolean(
            hasBlacklisted(), blacklisted_,
            other.hasBlacklisted(), other.blacklisted_);
        type_ = visitor.visitInt(
            hasType(), type_,
            other.hasType(), other.type_);
        timesUsed_ = visitor.visitInt(
            hasTimesUsed(), timesUsed_,
            other.hasTimesUsed(), other.timesUsed_);
        displayName_ = visitor.visitString(
            hasDisplayName(), displayName_,
            other.hasDisplayName(), other.displayName_);
        avatarUrl_ = visitor.visitString(
            hasAvatarUrl(), avatarUrl_,
            other.hasAvatarUrl(), other.avatarUrl_);
        federationUrl_ = visitor.visitString(
            hasFederationUrl(), federationUrl_,
            other.hasFederationUrl(), other.federationUrl_);
        dateLastUsed_ = visitor.visitLong(
            hasDateLastUsed(), dateLastUsed_,
            other.hasDateLastUsed(), other.dateLastUsed_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                scheme_ = input.readInt32();
                break;
              }
              case 18: {
                String s = input.readString();
                bitField0_ |= 0x00000002;
                signonRealm_ = s;
                break;
              }
              case 26: {
                String s = input.readString();
                bitField0_ |= 0x00000004;
                origin_ = s;
                break;
              }
              case 34: {
                String s = input.readString();
                bitField0_ |= 0x00000008;
                action_ = s;
                break;
              }
              case 42: {
                String s = input.readString();
                bitField0_ |= 0x00000010;
                usernameElement_ = s;
                break;
              }
              case 50: {
                String s = input.readString();
                bitField0_ |= 0x00000020;
                usernameValue_ = s;
                break;
              }
              case 58: {
                String s = input.readString();
                bitField0_ |= 0x00000040;
                passwordElement_ = s;
                break;
              }
              case 66: {
                String s = input.readString();
                bitField0_ |= 0x00000080;
                passwordValue_ = s;
                break;
              }
              case 72: {
                bitField0_ |= 0x00000100;
                sslValid_ = input.readBool();
                break;
              }
              case 80: {
                bitField0_ |= 0x00000200;
                preferred_ = input.readBool();
                break;
              }
              case 88: {
                bitField0_ |= 0x00000400;
                dateCreated_ = input.readInt64();
                break;
              }
              case 96: {
                bitField0_ |= 0x00000800;
                blacklisted_ = input.readBool();
                break;
              }
              case 104: {
                bitField0_ |= 0x00001000;
                type_ = input.readInt32();
                break;
              }
              case 112: {
                bitField0_ |= 0x00002000;
                timesUsed_ = input.readInt32();
                break;
              }
              case 122: {
                String s = input.readString();
                bitField0_ |= 0x00004000;
                displayName_ = s;
                break;
              }
              case 130: {
                String s = input.readString();
                bitField0_ |= 0x00008000;
                avatarUrl_ = s;
                break;
              }
              case 138: {
                String s = input.readString();
                bitField0_ |= 0x00010000;
                federationUrl_ = s;
                break;
              }
              case 144: {
                bitField0_ |= 0x00020000;
                dateLastUsed_ = input.readInt64();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.PasswordSpecificsData.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecificsData)
  private static final org.chromium.components.sync.protocol.PasswordSpecificsData DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new PasswordSpecificsData();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.PasswordSpecificsData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<PasswordSpecificsData> PARSER;

  public static com.google.protobuf.Parser<PasswordSpecificsData> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

