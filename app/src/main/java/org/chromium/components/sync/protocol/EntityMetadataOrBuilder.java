// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entity_metadata.proto

package org.chromium.components.sync.protocol;

public interface EntityMetadataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sync_pb.EntityMetadata)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * A hash based on the client tag and model type.
   * Used for various map lookups. Should always be available.
   * Sent to the server as SyncEntity::client_defined_unique_tag.
   * </pre>
   *
   * <code>optional string client_tag_hash = 1;</code>
   */
  boolean hasClientTagHash();
  /**
   * <pre>
   * A hash based on the client tag and model type.
   * Used for various map lookups. Should always be available.
   * Sent to the server as SyncEntity::client_defined_unique_tag.
   * </pre>
   *
   * <code>optional string client_tag_hash = 1;</code>
   */
  java.lang.String getClientTagHash();
  /**
   * <pre>
   * A hash based on the client tag and model type.
   * Used for various map lookups. Should always be available.
   * Sent to the server as SyncEntity::client_defined_unique_tag.
   * </pre>
   *
   * <code>optional string client_tag_hash = 1;</code>
   */
  com.google.protobuf.ByteString
      getClientTagHashBytes();

  /**
   * <pre>
   * The entity's server-assigned ID.
   * Prior to the item's first commit, we leave this value as an empty string.
   * The initial ID for a newly created item has to meet certain uniqueness
   * requirements, and we handle those on the sync thread.
   * </pre>
   *
   * <code>optional string server_id = 2;</code>
   */
  boolean hasServerId();
  /**
   * <pre>
   * The entity's server-assigned ID.
   * Prior to the item's first commit, we leave this value as an empty string.
   * The initial ID for a newly created item has to meet certain uniqueness
   * requirements, and we handle those on the sync thread.
   * </pre>
   *
   * <code>optional string server_id = 2;</code>
   */
  java.lang.String getServerId();
  /**
   * <pre>
   * The entity's server-assigned ID.
   * Prior to the item's first commit, we leave this value as an empty string.
   * The initial ID for a newly created item has to meet certain uniqueness
   * requirements, and we handle those on the sync thread.
   * </pre>
   *
   * <code>optional string server_id = 2;</code>
   */
  com.google.protobuf.ByteString
      getServerIdBytes();

  /**
   * <pre>
   * Whether or not the entity is deleted.
   * </pre>
   *
   * <code>optional bool is_deleted = 3;</code>
   */
  boolean hasIsDeleted();
  /**
   * <pre>
   * Whether or not the entity is deleted.
   * </pre>
   *
   * <code>optional bool is_deleted = 3;</code>
   */
  boolean getIsDeleted();

  /**
   * <pre>
   * A version number used to track in-progress commits. Each local change
   * increments this number.
   * </pre>
   *
   * <code>optional int64 sequence_number = 4;</code>
   */
  boolean hasSequenceNumber();
  /**
   * <pre>
   * A version number used to track in-progress commits. Each local change
   * increments this number.
   * </pre>
   *
   * <code>optional int64 sequence_number = 4;</code>
   */
  long getSequenceNumber();

  /**
   * <pre>
   * The sequence number of the last item known to be successfully committed.
   * </pre>
   *
   * <code>optional int64 acked_sequence_number = 5;</code>
   */
  boolean hasAckedSequenceNumber();
  /**
   * <pre>
   * The sequence number of the last item known to be successfully committed.
   * </pre>
   *
   * <code>optional int64 acked_sequence_number = 5;</code>
   */
  long getAckedSequenceNumber();

  /**
   * <pre>
   * The server version on which this item is based.
   * If there are no local changes, this is the version of the entity as we see
   * it here.
   * If there are local changes, this is the version of the entity on which
   * those changes are based.
   * </pre>
   *
   * <code>optional int64 server_version = 6 [default = -1];</code>
   */
  boolean hasServerVersion();
  /**
   * <pre>
   * The server version on which this item is based.
   * If there are no local changes, this is the version of the entity as we see
   * it here.
   * If there are local changes, this is the version of the entity on which
   * those changes are based.
   * </pre>
   *
   * <code>optional int64 server_version = 6 [default = -1];</code>
   */
  long getServerVersion();

  /**
   * <pre>
   * Entity creation and modification timestamps. Assigned by the client and
   * synced by the server, though the server usually doesn't bother to inspect
   * their values. They are encoded as milliseconds since the Unix epoch.
   * </pre>
   *
   * <code>optional int64 creation_time = 7;</code>
   */
  boolean hasCreationTime();
  /**
   * <pre>
   * Entity creation and modification timestamps. Assigned by the client and
   * synced by the server, though the server usually doesn't bother to inspect
   * their values. They are encoded as milliseconds since the Unix epoch.
   * </pre>
   *
   * <code>optional int64 creation_time = 7;</code>
   */
  long getCreationTime();

  /**
   * <code>optional int64 modification_time = 8;</code>
   */
  boolean hasModificationTime();
  /**
   * <code>optional int64 modification_time = 8;</code>
   */
  long getModificationTime();

  /**
   * <pre>
   * A hash of the current entity specifics value. Used to detect whether
   * entity's specifics value has changed without having to keep specifics in
   * memory.
   * </pre>
   *
   * <code>optional string specifics_hash = 9;</code>
   */
  boolean hasSpecificsHash();
  /**
   * <pre>
   * A hash of the current entity specifics value. Used to detect whether
   * entity's specifics value has changed without having to keep specifics in
   * memory.
   * </pre>
   *
   * <code>optional string specifics_hash = 9;</code>
   */
  java.lang.String getSpecificsHash();
  /**
   * <pre>
   * A hash of the current entity specifics value. Used to detect whether
   * entity's specifics value has changed without having to keep specifics in
   * memory.
   * </pre>
   *
   * <code>optional string specifics_hash = 9;</code>
   */
  com.google.protobuf.ByteString
      getSpecificsHashBytes();

  /**
   * <pre>
   * A hash of the last specifics known by both the client and server. Used to
   * detect when local commits and remote updates are just for encryption. This
   * value will be the empty string only in the following cases: the entity is
   * in sync with the server, has never been synced, or is deleted.
   * </pre>
   *
   * <code>optional string base_specifics_hash = 10;</code>
   */
  boolean hasBaseSpecificsHash();
  /**
   * <pre>
   * A hash of the last specifics known by both the client and server. Used to
   * detect when local commits and remote updates are just for encryption. This
   * value will be the empty string only in the following cases: the entity is
   * in sync with the server, has never been synced, or is deleted.
   * </pre>
   *
   * <code>optional string base_specifics_hash = 10;</code>
   */
  java.lang.String getBaseSpecificsHash();
  /**
   * <pre>
   * A hash of the last specifics known by both the client and server. Used to
   * detect when local commits and remote updates are just for encryption. This
   * value will be the empty string only in the following cases: the entity is
   * in sync with the server, has never been synced, or is deleted.
   * </pre>
   *
   * <code>optional string base_specifics_hash = 10;</code>
   */
  com.google.protobuf.ByteString
      getBaseSpecificsHashBytes();

  /**
   * <pre>
   * Used for positioning entities among their siblings. Relevant only for data
   * types that support positions (e.g bookmarks). Refer to its definition in
   * unique_position.proto for more information about its internal
   * representation.
   * </pre>
   *
   * <code>optional .sync_pb.UniquePosition unique_position = 11;</code>
   */
  boolean hasUniquePosition();
  /**
   * <pre>
   * Used for positioning entities among their siblings. Relevant only for data
   * types that support positions (e.g bookmarks). Refer to its definition in
   * unique_position.proto for more information about its internal
   * representation.
   * </pre>
   *
   * <code>optional .sync_pb.UniquePosition unique_position = 11;</code>
   */
  org.chromium.components.sync.protocol.UniquePosition getUniquePosition();
}
