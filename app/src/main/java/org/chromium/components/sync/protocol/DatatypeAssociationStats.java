// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_debug_info.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * Datatype specifics statistics gathered at association time.
 * </pre>
 *
 * Protobuf type {@code sync_pb.DatatypeAssociationStats}
 */
public  final class DatatypeAssociationStats extends
    com.google.protobuf.GeneratedMessageLite<
        DatatypeAssociationStats, DatatypeAssociationStats.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.DatatypeAssociationStats)
    DatatypeAssociationStatsOrBuilder {
  private DatatypeAssociationStats() {
    highPriorityTypeConfiguredBefore_ = emptyIntList();
    samePriorityTypeConfiguredBefore_ = emptyIntList();
  }
  private int bitField0_;
  public static final int DATA_TYPE_ID_FIELD_NUMBER = 1;
  private int dataTypeId_;
  /**
   * <pre>
   * The datatype that was associated.
   * </pre>
   *
   * <code>optional int32 data_type_id = 1;</code>
   */
  public boolean hasDataTypeId() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * The datatype that was associated.
   * </pre>
   *
   * <code>optional int32 data_type_id = 1;</code>
   */
  public int getDataTypeId() {
    return dataTypeId_;
  }
  /**
   * <pre>
   * The datatype that was associated.
   * </pre>
   *
   * <code>optional int32 data_type_id = 1;</code>
   */
  private void setDataTypeId(int value) {
    bitField0_ |= 0x00000001;
    dataTypeId_ = value;
  }
  /**
   * <pre>
   * The datatype that was associated.
   * </pre>
   *
   * <code>optional int32 data_type_id = 1;</code>
   */
  private void clearDataTypeId() {
    bitField0_ = (bitField0_ & ~0x00000001);
    dataTypeId_ = 0;
  }

  public static final int NUM_LOCAL_ITEMS_BEFORE_ASSOCIATION_FIELD_NUMBER = 2;
  private int numLocalItemsBeforeAssociation_;
  /**
   * <pre>
   * The state of the world before association.
   * </pre>
   *
   * <code>optional int32 num_local_items_before_association = 2;</code>
   */
  public boolean hasNumLocalItemsBeforeAssociation() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * The state of the world before association.
   * </pre>
   *
   * <code>optional int32 num_local_items_before_association = 2;</code>
   */
  public int getNumLocalItemsBeforeAssociation() {
    return numLocalItemsBeforeAssociation_;
  }
  /**
   * <pre>
   * The state of the world before association.
   * </pre>
   *
   * <code>optional int32 num_local_items_before_association = 2;</code>
   */
  private void setNumLocalItemsBeforeAssociation(int value) {
    bitField0_ |= 0x00000002;
    numLocalItemsBeforeAssociation_ = value;
  }
  /**
   * <pre>
   * The state of the world before association.
   * </pre>
   *
   * <code>optional int32 num_local_items_before_association = 2;</code>
   */
  private void clearNumLocalItemsBeforeAssociation() {
    bitField0_ = (bitField0_ & ~0x00000002);
    numLocalItemsBeforeAssociation_ = 0;
  }

  public static final int NUM_SYNC_ITEMS_BEFORE_ASSOCIATION_FIELD_NUMBER = 3;
  private int numSyncItemsBeforeAssociation_;
  /**
   * <code>optional int32 num_sync_items_before_association = 3;</code>
   */
  public boolean hasNumSyncItemsBeforeAssociation() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>optional int32 num_sync_items_before_association = 3;</code>
   */
  public int getNumSyncItemsBeforeAssociation() {
    return numSyncItemsBeforeAssociation_;
  }
  /**
   * <code>optional int32 num_sync_items_before_association = 3;</code>
   */
  private void setNumSyncItemsBeforeAssociation(int value) {
    bitField0_ |= 0x00000004;
    numSyncItemsBeforeAssociation_ = value;
  }
  /**
   * <code>optional int32 num_sync_items_before_association = 3;</code>
   */
  private void clearNumSyncItemsBeforeAssociation() {
    bitField0_ = (bitField0_ & ~0x00000004);
    numSyncItemsBeforeAssociation_ = 0;
  }

  public static final int NUM_LOCAL_ITEMS_AFTER_ASSOCIATION_FIELD_NUMBER = 4;
  private int numLocalItemsAfterAssociation_;
  /**
   * <pre>
   * The state of the world after association.
   * </pre>
   *
   * <code>optional int32 num_local_items_after_association = 4;</code>
   */
  public boolean hasNumLocalItemsAfterAssociation() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * The state of the world after association.
   * </pre>
   *
   * <code>optional int32 num_local_items_after_association = 4;</code>
   */
  public int getNumLocalItemsAfterAssociation() {
    return numLocalItemsAfterAssociation_;
  }
  /**
   * <pre>
   * The state of the world after association.
   * </pre>
   *
   * <code>optional int32 num_local_items_after_association = 4;</code>
   */
  private void setNumLocalItemsAfterAssociation(int value) {
    bitField0_ |= 0x00000008;
    numLocalItemsAfterAssociation_ = value;
  }
  /**
   * <pre>
   * The state of the world after association.
   * </pre>
   *
   * <code>optional int32 num_local_items_after_association = 4;</code>
   */
  private void clearNumLocalItemsAfterAssociation() {
    bitField0_ = (bitField0_ & ~0x00000008);
    numLocalItemsAfterAssociation_ = 0;
  }

  public static final int NUM_SYNC_ITEMS_AFTER_ASSOCIATION_FIELD_NUMBER = 5;
  private int numSyncItemsAfterAssociation_;
  /**
   * <code>optional int32 num_sync_items_after_association = 5;</code>
   */
  public boolean hasNumSyncItemsAfterAssociation() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>optional int32 num_sync_items_after_association = 5;</code>
   */
  public int getNumSyncItemsAfterAssociation() {
    return numSyncItemsAfterAssociation_;
  }
  /**
   * <code>optional int32 num_sync_items_after_association = 5;</code>
   */
  private void setNumSyncItemsAfterAssociation(int value) {
    bitField0_ |= 0x00000010;
    numSyncItemsAfterAssociation_ = value;
  }
  /**
   * <code>optional int32 num_sync_items_after_association = 5;</code>
   */
  private void clearNumSyncItemsAfterAssociation() {
    bitField0_ = (bitField0_ & ~0x00000010);
    numSyncItemsAfterAssociation_ = 0;
  }

  public static final int NUM_LOCAL_ITEMS_ADDED_FIELD_NUMBER = 6;
  private int numLocalItemsAdded_;
  /**
   * <pre>
   * The changes that got us from before to after. In a correctly working
   * system these should be the deltas between before and after.
   * </pre>
   *
   * <code>optional int32 num_local_items_added = 6;</code>
   */
  public boolean hasNumLocalItemsAdded() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * The changes that got us from before to after. In a correctly working
   * system these should be the deltas between before and after.
   * </pre>
   *
   * <code>optional int32 num_local_items_added = 6;</code>
   */
  public int getNumLocalItemsAdded() {
    return numLocalItemsAdded_;
  }
  /**
   * <pre>
   * The changes that got us from before to after. In a correctly working
   * system these should be the deltas between before and after.
   * </pre>
   *
   * <code>optional int32 num_local_items_added = 6;</code>
   */
  private void setNumLocalItemsAdded(int value) {
    bitField0_ |= 0x00000020;
    numLocalItemsAdded_ = value;
  }
  /**
   * <pre>
   * The changes that got us from before to after. In a correctly working
   * system these should be the deltas between before and after.
   * </pre>
   *
   * <code>optional int32 num_local_items_added = 6;</code>
   */
  private void clearNumLocalItemsAdded() {
    bitField0_ = (bitField0_ & ~0x00000020);
    numLocalItemsAdded_ = 0;
  }

  public static final int NUM_LOCAL_ITEMS_DELETED_FIELD_NUMBER = 7;
  private int numLocalItemsDeleted_;
  /**
   * <code>optional int32 num_local_items_deleted = 7;</code>
   */
  public boolean hasNumLocalItemsDeleted() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <code>optional int32 num_local_items_deleted = 7;</code>
   */
  public int getNumLocalItemsDeleted() {
    return numLocalItemsDeleted_;
  }
  /**
   * <code>optional int32 num_local_items_deleted = 7;</code>
   */
  private void setNumLocalItemsDeleted(int value) {
    bitField0_ |= 0x00000040;
    numLocalItemsDeleted_ = value;
  }
  /**
   * <code>optional int32 num_local_items_deleted = 7;</code>
   */
  private void clearNumLocalItemsDeleted() {
    bitField0_ = (bitField0_ & ~0x00000040);
    numLocalItemsDeleted_ = 0;
  }

  public static final int NUM_LOCAL_ITEMS_MODIFIED_FIELD_NUMBER = 8;
  private int numLocalItemsModified_;
  /**
   * <code>optional int32 num_local_items_modified = 8;</code>
   */
  public boolean hasNumLocalItemsModified() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <code>optional int32 num_local_items_modified = 8;</code>
   */
  public int getNumLocalItemsModified() {
    return numLocalItemsModified_;
  }
  /**
   * <code>optional int32 num_local_items_modified = 8;</code>
   */
  private void setNumLocalItemsModified(int value) {
    bitField0_ |= 0x00000080;
    numLocalItemsModified_ = value;
  }
  /**
   * <code>optional int32 num_local_items_modified = 8;</code>
   */
  private void clearNumLocalItemsModified() {
    bitField0_ = (bitField0_ & ~0x00000080);
    numLocalItemsModified_ = 0;
  }

  public static final int NUM_SYNC_ITEMS_ADDED_FIELD_NUMBER = 9;
  private int numSyncItemsAdded_;
  /**
   * <code>optional int32 num_sync_items_added = 9;</code>
   */
  public boolean hasNumSyncItemsAdded() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <code>optional int32 num_sync_items_added = 9;</code>
   */
  public int getNumSyncItemsAdded() {
    return numSyncItemsAdded_;
  }
  /**
   * <code>optional int32 num_sync_items_added = 9;</code>
   */
  private void setNumSyncItemsAdded(int value) {
    bitField0_ |= 0x00000100;
    numSyncItemsAdded_ = value;
  }
  /**
   * <code>optional int32 num_sync_items_added = 9;</code>
   */
  private void clearNumSyncItemsAdded() {
    bitField0_ = (bitField0_ & ~0x00000100);
    numSyncItemsAdded_ = 0;
  }

  public static final int NUM_SYNC_ITEMS_DELETED_FIELD_NUMBER = 10;
  private int numSyncItemsDeleted_;
  /**
   * <code>optional int32 num_sync_items_deleted = 10;</code>
   */
  public boolean hasNumSyncItemsDeleted() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <code>optional int32 num_sync_items_deleted = 10;</code>
   */
  public int getNumSyncItemsDeleted() {
    return numSyncItemsDeleted_;
  }
  /**
   * <code>optional int32 num_sync_items_deleted = 10;</code>
   */
  private void setNumSyncItemsDeleted(int value) {
    bitField0_ |= 0x00000200;
    numSyncItemsDeleted_ = value;
  }
  /**
   * <code>optional int32 num_sync_items_deleted = 10;</code>
   */
  private void clearNumSyncItemsDeleted() {
    bitField0_ = (bitField0_ & ~0x00000200);
    numSyncItemsDeleted_ = 0;
  }

  public static final int NUM_SYNC_ITEMS_MODIFIED_FIELD_NUMBER = 11;
  private int numSyncItemsModified_;
  /**
   * <code>optional int32 num_sync_items_modified = 11;</code>
   */
  public boolean hasNumSyncItemsModified() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <code>optional int32 num_sync_items_modified = 11;</code>
   */
  public int getNumSyncItemsModified() {
    return numSyncItemsModified_;
  }
  /**
   * <code>optional int32 num_sync_items_modified = 11;</code>
   */
  private void setNumSyncItemsModified(int value) {
    bitField0_ |= 0x00000400;
    numSyncItemsModified_ = value;
  }
  /**
   * <code>optional int32 num_sync_items_modified = 11;</code>
   */
  private void clearNumSyncItemsModified() {
    bitField0_ = (bitField0_ & ~0x00000400);
    numSyncItemsModified_ = 0;
  }

  public static final int LOCAL_VERSION_PRE_ASSOCIATION_FIELD_NUMBER = 20;
  private long localVersionPreAssociation_;
  /**
   * <pre>
   * Model versions before association. Ideally local and sync model should
   * have same version if models were persisted properly in last cycle.
   * Note: currently version is only set on bookmark model.
   * </pre>
   *
   * <code>optional int64 local_version_pre_association = 20;</code>
   */
  public boolean hasLocalVersionPreAssociation() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <pre>
   * Model versions before association. Ideally local and sync model should
   * have same version if models were persisted properly in last cycle.
   * Note: currently version is only set on bookmark model.
   * </pre>
   *
   * <code>optional int64 local_version_pre_association = 20;</code>
   */
  public long getLocalVersionPreAssociation() {
    return localVersionPreAssociation_;
  }
  /**
   * <pre>
   * Model versions before association. Ideally local and sync model should
   * have same version if models were persisted properly in last cycle.
   * Note: currently version is only set on bookmark model.
   * </pre>
   *
   * <code>optional int64 local_version_pre_association = 20;</code>
   */
  private void setLocalVersionPreAssociation(long value) {
    bitField0_ |= 0x00000800;
    localVersionPreAssociation_ = value;
  }
  /**
   * <pre>
   * Model versions before association. Ideally local and sync model should
   * have same version if models were persisted properly in last cycle.
   * Note: currently version is only set on bookmark model.
   * </pre>
   *
   * <code>optional int64 local_version_pre_association = 20;</code>
   */
  private void clearLocalVersionPreAssociation() {
    bitField0_ = (bitField0_ & ~0x00000800);
    localVersionPreAssociation_ = 0L;
  }

  public static final int SYNC_VERSION_PRE_ASSOCIATION_FIELD_NUMBER = 21;
  private long syncVersionPreAssociation_;
  /**
   * <code>optional int64 sync_version_pre_association = 21;</code>
   */
  public boolean hasSyncVersionPreAssociation() {
    return ((bitField0_ & 0x00001000) == 0x00001000);
  }
  /**
   * <code>optional int64 sync_version_pre_association = 21;</code>
   */
  public long getSyncVersionPreAssociation() {
    return syncVersionPreAssociation_;
  }
  /**
   * <code>optional int64 sync_version_pre_association = 21;</code>
   */
  private void setSyncVersionPreAssociation(long value) {
    bitField0_ |= 0x00001000;
    syncVersionPreAssociation_ = value;
  }
  /**
   * <code>optional int64 sync_version_pre_association = 21;</code>
   */
  private void clearSyncVersionPreAssociation() {
    bitField0_ = (bitField0_ & ~0x00001000);
    syncVersionPreAssociation_ = 0L;
  }

  public static final int HAD_ERROR_FIELD_NUMBER = 12;
  private boolean hadError_;
  /**
   * <pre>
   * The data type ran into an error during model association.
   * </pre>
   *
   * <code>optional bool had_error = 12;</code>
   */
  public boolean hasHadError() {
    return ((bitField0_ & 0x00002000) == 0x00002000);
  }
  /**
   * <pre>
   * The data type ran into an error during model association.
   * </pre>
   *
   * <code>optional bool had_error = 12;</code>
   */
  public boolean getHadError() {
    return hadError_;
  }
  /**
   * <pre>
   * The data type ran into an error during model association.
   * </pre>
   *
   * <code>optional bool had_error = 12;</code>
   */
  private void setHadError(boolean value) {
    bitField0_ |= 0x00002000;
    hadError_ = value;
  }
  /**
   * <pre>
   * The data type ran into an error during model association.
   * </pre>
   *
   * <code>optional bool had_error = 12;</code>
   */
  private void clearHadError() {
    bitField0_ = (bitField0_ & ~0x00002000);
    hadError_ = false;
  }

  public static final int DOWNLOAD_WAIT_TIME_US_FIELD_NUMBER = 15;
  private long downloadWaitTimeUs_;
  /**
   * <pre>
   * Waiting time before downloading starts. This measures the time between
   * receiving configuration request for a set of data types to starting
   * downloading data of this type.
   * </pre>
   *
   * <code>optional int64 download_wait_time_us = 15;</code>
   */
  public boolean hasDownloadWaitTimeUs() {
    return ((bitField0_ & 0x00004000) == 0x00004000);
  }
  /**
   * <pre>
   * Waiting time before downloading starts. This measures the time between
   * receiving configuration request for a set of data types to starting
   * downloading data of this type.
   * </pre>
   *
   * <code>optional int64 download_wait_time_us = 15;</code>
   */
  public long getDownloadWaitTimeUs() {
    return downloadWaitTimeUs_;
  }
  /**
   * <pre>
   * Waiting time before downloading starts. This measures the time between
   * receiving configuration request for a set of data types to starting
   * downloading data of this type.
   * </pre>
   *
   * <code>optional int64 download_wait_time_us = 15;</code>
   */
  private void setDownloadWaitTimeUs(long value) {
    bitField0_ |= 0x00004000;
    downloadWaitTimeUs_ = value;
  }
  /**
   * <pre>
   * Waiting time before downloading starts. This measures the time between
   * receiving configuration request for a set of data types to starting
   * downloading data of this type.
   * </pre>
   *
   * <code>optional int64 download_wait_time_us = 15;</code>
   */
  private void clearDownloadWaitTimeUs() {
    bitField0_ = (bitField0_ & ~0x00004000);
    downloadWaitTimeUs_ = 0L;
  }

  public static final int DOWNLOAD_TIME_US_FIELD_NUMBER = 13;
  private long downloadTimeUs_;
  /**
   * <pre>
   * Time spent on downloading sync data for first time sync.
   * Note: This measures the time between asking backend to download data to
   *       being notified of download-ready by backend. So it consists of
   *       time on data downloading and processing at sync backend. But
   *       downloading time should dominate. It's also the total time spent on
   *       downloading data of all types in the priority group of
   *       |data_type_id| instead of just one data type.
   * </pre>
   *
   * <code>optional int64 download_time_us = 13;</code>
   */
  public boolean hasDownloadTimeUs() {
    return ((bitField0_ & 0x00008000) == 0x00008000);
  }
  /**
   * <pre>
   * Time spent on downloading sync data for first time sync.
   * Note: This measures the time between asking backend to download data to
   *       being notified of download-ready by backend. So it consists of
   *       time on data downloading and processing at sync backend. But
   *       downloading time should dominate. It's also the total time spent on
   *       downloading data of all types in the priority group of
   *       |data_type_id| instead of just one data type.
   * </pre>
   *
   * <code>optional int64 download_time_us = 13;</code>
   */
  public long getDownloadTimeUs() {
    return downloadTimeUs_;
  }
  /**
   * <pre>
   * Time spent on downloading sync data for first time sync.
   * Note: This measures the time between asking backend to download data to
   *       being notified of download-ready by backend. So it consists of
   *       time on data downloading and processing at sync backend. But
   *       downloading time should dominate. It's also the total time spent on
   *       downloading data of all types in the priority group of
   *       |data_type_id| instead of just one data type.
   * </pre>
   *
   * <code>optional int64 download_time_us = 13;</code>
   */
  private void setDownloadTimeUs(long value) {
    bitField0_ |= 0x00008000;
    downloadTimeUs_ = value;
  }
  /**
   * <pre>
   * Time spent on downloading sync data for first time sync.
   * Note: This measures the time between asking backend to download data to
   *       being notified of download-ready by backend. So it consists of
   *       time on data downloading and processing at sync backend. But
   *       downloading time should dominate. It's also the total time spent on
   *       downloading data of all types in the priority group of
   *       |data_type_id| instead of just one data type.
   * </pre>
   *
   * <code>optional int64 download_time_us = 13;</code>
   */
  private void clearDownloadTimeUs() {
    bitField0_ = (bitField0_ & ~0x00008000);
    downloadTimeUs_ = 0L;
  }

  public static final int ASSOCIATION_WAIT_TIME_FOR_HIGH_PRIORITY_US_FIELD_NUMBER = 16;
  private long associationWaitTimeForHighPriorityUs_;
  /**
   * <pre>
   * Waiting time for higher priority types to finish association. This
   * measures the time between finishing downloading data to requesting
   * association manager to associate this batch of types. High priority types
   * have near zero waiting time.
   * </pre>
   *
   * <code>optional int64 association_wait_time_for_high_priority_us = 16;</code>
   */
  public boolean hasAssociationWaitTimeForHighPriorityUs() {
    return ((bitField0_ & 0x00010000) == 0x00010000);
  }
  /**
   * <pre>
   * Waiting time for higher priority types to finish association. This
   * measures the time between finishing downloading data to requesting
   * association manager to associate this batch of types. High priority types
   * have near zero waiting time.
   * </pre>
   *
   * <code>optional int64 association_wait_time_for_high_priority_us = 16;</code>
   */
  public long getAssociationWaitTimeForHighPriorityUs() {
    return associationWaitTimeForHighPriorityUs_;
  }
  /**
   * <pre>
   * Waiting time for higher priority types to finish association. This
   * measures the time between finishing downloading data to requesting
   * association manager to associate this batch of types. High priority types
   * have near zero waiting time.
   * </pre>
   *
   * <code>optional int64 association_wait_time_for_high_priority_us = 16;</code>
   */
  private void setAssociationWaitTimeForHighPriorityUs(long value) {
    bitField0_ |= 0x00010000;
    associationWaitTimeForHighPriorityUs_ = value;
  }
  /**
   * <pre>
   * Waiting time for higher priority types to finish association. This
   * measures the time between finishing downloading data to requesting
   * association manager to associate this batch of types. High priority types
   * have near zero waiting time.
   * </pre>
   *
   * <code>optional int64 association_wait_time_for_high_priority_us = 16;</code>
   */
  private void clearAssociationWaitTimeForHighPriorityUs() {
    bitField0_ = (bitField0_ & ~0x00010000);
    associationWaitTimeForHighPriorityUs_ = 0L;
  }

  public static final int ASSOCIATION_WAIT_TIME_FOR_SAME_PRIORITY_US_FIELD_NUMBER = 14;
  private long associationWaitTimeForSamePriorityUs_;
  /**
   * <pre>
   * Waiting time for other types with same priority during association.
   * Data type manger sends types of same priority to association manager to
   * configure as a batch. Association manager configures one type at a time.
   * This measures the time between when a type is sent to association manager
   * (among other types) to when association manager starts configuring the
   * type. Total wait time before association is
   *     |association_wait_time_for_high_priority_us| +
   *     |association_wait_time_for_same_priority_us|
   * </pre>
   *
   * <code>optional int64 association_wait_time_for_same_priority_us = 14;</code>
   */
  public boolean hasAssociationWaitTimeForSamePriorityUs() {
    return ((bitField0_ & 0x00020000) == 0x00020000);
  }
  /**
   * <pre>
   * Waiting time for other types with same priority during association.
   * Data type manger sends types of same priority to association manager to
   * configure as a batch. Association manager configures one type at a time.
   * This measures the time between when a type is sent to association manager
   * (among other types) to when association manager starts configuring the
   * type. Total wait time before association is
   *     |association_wait_time_for_high_priority_us| +
   *     |association_wait_time_for_same_priority_us|
   * </pre>
   *
   * <code>optional int64 association_wait_time_for_same_priority_us = 14;</code>
   */
  public long getAssociationWaitTimeForSamePriorityUs() {
    return associationWaitTimeForSamePriorityUs_;
  }
  /**
   * <pre>
   * Waiting time for other types with same priority during association.
   * Data type manger sends types of same priority to association manager to
   * configure as a batch. Association manager configures one type at a time.
   * This measures the time between when a type is sent to association manager
   * (among other types) to when association manager starts configuring the
   * type. Total wait time before association is
   *     |association_wait_time_for_high_priority_us| +
   *     |association_wait_time_for_same_priority_us|
   * </pre>
   *
   * <code>optional int64 association_wait_time_for_same_priority_us = 14;</code>
   */
  private void setAssociationWaitTimeForSamePriorityUs(long value) {
    bitField0_ |= 0x00020000;
    associationWaitTimeForSamePriorityUs_ = value;
  }
  /**
   * <pre>
   * Waiting time for other types with same priority during association.
   * Data type manger sends types of same priority to association manager to
   * configure as a batch. Association manager configures one type at a time.
   * This measures the time between when a type is sent to association manager
   * (among other types) to when association manager starts configuring the
   * type. Total wait time before association is
   *     |association_wait_time_for_high_priority_us| +
   *     |association_wait_time_for_same_priority_us|
   * </pre>
   *
   * <code>optional int64 association_wait_time_for_same_priority_us = 14;</code>
   */
  private void clearAssociationWaitTimeForSamePriorityUs() {
    bitField0_ = (bitField0_ & ~0x00020000);
    associationWaitTimeForSamePriorityUs_ = 0L;
  }

  public static final int ASSOCIATION_TIME_US_FIELD_NUMBER = 17;
  private long associationTimeUs_;
  /**
   * <pre>
   * Time spent on model association.
   * </pre>
   *
   * <code>optional int64 association_time_us = 17;</code>
   */
  public boolean hasAssociationTimeUs() {
    return ((bitField0_ & 0x00040000) == 0x00040000);
  }
  /**
   * <pre>
   * Time spent on model association.
   * </pre>
   *
   * <code>optional int64 association_time_us = 17;</code>
   */
  public long getAssociationTimeUs() {
    return associationTimeUs_;
  }
  /**
   * <pre>
   * Time spent on model association.
   * </pre>
   *
   * <code>optional int64 association_time_us = 17;</code>
   */
  private void setAssociationTimeUs(long value) {
    bitField0_ |= 0x00040000;
    associationTimeUs_ = value;
  }
  /**
   * <pre>
   * Time spent on model association.
   * </pre>
   *
   * <code>optional int64 association_time_us = 17;</code>
   */
  private void clearAssociationTimeUs() {
    bitField0_ = (bitField0_ & ~0x00040000);
    associationTimeUs_ = 0L;
  }

  public static final int HIGH_PRIORITY_TYPE_CONFIGURED_BEFORE_FIELD_NUMBER = 18;
  private com.google.protobuf.Internal.IntList highPriorityTypeConfiguredBefore_;
  /**
   * <pre>
   * Higher priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 high_priority_type_configured_before = 18;</code>
   */
  public java.util.List<java.lang.Integer>
      getHighPriorityTypeConfiguredBeforeList() {
    return highPriorityTypeConfiguredBefore_;
  }
  /**
   * <pre>
   * Higher priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 high_priority_type_configured_before = 18;</code>
   */
  public int getHighPriorityTypeConfiguredBeforeCount() {
    return highPriorityTypeConfiguredBefore_.size();
  }
  /**
   * <pre>
   * Higher priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 high_priority_type_configured_before = 18;</code>
   */
  public int getHighPriorityTypeConfiguredBefore(int index) {
    return highPriorityTypeConfiguredBefore_.getInt(index);
  }
  private void ensureHighPriorityTypeConfiguredBeforeIsMutable() {
    if (!highPriorityTypeConfiguredBefore_.isModifiable()) {
      highPriorityTypeConfiguredBefore_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(highPriorityTypeConfiguredBefore_);
     }
  }
  /**
   * <pre>
   * Higher priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 high_priority_type_configured_before = 18;</code>
   */
  private void setHighPriorityTypeConfiguredBefore(
      int index, int value) {
    ensureHighPriorityTypeConfiguredBeforeIsMutable();
    highPriorityTypeConfiguredBefore_.setInt(index, value);
  }
  /**
   * <pre>
   * Higher priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 high_priority_type_configured_before = 18;</code>
   */
  private void addHighPriorityTypeConfiguredBefore(int value) {
    ensureHighPriorityTypeConfiguredBeforeIsMutable();
    highPriorityTypeConfiguredBefore_.addInt(value);
  }
  /**
   * <pre>
   * Higher priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 high_priority_type_configured_before = 18;</code>
   */
  private void addAllHighPriorityTypeConfiguredBefore(
      java.lang.Iterable<? extends java.lang.Integer> values) {
    ensureHighPriorityTypeConfiguredBeforeIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, highPriorityTypeConfiguredBefore_);
  }
  /**
   * <pre>
   * Higher priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 high_priority_type_configured_before = 18;</code>
   */
  private void clearHighPriorityTypeConfiguredBefore() {
    highPriorityTypeConfiguredBefore_ = emptyIntList();
  }

  public static final int SAME_PRIORITY_TYPE_CONFIGURED_BEFORE_FIELD_NUMBER = 19;
  private com.google.protobuf.Internal.IntList samePriorityTypeConfiguredBefore_;
  /**
   * <pre>
   * Same priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 same_priority_type_configured_before = 19;</code>
   */
  public java.util.List<java.lang.Integer>
      getSamePriorityTypeConfiguredBeforeList() {
    return samePriorityTypeConfiguredBefore_;
  }
  /**
   * <pre>
   * Same priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 same_priority_type_configured_before = 19;</code>
   */
  public int getSamePriorityTypeConfiguredBeforeCount() {
    return samePriorityTypeConfiguredBefore_.size();
  }
  /**
   * <pre>
   * Same priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 same_priority_type_configured_before = 19;</code>
   */
  public int getSamePriorityTypeConfiguredBefore(int index) {
    return samePriorityTypeConfiguredBefore_.getInt(index);
  }
  private void ensureSamePriorityTypeConfiguredBeforeIsMutable() {
    if (!samePriorityTypeConfiguredBefore_.isModifiable()) {
      samePriorityTypeConfiguredBefore_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(samePriorityTypeConfiguredBefore_);
     }
  }
  /**
   * <pre>
   * Same priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 same_priority_type_configured_before = 19;</code>
   */
  private void setSamePriorityTypeConfiguredBefore(
      int index, int value) {
    ensureSamePriorityTypeConfiguredBeforeIsMutable();
    samePriorityTypeConfiguredBefore_.setInt(index, value);
  }
  /**
   * <pre>
   * Same priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 same_priority_type_configured_before = 19;</code>
   */
  private void addSamePriorityTypeConfiguredBefore(int value) {
    ensureSamePriorityTypeConfiguredBeforeIsMutable();
    samePriorityTypeConfiguredBefore_.addInt(value);
  }
  /**
   * <pre>
   * Same priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 same_priority_type_configured_before = 19;</code>
   */
  private void addAllSamePriorityTypeConfiguredBefore(
      java.lang.Iterable<? extends java.lang.Integer> values) {
    ensureSamePriorityTypeConfiguredBeforeIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, samePriorityTypeConfiguredBefore_);
  }
  /**
   * <pre>
   * Same priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 same_priority_type_configured_before = 19;</code>
   */
  private void clearSamePriorityTypeConfiguredBefore() {
    samePriorityTypeConfiguredBefore_ = emptyIntList();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, dataTypeId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt32(2, numLocalItemsBeforeAssociation_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt32(3, numSyncItemsBeforeAssociation_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeInt32(4, numLocalItemsAfterAssociation_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeInt32(5, numSyncItemsAfterAssociation_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeInt32(6, numLocalItemsAdded_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeInt32(7, numLocalItemsDeleted_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeInt32(8, numLocalItemsModified_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeInt32(9, numSyncItemsAdded_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeInt32(10, numSyncItemsDeleted_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      output.writeInt32(11, numSyncItemsModified_);
    }
    if (((bitField0_ & 0x00002000) == 0x00002000)) {
      output.writeBool(12, hadError_);
    }
    if (((bitField0_ & 0x00008000) == 0x00008000)) {
      output.writeInt64(13, downloadTimeUs_);
    }
    if (((bitField0_ & 0x00020000) == 0x00020000)) {
      output.writeInt64(14, associationWaitTimeForSamePriorityUs_);
    }
    if (((bitField0_ & 0x00004000) == 0x00004000)) {
      output.writeInt64(15, downloadWaitTimeUs_);
    }
    if (((bitField0_ & 0x00010000) == 0x00010000)) {
      output.writeInt64(16, associationWaitTimeForHighPriorityUs_);
    }
    if (((bitField0_ & 0x00040000) == 0x00040000)) {
      output.writeInt64(17, associationTimeUs_);
    }
    for (int i = 0; i < highPriorityTypeConfiguredBefore_.size(); i++) {
      output.writeInt32(18, highPriorityTypeConfiguredBefore_.getInt(i));
    }
    for (int i = 0; i < samePriorityTypeConfiguredBefore_.size(); i++) {
      output.writeInt32(19, samePriorityTypeConfiguredBefore_.getInt(i));
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeInt64(20, localVersionPreAssociation_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      output.writeInt64(21, syncVersionPreAssociation_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, dataTypeId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, numLocalItemsBeforeAssociation_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, numSyncItemsBeforeAssociation_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, numLocalItemsAfterAssociation_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, numSyncItemsAfterAssociation_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(6, numLocalItemsAdded_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(7, numLocalItemsDeleted_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(8, numLocalItemsModified_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(9, numSyncItemsAdded_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(10, numSyncItemsDeleted_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(11, numSyncItemsModified_);
    }
    if (((bitField0_ & 0x00002000) == 0x00002000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(12, hadError_);
    }
    if (((bitField0_ & 0x00008000) == 0x00008000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(13, downloadTimeUs_);
    }
    if (((bitField0_ & 0x00020000) == 0x00020000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(14, associationWaitTimeForSamePriorityUs_);
    }
    if (((bitField0_ & 0x00004000) == 0x00004000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(15, downloadWaitTimeUs_);
    }
    if (((bitField0_ & 0x00010000) == 0x00010000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(16, associationWaitTimeForHighPriorityUs_);
    }
    if (((bitField0_ & 0x00040000) == 0x00040000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(17, associationTimeUs_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < highPriorityTypeConfiguredBefore_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(highPriorityTypeConfiguredBefore_.getInt(i));
      }
      size += dataSize;
      size += 2 * getHighPriorityTypeConfiguredBeforeList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < samePriorityTypeConfiguredBefore_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(samePriorityTypeConfiguredBefore_.getInt(i));
      }
      size += dataSize;
      size += 2 * getSamePriorityTypeConfiguredBeforeList().size();
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(20, localVersionPreAssociation_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(21, syncVersionPreAssociation_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.DatatypeAssociationStats parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.DatatypeAssociationStats parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.DatatypeAssociationStats parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.DatatypeAssociationStats parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.DatatypeAssociationStats parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.DatatypeAssociationStats parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.DatatypeAssociationStats parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.DatatypeAssociationStats parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.DatatypeAssociationStats parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.DatatypeAssociationStats parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.DatatypeAssociationStats prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Datatype specifics statistics gathered at association time.
   * </pre>
   *
   * Protobuf type {@code sync_pb.DatatypeAssociationStats}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.DatatypeAssociationStats, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.DatatypeAssociationStats)
      org.chromium.components.sync.protocol.DatatypeAssociationStatsOrBuilder {
    // Construct using org.chromium.components.sync.protocol.DatatypeAssociationStats.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The datatype that was associated.
     * </pre>
     *
     * <code>optional int32 data_type_id = 1;</code>
     */
    public boolean hasDataTypeId() {
      return instance.hasDataTypeId();
    }
    /**
     * <pre>
     * The datatype that was associated.
     * </pre>
     *
     * <code>optional int32 data_type_id = 1;</code>
     */
    public int getDataTypeId() {
      return instance.getDataTypeId();
    }
    /**
     * <pre>
     * The datatype that was associated.
     * </pre>
     *
     * <code>optional int32 data_type_id = 1;</code>
     */
    public Builder setDataTypeId(int value) {
      copyOnWrite();
      instance.setDataTypeId(value);
      return this;
    }
    /**
     * <pre>
     * The datatype that was associated.
     * </pre>
     *
     * <code>optional int32 data_type_id = 1;</code>
     */
    public Builder clearDataTypeId() {
      copyOnWrite();
      instance.clearDataTypeId();
      return this;
    }

    /**
     * <pre>
     * The state of the world before association.
     * </pre>
     *
     * <code>optional int32 num_local_items_before_association = 2;</code>
     */
    public boolean hasNumLocalItemsBeforeAssociation() {
      return instance.hasNumLocalItemsBeforeAssociation();
    }
    /**
     * <pre>
     * The state of the world before association.
     * </pre>
     *
     * <code>optional int32 num_local_items_before_association = 2;</code>
     */
    public int getNumLocalItemsBeforeAssociation() {
      return instance.getNumLocalItemsBeforeAssociation();
    }
    /**
     * <pre>
     * The state of the world before association.
     * </pre>
     *
     * <code>optional int32 num_local_items_before_association = 2;</code>
     */
    public Builder setNumLocalItemsBeforeAssociation(int value) {
      copyOnWrite();
      instance.setNumLocalItemsBeforeAssociation(value);
      return this;
    }
    /**
     * <pre>
     * The state of the world before association.
     * </pre>
     *
     * <code>optional int32 num_local_items_before_association = 2;</code>
     */
    public Builder clearNumLocalItemsBeforeAssociation() {
      copyOnWrite();
      instance.clearNumLocalItemsBeforeAssociation();
      return this;
    }

    /**
     * <code>optional int32 num_sync_items_before_association = 3;</code>
     */
    public boolean hasNumSyncItemsBeforeAssociation() {
      return instance.hasNumSyncItemsBeforeAssociation();
    }
    /**
     * <code>optional int32 num_sync_items_before_association = 3;</code>
     */
    public int getNumSyncItemsBeforeAssociation() {
      return instance.getNumSyncItemsBeforeAssociation();
    }
    /**
     * <code>optional int32 num_sync_items_before_association = 3;</code>
     */
    public Builder setNumSyncItemsBeforeAssociation(int value) {
      copyOnWrite();
      instance.setNumSyncItemsBeforeAssociation(value);
      return this;
    }
    /**
     * <code>optional int32 num_sync_items_before_association = 3;</code>
     */
    public Builder clearNumSyncItemsBeforeAssociation() {
      copyOnWrite();
      instance.clearNumSyncItemsBeforeAssociation();
      return this;
    }

    /**
     * <pre>
     * The state of the world after association.
     * </pre>
     *
     * <code>optional int32 num_local_items_after_association = 4;</code>
     */
    public boolean hasNumLocalItemsAfterAssociation() {
      return instance.hasNumLocalItemsAfterAssociation();
    }
    /**
     * <pre>
     * The state of the world after association.
     * </pre>
     *
     * <code>optional int32 num_local_items_after_association = 4;</code>
     */
    public int getNumLocalItemsAfterAssociation() {
      return instance.getNumLocalItemsAfterAssociation();
    }
    /**
     * <pre>
     * The state of the world after association.
     * </pre>
     *
     * <code>optional int32 num_local_items_after_association = 4;</code>
     */
    public Builder setNumLocalItemsAfterAssociation(int value) {
      copyOnWrite();
      instance.setNumLocalItemsAfterAssociation(value);
      return this;
    }
    /**
     * <pre>
     * The state of the world after association.
     * </pre>
     *
     * <code>optional int32 num_local_items_after_association = 4;</code>
     */
    public Builder clearNumLocalItemsAfterAssociation() {
      copyOnWrite();
      instance.clearNumLocalItemsAfterAssociation();
      return this;
    }

    /**
     * <code>optional int32 num_sync_items_after_association = 5;</code>
     */
    public boolean hasNumSyncItemsAfterAssociation() {
      return instance.hasNumSyncItemsAfterAssociation();
    }
    /**
     * <code>optional int32 num_sync_items_after_association = 5;</code>
     */
    public int getNumSyncItemsAfterAssociation() {
      return instance.getNumSyncItemsAfterAssociation();
    }
    /**
     * <code>optional int32 num_sync_items_after_association = 5;</code>
     */
    public Builder setNumSyncItemsAfterAssociation(int value) {
      copyOnWrite();
      instance.setNumSyncItemsAfterAssociation(value);
      return this;
    }
    /**
     * <code>optional int32 num_sync_items_after_association = 5;</code>
     */
    public Builder clearNumSyncItemsAfterAssociation() {
      copyOnWrite();
      instance.clearNumSyncItemsAfterAssociation();
      return this;
    }

    /**
     * <pre>
     * The changes that got us from before to after. In a correctly working
     * system these should be the deltas between before and after.
     * </pre>
     *
     * <code>optional int32 num_local_items_added = 6;</code>
     */
    public boolean hasNumLocalItemsAdded() {
      return instance.hasNumLocalItemsAdded();
    }
    /**
     * <pre>
     * The changes that got us from before to after. In a correctly working
     * system these should be the deltas between before and after.
     * </pre>
     *
     * <code>optional int32 num_local_items_added = 6;</code>
     */
    public int getNumLocalItemsAdded() {
      return instance.getNumLocalItemsAdded();
    }
    /**
     * <pre>
     * The changes that got us from before to after. In a correctly working
     * system these should be the deltas between before and after.
     * </pre>
     *
     * <code>optional int32 num_local_items_added = 6;</code>
     */
    public Builder setNumLocalItemsAdded(int value) {
      copyOnWrite();
      instance.setNumLocalItemsAdded(value);
      return this;
    }
    /**
     * <pre>
     * The changes that got us from before to after. In a correctly working
     * system these should be the deltas between before and after.
     * </pre>
     *
     * <code>optional int32 num_local_items_added = 6;</code>
     */
    public Builder clearNumLocalItemsAdded() {
      copyOnWrite();
      instance.clearNumLocalItemsAdded();
      return this;
    }

    /**
     * <code>optional int32 num_local_items_deleted = 7;</code>
     */
    public boolean hasNumLocalItemsDeleted() {
      return instance.hasNumLocalItemsDeleted();
    }
    /**
     * <code>optional int32 num_local_items_deleted = 7;</code>
     */
    public int getNumLocalItemsDeleted() {
      return instance.getNumLocalItemsDeleted();
    }
    /**
     * <code>optional int32 num_local_items_deleted = 7;</code>
     */
    public Builder setNumLocalItemsDeleted(int value) {
      copyOnWrite();
      instance.setNumLocalItemsDeleted(value);
      return this;
    }
    /**
     * <code>optional int32 num_local_items_deleted = 7;</code>
     */
    public Builder clearNumLocalItemsDeleted() {
      copyOnWrite();
      instance.clearNumLocalItemsDeleted();
      return this;
    }

    /**
     * <code>optional int32 num_local_items_modified = 8;</code>
     */
    public boolean hasNumLocalItemsModified() {
      return instance.hasNumLocalItemsModified();
    }
    /**
     * <code>optional int32 num_local_items_modified = 8;</code>
     */
    public int getNumLocalItemsModified() {
      return instance.getNumLocalItemsModified();
    }
    /**
     * <code>optional int32 num_local_items_modified = 8;</code>
     */
    public Builder setNumLocalItemsModified(int value) {
      copyOnWrite();
      instance.setNumLocalItemsModified(value);
      return this;
    }
    /**
     * <code>optional int32 num_local_items_modified = 8;</code>
     */
    public Builder clearNumLocalItemsModified() {
      copyOnWrite();
      instance.clearNumLocalItemsModified();
      return this;
    }

    /**
     * <code>optional int32 num_sync_items_added = 9;</code>
     */
    public boolean hasNumSyncItemsAdded() {
      return instance.hasNumSyncItemsAdded();
    }
    /**
     * <code>optional int32 num_sync_items_added = 9;</code>
     */
    public int getNumSyncItemsAdded() {
      return instance.getNumSyncItemsAdded();
    }
    /**
     * <code>optional int32 num_sync_items_added = 9;</code>
     */
    public Builder setNumSyncItemsAdded(int value) {
      copyOnWrite();
      instance.setNumSyncItemsAdded(value);
      return this;
    }
    /**
     * <code>optional int32 num_sync_items_added = 9;</code>
     */
    public Builder clearNumSyncItemsAdded() {
      copyOnWrite();
      instance.clearNumSyncItemsAdded();
      return this;
    }

    /**
     * <code>optional int32 num_sync_items_deleted = 10;</code>
     */
    public boolean hasNumSyncItemsDeleted() {
      return instance.hasNumSyncItemsDeleted();
    }
    /**
     * <code>optional int32 num_sync_items_deleted = 10;</code>
     */
    public int getNumSyncItemsDeleted() {
      return instance.getNumSyncItemsDeleted();
    }
    /**
     * <code>optional int32 num_sync_items_deleted = 10;</code>
     */
    public Builder setNumSyncItemsDeleted(int value) {
      copyOnWrite();
      instance.setNumSyncItemsDeleted(value);
      return this;
    }
    /**
     * <code>optional int32 num_sync_items_deleted = 10;</code>
     */
    public Builder clearNumSyncItemsDeleted() {
      copyOnWrite();
      instance.clearNumSyncItemsDeleted();
      return this;
    }

    /**
     * <code>optional int32 num_sync_items_modified = 11;</code>
     */
    public boolean hasNumSyncItemsModified() {
      return instance.hasNumSyncItemsModified();
    }
    /**
     * <code>optional int32 num_sync_items_modified = 11;</code>
     */
    public int getNumSyncItemsModified() {
      return instance.getNumSyncItemsModified();
    }
    /**
     * <code>optional int32 num_sync_items_modified = 11;</code>
     */
    public Builder setNumSyncItemsModified(int value) {
      copyOnWrite();
      instance.setNumSyncItemsModified(value);
      return this;
    }
    /**
     * <code>optional int32 num_sync_items_modified = 11;</code>
     */
    public Builder clearNumSyncItemsModified() {
      copyOnWrite();
      instance.clearNumSyncItemsModified();
      return this;
    }

    /**
     * <pre>
     * Model versions before association. Ideally local and sync model should
     * have same version if models were persisted properly in last cycle.
     * Note: currently version is only set on bookmark model.
     * </pre>
     *
     * <code>optional int64 local_version_pre_association = 20;</code>
     */
    public boolean hasLocalVersionPreAssociation() {
      return instance.hasLocalVersionPreAssociation();
    }
    /**
     * <pre>
     * Model versions before association. Ideally local and sync model should
     * have same version if models were persisted properly in last cycle.
     * Note: currently version is only set on bookmark model.
     * </pre>
     *
     * <code>optional int64 local_version_pre_association = 20;</code>
     */
    public long getLocalVersionPreAssociation() {
      return instance.getLocalVersionPreAssociation();
    }
    /**
     * <pre>
     * Model versions before association. Ideally local and sync model should
     * have same version if models were persisted properly in last cycle.
     * Note: currently version is only set on bookmark model.
     * </pre>
     *
     * <code>optional int64 local_version_pre_association = 20;</code>
     */
    public Builder setLocalVersionPreAssociation(long value) {
      copyOnWrite();
      instance.setLocalVersionPreAssociation(value);
      return this;
    }
    /**
     * <pre>
     * Model versions before association. Ideally local and sync model should
     * have same version if models were persisted properly in last cycle.
     * Note: currently version is only set on bookmark model.
     * </pre>
     *
     * <code>optional int64 local_version_pre_association = 20;</code>
     */
    public Builder clearLocalVersionPreAssociation() {
      copyOnWrite();
      instance.clearLocalVersionPreAssociation();
      return this;
    }

    /**
     * <code>optional int64 sync_version_pre_association = 21;</code>
     */
    public boolean hasSyncVersionPreAssociation() {
      return instance.hasSyncVersionPreAssociation();
    }
    /**
     * <code>optional int64 sync_version_pre_association = 21;</code>
     */
    public long getSyncVersionPreAssociation() {
      return instance.getSyncVersionPreAssociation();
    }
    /**
     * <code>optional int64 sync_version_pre_association = 21;</code>
     */
    public Builder setSyncVersionPreAssociation(long value) {
      copyOnWrite();
      instance.setSyncVersionPreAssociation(value);
      return this;
    }
    /**
     * <code>optional int64 sync_version_pre_association = 21;</code>
     */
    public Builder clearSyncVersionPreAssociation() {
      copyOnWrite();
      instance.clearSyncVersionPreAssociation();
      return this;
    }

    /**
     * <pre>
     * The data type ran into an error during model association.
     * </pre>
     *
     * <code>optional bool had_error = 12;</code>
     */
    public boolean hasHadError() {
      return instance.hasHadError();
    }
    /**
     * <pre>
     * The data type ran into an error during model association.
     * </pre>
     *
     * <code>optional bool had_error = 12;</code>
     */
    public boolean getHadError() {
      return instance.getHadError();
    }
    /**
     * <pre>
     * The data type ran into an error during model association.
     * </pre>
     *
     * <code>optional bool had_error = 12;</code>
     */
    public Builder setHadError(boolean value) {
      copyOnWrite();
      instance.setHadError(value);
      return this;
    }
    /**
     * <pre>
     * The data type ran into an error during model association.
     * </pre>
     *
     * <code>optional bool had_error = 12;</code>
     */
    public Builder clearHadError() {
      copyOnWrite();
      instance.clearHadError();
      return this;
    }

    /**
     * <pre>
     * Waiting time before downloading starts. This measures the time between
     * receiving configuration request for a set of data types to starting
     * downloading data of this type.
     * </pre>
     *
     * <code>optional int64 download_wait_time_us = 15;</code>
     */
    public boolean hasDownloadWaitTimeUs() {
      return instance.hasDownloadWaitTimeUs();
    }
    /**
     * <pre>
     * Waiting time before downloading starts. This measures the time between
     * receiving configuration request for a set of data types to starting
     * downloading data of this type.
     * </pre>
     *
     * <code>optional int64 download_wait_time_us = 15;</code>
     */
    public long getDownloadWaitTimeUs() {
      return instance.getDownloadWaitTimeUs();
    }
    /**
     * <pre>
     * Waiting time before downloading starts. This measures the time between
     * receiving configuration request for a set of data types to starting
     * downloading data of this type.
     * </pre>
     *
     * <code>optional int64 download_wait_time_us = 15;</code>
     */
    public Builder setDownloadWaitTimeUs(long value) {
      copyOnWrite();
      instance.setDownloadWaitTimeUs(value);
      return this;
    }
    /**
     * <pre>
     * Waiting time before downloading starts. This measures the time between
     * receiving configuration request for a set of data types to starting
     * downloading data of this type.
     * </pre>
     *
     * <code>optional int64 download_wait_time_us = 15;</code>
     */
    public Builder clearDownloadWaitTimeUs() {
      copyOnWrite();
      instance.clearDownloadWaitTimeUs();
      return this;
    }

    /**
     * <pre>
     * Time spent on downloading sync data for first time sync.
     * Note: This measures the time between asking backend to download data to
     *       being notified of download-ready by backend. So it consists of
     *       time on data downloading and processing at sync backend. But
     *       downloading time should dominate. It's also the total time spent on
     *       downloading data of all types in the priority group of
     *       |data_type_id| instead of just one data type.
     * </pre>
     *
     * <code>optional int64 download_time_us = 13;</code>
     */
    public boolean hasDownloadTimeUs() {
      return instance.hasDownloadTimeUs();
    }
    /**
     * <pre>
     * Time spent on downloading sync data for first time sync.
     * Note: This measures the time between asking backend to download data to
     *       being notified of download-ready by backend. So it consists of
     *       time on data downloading and processing at sync backend. But
     *       downloading time should dominate. It's also the total time spent on
     *       downloading data of all types in the priority group of
     *       |data_type_id| instead of just one data type.
     * </pre>
     *
     * <code>optional int64 download_time_us = 13;</code>
     */
    public long getDownloadTimeUs() {
      return instance.getDownloadTimeUs();
    }
    /**
     * <pre>
     * Time spent on downloading sync data for first time sync.
     * Note: This measures the time between asking backend to download data to
     *       being notified of download-ready by backend. So it consists of
     *       time on data downloading and processing at sync backend. But
     *       downloading time should dominate. It's also the total time spent on
     *       downloading data of all types in the priority group of
     *       |data_type_id| instead of just one data type.
     * </pre>
     *
     * <code>optional int64 download_time_us = 13;</code>
     */
    public Builder setDownloadTimeUs(long value) {
      copyOnWrite();
      instance.setDownloadTimeUs(value);
      return this;
    }
    /**
     * <pre>
     * Time spent on downloading sync data for first time sync.
     * Note: This measures the time between asking backend to download data to
     *       being notified of download-ready by backend. So it consists of
     *       time on data downloading and processing at sync backend. But
     *       downloading time should dominate. It's also the total time spent on
     *       downloading data of all types in the priority group of
     *       |data_type_id| instead of just one data type.
     * </pre>
     *
     * <code>optional int64 download_time_us = 13;</code>
     */
    public Builder clearDownloadTimeUs() {
      copyOnWrite();
      instance.clearDownloadTimeUs();
      return this;
    }

    /**
     * <pre>
     * Waiting time for higher priority types to finish association. This
     * measures the time between finishing downloading data to requesting
     * association manager to associate this batch of types. High priority types
     * have near zero waiting time.
     * </pre>
     *
     * <code>optional int64 association_wait_time_for_high_priority_us = 16;</code>
     */
    public boolean hasAssociationWaitTimeForHighPriorityUs() {
      return instance.hasAssociationWaitTimeForHighPriorityUs();
    }
    /**
     * <pre>
     * Waiting time for higher priority types to finish association. This
     * measures the time between finishing downloading data to requesting
     * association manager to associate this batch of types. High priority types
     * have near zero waiting time.
     * </pre>
     *
     * <code>optional int64 association_wait_time_for_high_priority_us = 16;</code>
     */
    public long getAssociationWaitTimeForHighPriorityUs() {
      return instance.getAssociationWaitTimeForHighPriorityUs();
    }
    /**
     * <pre>
     * Waiting time for higher priority types to finish association. This
     * measures the time between finishing downloading data to requesting
     * association manager to associate this batch of types. High priority types
     * have near zero waiting time.
     * </pre>
     *
     * <code>optional int64 association_wait_time_for_high_priority_us = 16;</code>
     */
    public Builder setAssociationWaitTimeForHighPriorityUs(long value) {
      copyOnWrite();
      instance.setAssociationWaitTimeForHighPriorityUs(value);
      return this;
    }
    /**
     * <pre>
     * Waiting time for higher priority types to finish association. This
     * measures the time between finishing downloading data to requesting
     * association manager to associate this batch of types. High priority types
     * have near zero waiting time.
     * </pre>
     *
     * <code>optional int64 association_wait_time_for_high_priority_us = 16;</code>
     */
    public Builder clearAssociationWaitTimeForHighPriorityUs() {
      copyOnWrite();
      instance.clearAssociationWaitTimeForHighPriorityUs();
      return this;
    }

    /**
     * <pre>
     * Waiting time for other types with same priority during association.
     * Data type manger sends types of same priority to association manager to
     * configure as a batch. Association manager configures one type at a time.
     * This measures the time between when a type is sent to association manager
     * (among other types) to when association manager starts configuring the
     * type. Total wait time before association is
     *     |association_wait_time_for_high_priority_us| +
     *     |association_wait_time_for_same_priority_us|
     * </pre>
     *
     * <code>optional int64 association_wait_time_for_same_priority_us = 14;</code>
     */
    public boolean hasAssociationWaitTimeForSamePriorityUs() {
      return instance.hasAssociationWaitTimeForSamePriorityUs();
    }
    /**
     * <pre>
     * Waiting time for other types with same priority during association.
     * Data type manger sends types of same priority to association manager to
     * configure as a batch. Association manager configures one type at a time.
     * This measures the time between when a type is sent to association manager
     * (among other types) to when association manager starts configuring the
     * type. Total wait time before association is
     *     |association_wait_time_for_high_priority_us| +
     *     |association_wait_time_for_same_priority_us|
     * </pre>
     *
     * <code>optional int64 association_wait_time_for_same_priority_us = 14;</code>
     */
    public long getAssociationWaitTimeForSamePriorityUs() {
      return instance.getAssociationWaitTimeForSamePriorityUs();
    }
    /**
     * <pre>
     * Waiting time for other types with same priority during association.
     * Data type manger sends types of same priority to association manager to
     * configure as a batch. Association manager configures one type at a time.
     * This measures the time between when a type is sent to association manager
     * (among other types) to when association manager starts configuring the
     * type. Total wait time before association is
     *     |association_wait_time_for_high_priority_us| +
     *     |association_wait_time_for_same_priority_us|
     * </pre>
     *
     * <code>optional int64 association_wait_time_for_same_priority_us = 14;</code>
     */
    public Builder setAssociationWaitTimeForSamePriorityUs(long value) {
      copyOnWrite();
      instance.setAssociationWaitTimeForSamePriorityUs(value);
      return this;
    }
    /**
     * <pre>
     * Waiting time for other types with same priority during association.
     * Data type manger sends types of same priority to association manager to
     * configure as a batch. Association manager configures one type at a time.
     * This measures the time between when a type is sent to association manager
     * (among other types) to when association manager starts configuring the
     * type. Total wait time before association is
     *     |association_wait_time_for_high_priority_us| +
     *     |association_wait_time_for_same_priority_us|
     * </pre>
     *
     * <code>optional int64 association_wait_time_for_same_priority_us = 14;</code>
     */
    public Builder clearAssociationWaitTimeForSamePriorityUs() {
      copyOnWrite();
      instance.clearAssociationWaitTimeForSamePriorityUs();
      return this;
    }

    /**
     * <pre>
     * Time spent on model association.
     * </pre>
     *
     * <code>optional int64 association_time_us = 17;</code>
     */
    public boolean hasAssociationTimeUs() {
      return instance.hasAssociationTimeUs();
    }
    /**
     * <pre>
     * Time spent on model association.
     * </pre>
     *
     * <code>optional int64 association_time_us = 17;</code>
     */
    public long getAssociationTimeUs() {
      return instance.getAssociationTimeUs();
    }
    /**
     * <pre>
     * Time spent on model association.
     * </pre>
     *
     * <code>optional int64 association_time_us = 17;</code>
     */
    public Builder setAssociationTimeUs(long value) {
      copyOnWrite();
      instance.setAssociationTimeUs(value);
      return this;
    }
    /**
     * <pre>
     * Time spent on model association.
     * </pre>
     *
     * <code>optional int64 association_time_us = 17;</code>
     */
    public Builder clearAssociationTimeUs() {
      copyOnWrite();
      instance.clearAssociationTimeUs();
      return this;
    }

    /**
     * <pre>
     * Higher priority type that's configured before this type.
     * </pre>
     *
     * <code>repeated int32 high_priority_type_configured_before = 18;</code>
     */
    public java.util.List<java.lang.Integer>
        getHighPriorityTypeConfiguredBeforeList() {
      return java.util.Collections.unmodifiableList(
          instance.getHighPriorityTypeConfiguredBeforeList());
    }
    /**
     * <pre>
     * Higher priority type that's configured before this type.
     * </pre>
     *
     * <code>repeated int32 high_priority_type_configured_before = 18;</code>
     */
    public int getHighPriorityTypeConfiguredBeforeCount() {
      return instance.getHighPriorityTypeConfiguredBeforeCount();
    }
    /**
     * <pre>
     * Higher priority type that's configured before this type.
     * </pre>
     *
     * <code>repeated int32 high_priority_type_configured_before = 18;</code>
     */
    public int getHighPriorityTypeConfiguredBefore(int index) {
      return instance.getHighPriorityTypeConfiguredBefore(index);
    }
    /**
     * <pre>
     * Higher priority type that's configured before this type.
     * </pre>
     *
     * <code>repeated int32 high_priority_type_configured_before = 18;</code>
     */
    public Builder setHighPriorityTypeConfiguredBefore(
        int index, int value) {
      copyOnWrite();
      instance.setHighPriorityTypeConfiguredBefore(index, value);
      return this;
    }
    /**
     * <pre>
     * Higher priority type that's configured before this type.
     * </pre>
     *
     * <code>repeated int32 high_priority_type_configured_before = 18;</code>
     */
    public Builder addHighPriorityTypeConfiguredBefore(int value) {
      copyOnWrite();
      instance.addHighPriorityTypeConfiguredBefore(value);
      return this;
    }
    /**
     * <pre>
     * Higher priority type that's configured before this type.
     * </pre>
     *
     * <code>repeated int32 high_priority_type_configured_before = 18;</code>
     */
    public Builder addAllHighPriorityTypeConfiguredBefore(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllHighPriorityTypeConfiguredBefore(values);
      return this;
    }
    /**
     * <pre>
     * Higher priority type that's configured before this type.
     * </pre>
     *
     * <code>repeated int32 high_priority_type_configured_before = 18;</code>
     */
    public Builder clearHighPriorityTypeConfiguredBefore() {
      copyOnWrite();
      instance.clearHighPriorityTypeConfiguredBefore();
      return this;
    }

    /**
     * <pre>
     * Same priority type that's configured before this type.
     * </pre>
     *
     * <code>repeated int32 same_priority_type_configured_before = 19;</code>
     */
    public java.util.List<java.lang.Integer>
        getSamePriorityTypeConfiguredBeforeList() {
      return java.util.Collections.unmodifiableList(
          instance.getSamePriorityTypeConfiguredBeforeList());
    }
    /**
     * <pre>
     * Same priority type that's configured before this type.
     * </pre>
     *
     * <code>repeated int32 same_priority_type_configured_before = 19;</code>
     */
    public int getSamePriorityTypeConfiguredBeforeCount() {
      return instance.getSamePriorityTypeConfiguredBeforeCount();
    }
    /**
     * <pre>
     * Same priority type that's configured before this type.
     * </pre>
     *
     * <code>repeated int32 same_priority_type_configured_before = 19;</code>
     */
    public int getSamePriorityTypeConfiguredBefore(int index) {
      return instance.getSamePriorityTypeConfiguredBefore(index);
    }
    /**
     * <pre>
     * Same priority type that's configured before this type.
     * </pre>
     *
     * <code>repeated int32 same_priority_type_configured_before = 19;</code>
     */
    public Builder setSamePriorityTypeConfiguredBefore(
        int index, int value) {
      copyOnWrite();
      instance.setSamePriorityTypeConfiguredBefore(index, value);
      return this;
    }
    /**
     * <pre>
     * Same priority type that's configured before this type.
     * </pre>
     *
     * <code>repeated int32 same_priority_type_configured_before = 19;</code>
     */
    public Builder addSamePriorityTypeConfiguredBefore(int value) {
      copyOnWrite();
      instance.addSamePriorityTypeConfiguredBefore(value);
      return this;
    }
    /**
     * <pre>
     * Same priority type that's configured before this type.
     * </pre>
     *
     * <code>repeated int32 same_priority_type_configured_before = 19;</code>
     */
    public Builder addAllSamePriorityTypeConfiguredBefore(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllSamePriorityTypeConfiguredBefore(values);
      return this;
    }
    /**
     * <pre>
     * Same priority type that's configured before this type.
     * </pre>
     *
     * <code>repeated int32 same_priority_type_configured_before = 19;</code>
     */
    public Builder clearSamePriorityTypeConfiguredBefore() {
      copyOnWrite();
      instance.clearSamePriorityTypeConfiguredBefore();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.DatatypeAssociationStats)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.DatatypeAssociationStats();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        highPriorityTypeConfiguredBefore_.makeImmutable();
        samePriorityTypeConfiguredBefore_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.DatatypeAssociationStats other = (org.chromium.components.sync.protocol.DatatypeAssociationStats) arg1;
        dataTypeId_ = visitor.visitInt(
            hasDataTypeId(), dataTypeId_,
            other.hasDataTypeId(), other.dataTypeId_);
        numLocalItemsBeforeAssociation_ = visitor.visitInt(
            hasNumLocalItemsBeforeAssociation(), numLocalItemsBeforeAssociation_,
            other.hasNumLocalItemsBeforeAssociation(), other.numLocalItemsBeforeAssociation_);
        numSyncItemsBeforeAssociation_ = visitor.visitInt(
            hasNumSyncItemsBeforeAssociation(), numSyncItemsBeforeAssociation_,
            other.hasNumSyncItemsBeforeAssociation(), other.numSyncItemsBeforeAssociation_);
        numLocalItemsAfterAssociation_ = visitor.visitInt(
            hasNumLocalItemsAfterAssociation(), numLocalItemsAfterAssociation_,
            other.hasNumLocalItemsAfterAssociation(), other.numLocalItemsAfterAssociation_);
        numSyncItemsAfterAssociation_ = visitor.visitInt(
            hasNumSyncItemsAfterAssociation(), numSyncItemsAfterAssociation_,
            other.hasNumSyncItemsAfterAssociation(), other.numSyncItemsAfterAssociation_);
        numLocalItemsAdded_ = visitor.visitInt(
            hasNumLocalItemsAdded(), numLocalItemsAdded_,
            other.hasNumLocalItemsAdded(), other.numLocalItemsAdded_);
        numLocalItemsDeleted_ = visitor.visitInt(
            hasNumLocalItemsDeleted(), numLocalItemsDeleted_,
            other.hasNumLocalItemsDeleted(), other.numLocalItemsDeleted_);
        numLocalItemsModified_ = visitor.visitInt(
            hasNumLocalItemsModified(), numLocalItemsModified_,
            other.hasNumLocalItemsModified(), other.numLocalItemsModified_);
        numSyncItemsAdded_ = visitor.visitInt(
            hasNumSyncItemsAdded(), numSyncItemsAdded_,
            other.hasNumSyncItemsAdded(), other.numSyncItemsAdded_);
        numSyncItemsDeleted_ = visitor.visitInt(
            hasNumSyncItemsDeleted(), numSyncItemsDeleted_,
            other.hasNumSyncItemsDeleted(), other.numSyncItemsDeleted_);
        numSyncItemsModified_ = visitor.visitInt(
            hasNumSyncItemsModified(), numSyncItemsModified_,
            other.hasNumSyncItemsModified(), other.numSyncItemsModified_);
        localVersionPreAssociation_ = visitor.visitLong(
            hasLocalVersionPreAssociation(), localVersionPreAssociation_,
            other.hasLocalVersionPreAssociation(), other.localVersionPreAssociation_);
        syncVersionPreAssociation_ = visitor.visitLong(
            hasSyncVersionPreAssociation(), syncVersionPreAssociation_,
            other.hasSyncVersionPreAssociation(), other.syncVersionPreAssociation_);
        hadError_ = visitor.visitBoolean(
            hasHadError(), hadError_,
            other.hasHadError(), other.hadError_);
        downloadWaitTimeUs_ = visitor.visitLong(
            hasDownloadWaitTimeUs(), downloadWaitTimeUs_,
            other.hasDownloadWaitTimeUs(), other.downloadWaitTimeUs_);
        downloadTimeUs_ = visitor.visitLong(
            hasDownloadTimeUs(), downloadTimeUs_,
            other.hasDownloadTimeUs(), other.downloadTimeUs_);
        associationWaitTimeForHighPriorityUs_ = visitor.visitLong(
            hasAssociationWaitTimeForHighPriorityUs(), associationWaitTimeForHighPriorityUs_,
            other.hasAssociationWaitTimeForHighPriorityUs(), other.associationWaitTimeForHighPriorityUs_);
        associationWaitTimeForSamePriorityUs_ = visitor.visitLong(
            hasAssociationWaitTimeForSamePriorityUs(), associationWaitTimeForSamePriorityUs_,
            other.hasAssociationWaitTimeForSamePriorityUs(), other.associationWaitTimeForSamePriorityUs_);
        associationTimeUs_ = visitor.visitLong(
            hasAssociationTimeUs(), associationTimeUs_,
            other.hasAssociationTimeUs(), other.associationTimeUs_);
        highPriorityTypeConfiguredBefore_= visitor.visitIntList(highPriorityTypeConfiguredBefore_, other.highPriorityTypeConfiguredBefore_);
        samePriorityTypeConfiguredBefore_= visitor.visitIntList(samePriorityTypeConfiguredBefore_, other.samePriorityTypeConfiguredBefore_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                dataTypeId_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                numLocalItemsBeforeAssociation_ = input.readInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                numSyncItemsBeforeAssociation_ = input.readInt32();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                numLocalItemsAfterAssociation_ = input.readInt32();
                break;
              }
              case 40: {
                bitField0_ |= 0x00000010;
                numSyncItemsAfterAssociation_ = input.readInt32();
                break;
              }
              case 48: {
                bitField0_ |= 0x00000020;
                numLocalItemsAdded_ = input.readInt32();
                break;
              }
              case 56: {
                bitField0_ |= 0x00000040;
                numLocalItemsDeleted_ = input.readInt32();
                break;
              }
              case 64: {
                bitField0_ |= 0x00000080;
                numLocalItemsModified_ = input.readInt32();
                break;
              }
              case 72: {
                bitField0_ |= 0x00000100;
                numSyncItemsAdded_ = input.readInt32();
                break;
              }
              case 80: {
                bitField0_ |= 0x00000200;
                numSyncItemsDeleted_ = input.readInt32();
                break;
              }
              case 88: {
                bitField0_ |= 0x00000400;
                numSyncItemsModified_ = input.readInt32();
                break;
              }
              case 96: {
                bitField0_ |= 0x00002000;
                hadError_ = input.readBool();
                break;
              }
              case 104: {
                bitField0_ |= 0x00008000;
                downloadTimeUs_ = input.readInt64();
                break;
              }
              case 112: {
                bitField0_ |= 0x00020000;
                associationWaitTimeForSamePriorityUs_ = input.readInt64();
                break;
              }
              case 120: {
                bitField0_ |= 0x00004000;
                downloadWaitTimeUs_ = input.readInt64();
                break;
              }
              case 128: {
                bitField0_ |= 0x00010000;
                associationWaitTimeForHighPriorityUs_ = input.readInt64();
                break;
              }
              case 136: {
                bitField0_ |= 0x00040000;
                associationTimeUs_ = input.readInt64();
                break;
              }
              case 144: {
                if (!highPriorityTypeConfiguredBefore_.isModifiable()) {
                  highPriorityTypeConfiguredBefore_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(highPriorityTypeConfiguredBefore_);
                }
                highPriorityTypeConfiguredBefore_.addInt(input.readInt32());
                break;
              }
              case 146: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!highPriorityTypeConfiguredBefore_.isModifiable() && input.getBytesUntilLimit() > 0) {
                  highPriorityTypeConfiguredBefore_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(highPriorityTypeConfiguredBefore_);
                }
                while (input.getBytesUntilLimit() > 0) {
                  highPriorityTypeConfiguredBefore_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 152: {
                if (!samePriorityTypeConfiguredBefore_.isModifiable()) {
                  samePriorityTypeConfiguredBefore_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(samePriorityTypeConfiguredBefore_);
                }
                samePriorityTypeConfiguredBefore_.addInt(input.readInt32());
                break;
              }
              case 154: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!samePriorityTypeConfiguredBefore_.isModifiable() && input.getBytesUntilLimit() > 0) {
                  samePriorityTypeConfiguredBefore_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(samePriorityTypeConfiguredBefore_);
                }
                while (input.getBytesUntilLimit() > 0) {
                  samePriorityTypeConfiguredBefore_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 160: {
                bitField0_ |= 0x00000800;
                localVersionPreAssociation_ = input.readInt64();
                break;
              }
              case 168: {
                bitField0_ |= 0x00001000;
                syncVersionPreAssociation_ = input.readInt64();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.DatatypeAssociationStats.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.DatatypeAssociationStats)
  private static final org.chromium.components.sync.protocol.DatatypeAssociationStats DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new DatatypeAssociationStats();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.DatatypeAssociationStats getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<DatatypeAssociationStats> PARSER;

  public static com.google.protobuf.Parser<DatatypeAssociationStats> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

