// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * This message communicates additional per-type information related to
 * requests with origin GU_TRIGGER.  This message is not relevant when any
 * other origin value is used.
 * Introduced in M29.
 * </pre>
 *
 * Protobuf type {@code sync_pb.GetUpdateTriggers}
 */
public  final class GetUpdateTriggers extends
    com.google.protobuf.GeneratedMessageLite<
        GetUpdateTriggers, GetUpdateTriggers.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.GetUpdateTriggers)
    GetUpdateTriggersOrBuilder {
  private GetUpdateTriggers() {
    notificationHint_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
  }
  private int bitField0_;
  public static final int NOTIFICATION_HINT_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.ProtobufList<String> notificationHint_;
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   */
  public java.util.List<String> getNotificationHintList() {
    return notificationHint_;
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   */
  public int getNotificationHintCount() {
    return notificationHint_.size();
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   */
  public java.lang.String getNotificationHint(int index) {
    return notificationHint_.get(index);
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   */
  public com.google.protobuf.ByteString
      getNotificationHintBytes(int index) {
    return com.google.protobuf.ByteString.copyFromUtf8(
        notificationHint_.get(index));
  }
  private void ensureNotificationHintIsMutable() {
    if (!notificationHint_.isModifiable()) {
      notificationHint_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(notificationHint_);
     }
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   */
  private void setNotificationHint(
      int index, java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  ensureNotificationHintIsMutable();
    notificationHint_.set(index, value);
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   */
  private void addNotificationHint(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  ensureNotificationHintIsMutable();
    notificationHint_.add(value);
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   */
  private void addAllNotificationHint(
      java.lang.Iterable<java.lang.String> values) {
    ensureNotificationHintIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, notificationHint_);
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   */
  private void clearNotificationHint() {
    notificationHint_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   */
  private void addNotificationHintBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  ensureNotificationHintIsMutable();
    notificationHint_.add(value.toStringUtf8());
  }

  public static final int CLIENT_DROPPED_HINTS_FIELD_NUMBER = 2;
  private boolean clientDroppedHints_;
  /**
   * <pre>
   * This flag is set if the client was forced to drop hints because the number
   * of queued hints exceeded its limit.  The oldest hints will be discarded
   * first.  Introduced in M29.
   * </pre>
   *
   * <code>optional bool client_dropped_hints = 2;</code>
   */
  public boolean hasClientDroppedHints() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * This flag is set if the client was forced to drop hints because the number
   * of queued hints exceeded its limit.  The oldest hints will be discarded
   * first.  Introduced in M29.
   * </pre>
   *
   * <code>optional bool client_dropped_hints = 2;</code>
   */
  public boolean getClientDroppedHints() {
    return clientDroppedHints_;
  }
  /**
   * <pre>
   * This flag is set if the client was forced to drop hints because the number
   * of queued hints exceeded its limit.  The oldest hints will be discarded
   * first.  Introduced in M29.
   * </pre>
   *
   * <code>optional bool client_dropped_hints = 2;</code>
   */
  private void setClientDroppedHints(boolean value) {
    bitField0_ |= 0x00000001;
    clientDroppedHints_ = value;
  }
  /**
   * <pre>
   * This flag is set if the client was forced to drop hints because the number
   * of queued hints exceeded its limit.  The oldest hints will be discarded
   * first.  Introduced in M29.
   * </pre>
   *
   * <code>optional bool client_dropped_hints = 2;</code>
   */
  private void clearClientDroppedHints() {
    bitField0_ = (bitField0_ & ~0x00000001);
    clientDroppedHints_ = false;
  }

  public static final int INVALIDATIONS_OUT_OF_SYNC_FIELD_NUMBER = 3;
  private boolean invalidationsOutOfSync_;
  /**
   * <pre>
   * This flag is set when the client suspects that its list of invalidation
   * hints may be incomplete.  This may be the case if:
   * - The client is syncing for the first time.
   * - The client has just restarted and it was unable to keep track of
   *   invalidations that were received prior to the restart.
   * - The client's connection to the invalidation server is currently or
   *   was recently broken.
   * It's difficult to provide more details here.  This is implemented by
   * setting the flag to false whenever anything that might adversely affect
   * notifications happens (eg. a crash, restart on a platform that doesn't
   * support invalidation ack-tracking, transient invalidation error) and is
   * unset only after we've experienced one successful sync cycle while
   * notifications were enabled.
   * This flag was introduced in M29.
   * </pre>
   *
   * <code>optional bool invalidations_out_of_sync = 3;</code>
   */
  public boolean hasInvalidationsOutOfSync() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * This flag is set when the client suspects that its list of invalidation
   * hints may be incomplete.  This may be the case if:
   * - The client is syncing for the first time.
   * - The client has just restarted and it was unable to keep track of
   *   invalidations that were received prior to the restart.
   * - The client's connection to the invalidation server is currently or
   *   was recently broken.
   * It's difficult to provide more details here.  This is implemented by
   * setting the flag to false whenever anything that might adversely affect
   * notifications happens (eg. a crash, restart on a platform that doesn't
   * support invalidation ack-tracking, transient invalidation error) and is
   * unset only after we've experienced one successful sync cycle while
   * notifications were enabled.
   * This flag was introduced in M29.
   * </pre>
   *
   * <code>optional bool invalidations_out_of_sync = 3;</code>
   */
  public boolean getInvalidationsOutOfSync() {
    return invalidationsOutOfSync_;
  }
  /**
   * <pre>
   * This flag is set when the client suspects that its list of invalidation
   * hints may be incomplete.  This may be the case if:
   * - The client is syncing for the first time.
   * - The client has just restarted and it was unable to keep track of
   *   invalidations that were received prior to the restart.
   * - The client's connection to the invalidation server is currently or
   *   was recently broken.
   * It's difficult to provide more details here.  This is implemented by
   * setting the flag to false whenever anything that might adversely affect
   * notifications happens (eg. a crash, restart on a platform that doesn't
   * support invalidation ack-tracking, transient invalidation error) and is
   * unset only after we've experienced one successful sync cycle while
   * notifications were enabled.
   * This flag was introduced in M29.
   * </pre>
   *
   * <code>optional bool invalidations_out_of_sync = 3;</code>
   */
  private void setInvalidationsOutOfSync(boolean value) {
    bitField0_ |= 0x00000002;
    invalidationsOutOfSync_ = value;
  }
  /**
   * <pre>
   * This flag is set when the client suspects that its list of invalidation
   * hints may be incomplete.  This may be the case if:
   * - The client is syncing for the first time.
   * - The client has just restarted and it was unable to keep track of
   *   invalidations that were received prior to the restart.
   * - The client's connection to the invalidation server is currently or
   *   was recently broken.
   * It's difficult to provide more details here.  This is implemented by
   * setting the flag to false whenever anything that might adversely affect
   * notifications happens (eg. a crash, restart on a platform that doesn't
   * support invalidation ack-tracking, transient invalidation error) and is
   * unset only after we've experienced one successful sync cycle while
   * notifications were enabled.
   * This flag was introduced in M29.
   * </pre>
   *
   * <code>optional bool invalidations_out_of_sync = 3;</code>
   */
  private void clearInvalidationsOutOfSync() {
    bitField0_ = (bitField0_ & ~0x00000002);
    invalidationsOutOfSync_ = false;
  }

  public static final int LOCAL_MODIFICATION_NUDGES_FIELD_NUMBER = 4;
  private long localModificationNudges_;
  /**
   * <pre>
   * This counts the number of times the syncer has been asked to commit
   * changes for this type since the last successful sync cycle.  The number of
   * nudges may not be related to the actual number of items modified.  It
   * often correlates with the number of user actions, but that's not always
   * the case.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 local_modification_nudges = 4;</code>
   */
  public boolean hasLocalModificationNudges() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * This counts the number of times the syncer has been asked to commit
   * changes for this type since the last successful sync cycle.  The number of
   * nudges may not be related to the actual number of items modified.  It
   * often correlates with the number of user actions, but that's not always
   * the case.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 local_modification_nudges = 4;</code>
   */
  public long getLocalModificationNudges() {
    return localModificationNudges_;
  }
  /**
   * <pre>
   * This counts the number of times the syncer has been asked to commit
   * changes for this type since the last successful sync cycle.  The number of
   * nudges may not be related to the actual number of items modified.  It
   * often correlates with the number of user actions, but that's not always
   * the case.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 local_modification_nudges = 4;</code>
   */
  private void setLocalModificationNudges(long value) {
    bitField0_ |= 0x00000004;
    localModificationNudges_ = value;
  }
  /**
   * <pre>
   * This counts the number of times the syncer has been asked to commit
   * changes for this type since the last successful sync cycle.  The number of
   * nudges may not be related to the actual number of items modified.  It
   * often correlates with the number of user actions, but that's not always
   * the case.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 local_modification_nudges = 4;</code>
   */
  private void clearLocalModificationNudges() {
    bitField0_ = (bitField0_ & ~0x00000004);
    localModificationNudges_ = 0L;
  }

  public static final int DATATYPE_REFRESH_NUDGES_FIELD_NUMBER = 5;
  private long datatypeRefreshNudges_;
  /**
   * <pre>
   * This counts the number of times the syncer has been explicitly asked to
   * fetch updates for this type since the last successful sync cycle.  These
   * explicit refresh requests should be relatively rare on most platforms, and
   * associated with user actions.  For example, at the time of this writing
   * the most common (only?) source of refresh requests is when a user opens
   * the new tab page on a platform that does not support sessions
   * invalidations.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 datatype_refresh_nudges = 5;</code>
   */
  public boolean hasDatatypeRefreshNudges() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * This counts the number of times the syncer has been explicitly asked to
   * fetch updates for this type since the last successful sync cycle.  These
   * explicit refresh requests should be relatively rare on most platforms, and
   * associated with user actions.  For example, at the time of this writing
   * the most common (only?) source of refresh requests is when a user opens
   * the new tab page on a platform that does not support sessions
   * invalidations.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 datatype_refresh_nudges = 5;</code>
   */
  public long getDatatypeRefreshNudges() {
    return datatypeRefreshNudges_;
  }
  /**
   * <pre>
   * This counts the number of times the syncer has been explicitly asked to
   * fetch updates for this type since the last successful sync cycle.  These
   * explicit refresh requests should be relatively rare on most platforms, and
   * associated with user actions.  For example, at the time of this writing
   * the most common (only?) source of refresh requests is when a user opens
   * the new tab page on a platform that does not support sessions
   * invalidations.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 datatype_refresh_nudges = 5;</code>
   */
  private void setDatatypeRefreshNudges(long value) {
    bitField0_ |= 0x00000008;
    datatypeRefreshNudges_ = value;
  }
  /**
   * <pre>
   * This counts the number of times the syncer has been explicitly asked to
   * fetch updates for this type since the last successful sync cycle.  These
   * explicit refresh requests should be relatively rare on most platforms, and
   * associated with user actions.  For example, at the time of this writing
   * the most common (only?) source of refresh requests is when a user opens
   * the new tab page on a platform that does not support sessions
   * invalidations.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 datatype_refresh_nudges = 5;</code>
   */
  private void clearDatatypeRefreshNudges() {
    bitField0_ = (bitField0_ & ~0x00000008);
    datatypeRefreshNudges_ = 0L;
  }

  public static final int SERVER_DROPPED_HINTS_FIELD_NUMBER = 6;
  private boolean serverDroppedHints_;
  /**
   * <pre>
   * This flag is set if the invalidation server reports that it may have
   * dropped some invalidations at some point.  Introduced in M33.
   * </pre>
   *
   * <code>optional bool server_dropped_hints = 6;</code>
   */
  public boolean hasServerDroppedHints() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <pre>
   * This flag is set if the invalidation server reports that it may have
   * dropped some invalidations at some point.  Introduced in M33.
   * </pre>
   *
   * <code>optional bool server_dropped_hints = 6;</code>
   */
  public boolean getServerDroppedHints() {
    return serverDroppedHints_;
  }
  /**
   * <pre>
   * This flag is set if the invalidation server reports that it may have
   * dropped some invalidations at some point.  Introduced in M33.
   * </pre>
   *
   * <code>optional bool server_dropped_hints = 6;</code>
   */
  private void setServerDroppedHints(boolean value) {
    bitField0_ |= 0x00000010;
    serverDroppedHints_ = value;
  }
  /**
   * <pre>
   * This flag is set if the invalidation server reports that it may have
   * dropped some invalidations at some point.  Introduced in M33.
   * </pre>
   *
   * <code>optional bool server_dropped_hints = 6;</code>
   */
  private void clearServerDroppedHints() {
    bitField0_ = (bitField0_ & ~0x00000010);
    serverDroppedHints_ = false;
  }

  public static final int INITIAL_SYNC_IN_PROGRESS_FIELD_NUMBER = 7;
  private boolean initialSyncInProgress_;
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due at least in part due
   * to the fact that this type has not finished initial sync yet, and the
   * client would like to initialize itself with the server data.
   * Only some types support performing an initial sync as part of a normal
   * GetUpdate request.  Many types must be in configure mode when fetching
   * initial sync data.
   * Introduced in M38.
   * </pre>
   *
   * <code>optional bool initial_sync_in_progress = 7;</code>
   */
  public boolean hasInitialSyncInProgress() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due at least in part due
   * to the fact that this type has not finished initial sync yet, and the
   * client would like to initialize itself with the server data.
   * Only some types support performing an initial sync as part of a normal
   * GetUpdate request.  Many types must be in configure mode when fetching
   * initial sync data.
   * Introduced in M38.
   * </pre>
   *
   * <code>optional bool initial_sync_in_progress = 7;</code>
   */
  public boolean getInitialSyncInProgress() {
    return initialSyncInProgress_;
  }
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due at least in part due
   * to the fact that this type has not finished initial sync yet, and the
   * client would like to initialize itself with the server data.
   * Only some types support performing an initial sync as part of a normal
   * GetUpdate request.  Many types must be in configure mode when fetching
   * initial sync data.
   * Introduced in M38.
   * </pre>
   *
   * <code>optional bool initial_sync_in_progress = 7;</code>
   */
  private void setInitialSyncInProgress(boolean value) {
    bitField0_ |= 0x00000020;
    initialSyncInProgress_ = value;
  }
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due at least in part due
   * to the fact that this type has not finished initial sync yet, and the
   * client would like to initialize itself with the server data.
   * Only some types support performing an initial sync as part of a normal
   * GetUpdate request.  Many types must be in configure mode when fetching
   * initial sync data.
   * Introduced in M38.
   * </pre>
   *
   * <code>optional bool initial_sync_in_progress = 7;</code>
   */
  private void clearInitialSyncInProgress() {
    bitField0_ = (bitField0_ & ~0x00000020);
    initialSyncInProgress_ = false;
  }

  public static final int SYNC_FOR_RESOLVE_CONFLICT_IN_PROGRESS_FIELD_NUMBER = 8;
  private boolean syncForResolveConflictInProgress_;
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due to client receiving
   * conflict response from server, so client needs to sync and then resolve
   * conflict locally, and then commit again.
   * Introduced in M42.
   * </pre>
   *
   * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
   */
  public boolean hasSyncForResolveConflictInProgress() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due to client receiving
   * conflict response from server, so client needs to sync and then resolve
   * conflict locally, and then commit again.
   * Introduced in M42.
   * </pre>
   *
   * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
   */
  public boolean getSyncForResolveConflictInProgress() {
    return syncForResolveConflictInProgress_;
  }
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due to client receiving
   * conflict response from server, so client needs to sync and then resolve
   * conflict locally, and then commit again.
   * Introduced in M42.
   * </pre>
   *
   * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
   */
  private void setSyncForResolveConflictInProgress(boolean value) {
    bitField0_ |= 0x00000040;
    syncForResolveConflictInProgress_ = value;
  }
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due to client receiving
   * conflict response from server, so client needs to sync and then resolve
   * conflict locally, and then commit again.
   * Introduced in M42.
   * </pre>
   *
   * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
   */
  private void clearSyncForResolveConflictInProgress() {
    bitField0_ = (bitField0_ & ~0x00000040);
    syncForResolveConflictInProgress_ = false;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < notificationHint_.size(); i++) {
      output.writeString(1, notificationHint_.get(i));
    }
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeBool(2, clientDroppedHints_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeBool(3, invalidationsOutOfSync_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt64(4, localModificationNudges_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeInt64(5, datatypeRefreshNudges_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeBool(6, serverDroppedHints_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeBool(7, initialSyncInProgress_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeBool(8, syncForResolveConflictInProgress_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < notificationHint_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeStringSizeNoTag(notificationHint_.get(i));
      }
      size += dataSize;
      size += 1 * getNotificationHintList().size();
    }
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, clientDroppedHints_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, invalidationsOutOfSync_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(4, localModificationNudges_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(5, datatypeRefreshNudges_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, serverDroppedHints_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, initialSyncInProgress_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, syncForResolveConflictInProgress_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.GetUpdateTriggers prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * This message communicates additional per-type information related to
   * requests with origin GU_TRIGGER.  This message is not relevant when any
   * other origin value is used.
   * Introduced in M29.
   * </pre>
   *
   * Protobuf type {@code sync_pb.GetUpdateTriggers}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.GetUpdateTriggers, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.GetUpdateTriggers)
      org.chromium.components.sync.protocol.GetUpdateTriggersOrBuilder {
    // Construct using org.chromium.components.sync.protocol.GetUpdateTriggers.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     */
    public java.util.List<String>
        getNotificationHintList() {
      return java.util.Collections.unmodifiableList(
          instance.getNotificationHintList());
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     */
    public int getNotificationHintCount() {
      return instance.getNotificationHintCount();
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     */
    public java.lang.String getNotificationHint(int index) {
      return instance.getNotificationHint(index);
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNotificationHintBytes(int index) {
      return instance.getNotificationHintBytes(index);
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     */
    public Builder setNotificationHint(
        int index, java.lang.String value) {
      copyOnWrite();
      instance.setNotificationHint(index, value);
      return this;
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     */
    public Builder addNotificationHint(
        java.lang.String value) {
      copyOnWrite();
      instance.addNotificationHint(value);
      return this;
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     */
    public Builder addAllNotificationHint(
        java.lang.Iterable<java.lang.String> values) {
      copyOnWrite();
      instance.addAllNotificationHint(values);
      return this;
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     */
    public Builder clearNotificationHint() {
      copyOnWrite();
      instance.clearNotificationHint();
      return this;
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     */
    public Builder addNotificationHintBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.addNotificationHintBytes(value);
      return this;
    }

    /**
     * <pre>
     * This flag is set if the client was forced to drop hints because the number
     * of queued hints exceeded its limit.  The oldest hints will be discarded
     * first.  Introduced in M29.
     * </pre>
     *
     * <code>optional bool client_dropped_hints = 2;</code>
     */
    public boolean hasClientDroppedHints() {
      return instance.hasClientDroppedHints();
    }
    /**
     * <pre>
     * This flag is set if the client was forced to drop hints because the number
     * of queued hints exceeded its limit.  The oldest hints will be discarded
     * first.  Introduced in M29.
     * </pre>
     *
     * <code>optional bool client_dropped_hints = 2;</code>
     */
    public boolean getClientDroppedHints() {
      return instance.getClientDroppedHints();
    }
    /**
     * <pre>
     * This flag is set if the client was forced to drop hints because the number
     * of queued hints exceeded its limit.  The oldest hints will be discarded
     * first.  Introduced in M29.
     * </pre>
     *
     * <code>optional bool client_dropped_hints = 2;</code>
     */
    public Builder setClientDroppedHints(boolean value) {
      copyOnWrite();
      instance.setClientDroppedHints(value);
      return this;
    }
    /**
     * <pre>
     * This flag is set if the client was forced to drop hints because the number
     * of queued hints exceeded its limit.  The oldest hints will be discarded
     * first.  Introduced in M29.
     * </pre>
     *
     * <code>optional bool client_dropped_hints = 2;</code>
     */
    public Builder clearClientDroppedHints() {
      copyOnWrite();
      instance.clearClientDroppedHints();
      return this;
    }

    /**
     * <pre>
     * This flag is set when the client suspects that its list of invalidation
     * hints may be incomplete.  This may be the case if:
     * - The client is syncing for the first time.
     * - The client has just restarted and it was unable to keep track of
     *   invalidations that were received prior to the restart.
     * - The client's connection to the invalidation server is currently or
     *   was recently broken.
     * It's difficult to provide more details here.  This is implemented by
     * setting the flag to false whenever anything that might adversely affect
     * notifications happens (eg. a crash, restart on a platform that doesn't
     * support invalidation ack-tracking, transient invalidation error) and is
     * unset only after we've experienced one successful sync cycle while
     * notifications were enabled.
     * This flag was introduced in M29.
     * </pre>
     *
     * <code>optional bool invalidations_out_of_sync = 3;</code>
     */
    public boolean hasInvalidationsOutOfSync() {
      return instance.hasInvalidationsOutOfSync();
    }
    /**
     * <pre>
     * This flag is set when the client suspects that its list of invalidation
     * hints may be incomplete.  This may be the case if:
     * - The client is syncing for the first time.
     * - The client has just restarted and it was unable to keep track of
     *   invalidations that were received prior to the restart.
     * - The client's connection to the invalidation server is currently or
     *   was recently broken.
     * It's difficult to provide more details here.  This is implemented by
     * setting the flag to false whenever anything that might adversely affect
     * notifications happens (eg. a crash, restart on a platform that doesn't
     * support invalidation ack-tracking, transient invalidation error) and is
     * unset only after we've experienced one successful sync cycle while
     * notifications were enabled.
     * This flag was introduced in M29.
     * </pre>
     *
     * <code>optional bool invalidations_out_of_sync = 3;</code>
     */
    public boolean getInvalidationsOutOfSync() {
      return instance.getInvalidationsOutOfSync();
    }
    /**
     * <pre>
     * This flag is set when the client suspects that its list of invalidation
     * hints may be incomplete.  This may be the case if:
     * - The client is syncing for the first time.
     * - The client has just restarted and it was unable to keep track of
     *   invalidations that were received prior to the restart.
     * - The client's connection to the invalidation server is currently or
     *   was recently broken.
     * It's difficult to provide more details here.  This is implemented by
     * setting the flag to false whenever anything that might adversely affect
     * notifications happens (eg. a crash, restart on a platform that doesn't
     * support invalidation ack-tracking, transient invalidation error) and is
     * unset only after we've experienced one successful sync cycle while
     * notifications were enabled.
     * This flag was introduced in M29.
     * </pre>
     *
     * <code>optional bool invalidations_out_of_sync = 3;</code>
     */
    public Builder setInvalidationsOutOfSync(boolean value) {
      copyOnWrite();
      instance.setInvalidationsOutOfSync(value);
      return this;
    }
    /**
     * <pre>
     * This flag is set when the client suspects that its list of invalidation
     * hints may be incomplete.  This may be the case if:
     * - The client is syncing for the first time.
     * - The client has just restarted and it was unable to keep track of
     *   invalidations that were received prior to the restart.
     * - The client's connection to the invalidation server is currently or
     *   was recently broken.
     * It's difficult to provide more details here.  This is implemented by
     * setting the flag to false whenever anything that might adversely affect
     * notifications happens (eg. a crash, restart on a platform that doesn't
     * support invalidation ack-tracking, transient invalidation error) and is
     * unset only after we've experienced one successful sync cycle while
     * notifications were enabled.
     * This flag was introduced in M29.
     * </pre>
     *
     * <code>optional bool invalidations_out_of_sync = 3;</code>
     */
    public Builder clearInvalidationsOutOfSync() {
      copyOnWrite();
      instance.clearInvalidationsOutOfSync();
      return this;
    }

    /**
     * <pre>
     * This counts the number of times the syncer has been asked to commit
     * changes for this type since the last successful sync cycle.  The number of
     * nudges may not be related to the actual number of items modified.  It
     * often correlates with the number of user actions, but that's not always
     * the case.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional int64 local_modification_nudges = 4;</code>
     */
    public boolean hasLocalModificationNudges() {
      return instance.hasLocalModificationNudges();
    }
    /**
     * <pre>
     * This counts the number of times the syncer has been asked to commit
     * changes for this type since the last successful sync cycle.  The number of
     * nudges may not be related to the actual number of items modified.  It
     * often correlates with the number of user actions, but that's not always
     * the case.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional int64 local_modification_nudges = 4;</code>
     */
    public long getLocalModificationNudges() {
      return instance.getLocalModificationNudges();
    }
    /**
     * <pre>
     * This counts the number of times the syncer has been asked to commit
     * changes for this type since the last successful sync cycle.  The number of
     * nudges may not be related to the actual number of items modified.  It
     * often correlates with the number of user actions, but that's not always
     * the case.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional int64 local_modification_nudges = 4;</code>
     */
    public Builder setLocalModificationNudges(long value) {
      copyOnWrite();
      instance.setLocalModificationNudges(value);
      return this;
    }
    /**
     * <pre>
     * This counts the number of times the syncer has been asked to commit
     * changes for this type since the last successful sync cycle.  The number of
     * nudges may not be related to the actual number of items modified.  It
     * often correlates with the number of user actions, but that's not always
     * the case.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional int64 local_modification_nudges = 4;</code>
     */
    public Builder clearLocalModificationNudges() {
      copyOnWrite();
      instance.clearLocalModificationNudges();
      return this;
    }

    /**
     * <pre>
     * This counts the number of times the syncer has been explicitly asked to
     * fetch updates for this type since the last successful sync cycle.  These
     * explicit refresh requests should be relatively rare on most platforms, and
     * associated with user actions.  For example, at the time of this writing
     * the most common (only?) source of refresh requests is when a user opens
     * the new tab page on a platform that does not support sessions
     * invalidations.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional int64 datatype_refresh_nudges = 5;</code>
     */
    public boolean hasDatatypeRefreshNudges() {
      return instance.hasDatatypeRefreshNudges();
    }
    /**
     * <pre>
     * This counts the number of times the syncer has been explicitly asked to
     * fetch updates for this type since the last successful sync cycle.  These
     * explicit refresh requests should be relatively rare on most platforms, and
     * associated with user actions.  For example, at the time of this writing
     * the most common (only?) source of refresh requests is when a user opens
     * the new tab page on a platform that does not support sessions
     * invalidations.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional int64 datatype_refresh_nudges = 5;</code>
     */
    public long getDatatypeRefreshNudges() {
      return instance.getDatatypeRefreshNudges();
    }
    /**
     * <pre>
     * This counts the number of times the syncer has been explicitly asked to
     * fetch updates for this type since the last successful sync cycle.  These
     * explicit refresh requests should be relatively rare on most platforms, and
     * associated with user actions.  For example, at the time of this writing
     * the most common (only?) source of refresh requests is when a user opens
     * the new tab page on a platform that does not support sessions
     * invalidations.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional int64 datatype_refresh_nudges = 5;</code>
     */
    public Builder setDatatypeRefreshNudges(long value) {
      copyOnWrite();
      instance.setDatatypeRefreshNudges(value);
      return this;
    }
    /**
     * <pre>
     * This counts the number of times the syncer has been explicitly asked to
     * fetch updates for this type since the last successful sync cycle.  These
     * explicit refresh requests should be relatively rare on most platforms, and
     * associated with user actions.  For example, at the time of this writing
     * the most common (only?) source of refresh requests is when a user opens
     * the new tab page on a platform that does not support sessions
     * invalidations.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional int64 datatype_refresh_nudges = 5;</code>
     */
    public Builder clearDatatypeRefreshNudges() {
      copyOnWrite();
      instance.clearDatatypeRefreshNudges();
      return this;
    }

    /**
     * <pre>
     * This flag is set if the invalidation server reports that it may have
     * dropped some invalidations at some point.  Introduced in M33.
     * </pre>
     *
     * <code>optional bool server_dropped_hints = 6;</code>
     */
    public boolean hasServerDroppedHints() {
      return instance.hasServerDroppedHints();
    }
    /**
     * <pre>
     * This flag is set if the invalidation server reports that it may have
     * dropped some invalidations at some point.  Introduced in M33.
     * </pre>
     *
     * <code>optional bool server_dropped_hints = 6;</code>
     */
    public boolean getServerDroppedHints() {
      return instance.getServerDroppedHints();
    }
    /**
     * <pre>
     * This flag is set if the invalidation server reports that it may have
     * dropped some invalidations at some point.  Introduced in M33.
     * </pre>
     *
     * <code>optional bool server_dropped_hints = 6;</code>
     */
    public Builder setServerDroppedHints(boolean value) {
      copyOnWrite();
      instance.setServerDroppedHints(value);
      return this;
    }
    /**
     * <pre>
     * This flag is set if the invalidation server reports that it may have
     * dropped some invalidations at some point.  Introduced in M33.
     * </pre>
     *
     * <code>optional bool server_dropped_hints = 6;</code>
     */
    public Builder clearServerDroppedHints() {
      copyOnWrite();
      instance.clearServerDroppedHints();
      return this;
    }

    /**
     * <pre>
     * This flag is set if this GetUpdate request is due at least in part due
     * to the fact that this type has not finished initial sync yet, and the
     * client would like to initialize itself with the server data.
     * Only some types support performing an initial sync as part of a normal
     * GetUpdate request.  Many types must be in configure mode when fetching
     * initial sync data.
     * Introduced in M38.
     * </pre>
     *
     * <code>optional bool initial_sync_in_progress = 7;</code>
     */
    public boolean hasInitialSyncInProgress() {
      return instance.hasInitialSyncInProgress();
    }
    /**
     * <pre>
     * This flag is set if this GetUpdate request is due at least in part due
     * to the fact that this type has not finished initial sync yet, and the
     * client would like to initialize itself with the server data.
     * Only some types support performing an initial sync as part of a normal
     * GetUpdate request.  Many types must be in configure mode when fetching
     * initial sync data.
     * Introduced in M38.
     * </pre>
     *
     * <code>optional bool initial_sync_in_progress = 7;</code>
     */
    public boolean getInitialSyncInProgress() {
      return instance.getInitialSyncInProgress();
    }
    /**
     * <pre>
     * This flag is set if this GetUpdate request is due at least in part due
     * to the fact that this type has not finished initial sync yet, and the
     * client would like to initialize itself with the server data.
     * Only some types support performing an initial sync as part of a normal
     * GetUpdate request.  Many types must be in configure mode when fetching
     * initial sync data.
     * Introduced in M38.
     * </pre>
     *
     * <code>optional bool initial_sync_in_progress = 7;</code>
     */
    public Builder setInitialSyncInProgress(boolean value) {
      copyOnWrite();
      instance.setInitialSyncInProgress(value);
      return this;
    }
    /**
     * <pre>
     * This flag is set if this GetUpdate request is due at least in part due
     * to the fact that this type has not finished initial sync yet, and the
     * client would like to initialize itself with the server data.
     * Only some types support performing an initial sync as part of a normal
     * GetUpdate request.  Many types must be in configure mode when fetching
     * initial sync data.
     * Introduced in M38.
     * </pre>
     *
     * <code>optional bool initial_sync_in_progress = 7;</code>
     */
    public Builder clearInitialSyncInProgress() {
      copyOnWrite();
      instance.clearInitialSyncInProgress();
      return this;
    }

    /**
     * <pre>
     * This flag is set if this GetUpdate request is due to client receiving
     * conflict response from server, so client needs to sync and then resolve
     * conflict locally, and then commit again.
     * Introduced in M42.
     * </pre>
     *
     * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
     */
    public boolean hasSyncForResolveConflictInProgress() {
      return instance.hasSyncForResolveConflictInProgress();
    }
    /**
     * <pre>
     * This flag is set if this GetUpdate request is due to client receiving
     * conflict response from server, so client needs to sync and then resolve
     * conflict locally, and then commit again.
     * Introduced in M42.
     * </pre>
     *
     * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
     */
    public boolean getSyncForResolveConflictInProgress() {
      return instance.getSyncForResolveConflictInProgress();
    }
    /**
     * <pre>
     * This flag is set if this GetUpdate request is due to client receiving
     * conflict response from server, so client needs to sync and then resolve
     * conflict locally, and then commit again.
     * Introduced in M42.
     * </pre>
     *
     * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
     */
    public Builder setSyncForResolveConflictInProgress(boolean value) {
      copyOnWrite();
      instance.setSyncForResolveConflictInProgress(value);
      return this;
    }
    /**
     * <pre>
     * This flag is set if this GetUpdate request is due to client receiving
     * conflict response from server, so client needs to sync and then resolve
     * conflict locally, and then commit again.
     * Introduced in M42.
     * </pre>
     *
     * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
     */
    public Builder clearSyncForResolveConflictInProgress() {
      copyOnWrite();
      instance.clearSyncForResolveConflictInProgress();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.GetUpdateTriggers)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.GetUpdateTriggers();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        notificationHint_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.GetUpdateTriggers other = (org.chromium.components.sync.protocol.GetUpdateTriggers) arg1;
        notificationHint_= visitor.visitList(notificationHint_, other.notificationHint_);
        clientDroppedHints_ = visitor.visitBoolean(
            hasClientDroppedHints(), clientDroppedHints_,
            other.hasClientDroppedHints(), other.clientDroppedHints_);
        invalidationsOutOfSync_ = visitor.visitBoolean(
            hasInvalidationsOutOfSync(), invalidationsOutOfSync_,
            other.hasInvalidationsOutOfSync(), other.invalidationsOutOfSync_);
        localModificationNudges_ = visitor.visitLong(
            hasLocalModificationNudges(), localModificationNudges_,
            other.hasLocalModificationNudges(), other.localModificationNudges_);
        datatypeRefreshNudges_ = visitor.visitLong(
            hasDatatypeRefreshNudges(), datatypeRefreshNudges_,
            other.hasDatatypeRefreshNudges(), other.datatypeRefreshNudges_);
        serverDroppedHints_ = visitor.visitBoolean(
            hasServerDroppedHints(), serverDroppedHints_,
            other.hasServerDroppedHints(), other.serverDroppedHints_);
        initialSyncInProgress_ = visitor.visitBoolean(
            hasInitialSyncInProgress(), initialSyncInProgress_,
            other.hasInitialSyncInProgress(), other.initialSyncInProgress_);
        syncForResolveConflictInProgress_ = visitor.visitBoolean(
            hasSyncForResolveConflictInProgress(), syncForResolveConflictInProgress_,
            other.hasSyncForResolveConflictInProgress(), other.syncForResolveConflictInProgress_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                if (!notificationHint_.isModifiable()) {
                  notificationHint_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(notificationHint_);
                }
                notificationHint_.add(s);
                break;
              }
              case 16: {
                bitField0_ |= 0x00000001;
                clientDroppedHints_ = input.readBool();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000002;
                invalidationsOutOfSync_ = input.readBool();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000004;
                localModificationNudges_ = input.readInt64();
                break;
              }
              case 40: {
                bitField0_ |= 0x00000008;
                datatypeRefreshNudges_ = input.readInt64();
                break;
              }
              case 48: {
                bitField0_ |= 0x00000010;
                serverDroppedHints_ = input.readBool();
                break;
              }
              case 56: {
                bitField0_ |= 0x00000020;
                initialSyncInProgress_ = input.readBool();
                break;
              }
              case 64: {
                bitField0_ |= 0x00000040;
                syncForResolveConflictInProgress_ = input.readBool();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.GetUpdateTriggers.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.GetUpdateTriggers)
  private static final org.chromium.components.sync.protocol.GetUpdateTriggers DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new GetUpdateTriggers();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.GetUpdateTriggers getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<GetUpdateTriggers> PARSER;

  public static com.google.protobuf.Parser<GetUpdateTriggers> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

