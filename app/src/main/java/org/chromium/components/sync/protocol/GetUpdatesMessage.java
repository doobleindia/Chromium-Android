// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync.proto

package org.chromium.components.sync.protocol;

/**
 * Protobuf type {@code sync_pb.GetUpdatesMessage}
 */
public  final class GetUpdatesMessage extends
    com.google.protobuf.GeneratedMessageLite<
        GetUpdatesMessage, GetUpdatesMessage.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.GetUpdatesMessage)
    GetUpdatesMessageOrBuilder {
  private GetUpdatesMessage() {
    fetchFolders_ = true;
    fromProgressMarker_ = emptyProtobufList();
    clientContexts_ = emptyProtobufList();
  }
  private int bitField0_;
  public static final int CALLER_INFO_FIELD_NUMBER = 2;
  private org.chromium.components.sync.protocol.GetUpdatesCallerInfo callerInfo_;
  /**
   * <pre>
   * Indicates the reason for the GetUpdatesMessage.
   * This was *mostly* deprecated in M29.  GetUpdatesOrigin is the new way to
   * encode the reason for the GetUpdates request, but some parts of the server
   * still rely on this field.  It also still contains the
   * "notifications_enabled" flag which needs to be moved elsewhere before this
   * can be fully removed. See https://crbug.com/510165.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;</code>
   */
  public boolean hasCallerInfo() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * Indicates the reason for the GetUpdatesMessage.
   * This was *mostly* deprecated in M29.  GetUpdatesOrigin is the new way to
   * encode the reason for the GetUpdates request, but some parts of the server
   * still rely on this field.  It also still contains the
   * "notifications_enabled" flag which needs to be moved elsewhere before this
   * can be fully removed. See https://crbug.com/510165.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;</code>
   */
  public org.chromium.components.sync.protocol.GetUpdatesCallerInfo getCallerInfo() {
    return callerInfo_ == null ? org.chromium.components.sync.protocol.GetUpdatesCallerInfo.getDefaultInstance() : callerInfo_;
  }
  /**
   * <pre>
   * Indicates the reason for the GetUpdatesMessage.
   * This was *mostly* deprecated in M29.  GetUpdatesOrigin is the new way to
   * encode the reason for the GetUpdates request, but some parts of the server
   * still rely on this field.  It also still contains the
   * "notifications_enabled" flag which needs to be moved elsewhere before this
   * can be fully removed. See https://crbug.com/510165.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;</code>
   */
  private void setCallerInfo(org.chromium.components.sync.protocol.GetUpdatesCallerInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    callerInfo_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * Indicates the reason for the GetUpdatesMessage.
   * This was *mostly* deprecated in M29.  GetUpdatesOrigin is the new way to
   * encode the reason for the GetUpdates request, but some parts of the server
   * still rely on this field.  It also still contains the
   * "notifications_enabled" flag which needs to be moved elsewhere before this
   * can be fully removed. See https://crbug.com/510165.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;</code>
   */
  private void setCallerInfo(
      org.chromium.components.sync.protocol.GetUpdatesCallerInfo.Builder builderForValue) {
    callerInfo_ = builderForValue.build();
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * Indicates the reason for the GetUpdatesMessage.
   * This was *mostly* deprecated in M29.  GetUpdatesOrigin is the new way to
   * encode the reason for the GetUpdates request, but some parts of the server
   * still rely on this field.  It also still contains the
   * "notifications_enabled" flag which needs to be moved elsewhere before this
   * can be fully removed. See https://crbug.com/510165.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;</code>
   */
  private void mergeCallerInfo(org.chromium.components.sync.protocol.GetUpdatesCallerInfo value) {
    if (callerInfo_ != null &&
        callerInfo_ != org.chromium.components.sync.protocol.GetUpdatesCallerInfo.getDefaultInstance()) {
      callerInfo_ =
        org.chromium.components.sync.protocol.GetUpdatesCallerInfo.newBuilder(callerInfo_).mergeFrom(value).buildPartial();
    } else {
      callerInfo_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * Indicates the reason for the GetUpdatesMessage.
   * This was *mostly* deprecated in M29.  GetUpdatesOrigin is the new way to
   * encode the reason for the GetUpdates request, but some parts of the server
   * still rely on this field.  It also still contains the
   * "notifications_enabled" flag which needs to be moved elsewhere before this
   * can be fully removed. See https://crbug.com/510165.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;</code>
   */
  private void clearCallerInfo() {  callerInfo_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int FETCH_FOLDERS_FIELD_NUMBER = 3;
  private boolean fetchFolders_;
  /**
   * <pre>
   * Indicates whether related folders should be fetched.
   * </pre>
   *
   * <code>optional bool fetch_folders = 3 [default = true];</code>
   */
  public boolean hasFetchFolders() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * Indicates whether related folders should be fetched.
   * </pre>
   *
   * <code>optional bool fetch_folders = 3 [default = true];</code>
   */
  public boolean getFetchFolders() {
    return fetchFolders_;
  }
  /**
   * <pre>
   * Indicates whether related folders should be fetched.
   * </pre>
   *
   * <code>optional bool fetch_folders = 3 [default = true];</code>
   */
  private void setFetchFolders(boolean value) {
    bitField0_ |= 0x00000002;
    fetchFolders_ = value;
  }
  /**
   * <pre>
   * Indicates whether related folders should be fetched.
   * </pre>
   *
   * <code>optional bool fetch_folders = 3 [default = true];</code>
   */
  private void clearFetchFolders() {
    bitField0_ = (bitField0_ & ~0x00000002);
    fetchFolders_ = true;
  }

  public static final int BATCH_SIZE_FIELD_NUMBER = 5;
  private int batchSize_;
  /**
   * <pre>
   * Client-requested limit on the maximum number of updates to return at once.
   * The server may opt to return fewer updates than this amount, but it should
   * not return more.
   * </pre>
   *
   * <code>optional int32 batch_size = 5;</code>
   */
  public boolean hasBatchSize() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * Client-requested limit on the maximum number of updates to return at once.
   * The server may opt to return fewer updates than this amount, but it should
   * not return more.
   * </pre>
   *
   * <code>optional int32 batch_size = 5;</code>
   */
  public int getBatchSize() {
    return batchSize_;
  }
  /**
   * <pre>
   * Client-requested limit on the maximum number of updates to return at once.
   * The server may opt to return fewer updates than this amount, but it should
   * not return more.
   * </pre>
   *
   * <code>optional int32 batch_size = 5;</code>
   */
  private void setBatchSize(int value) {
    bitField0_ |= 0x00000004;
    batchSize_ = value;
  }
  /**
   * <pre>
   * Client-requested limit on the maximum number of updates to return at once.
   * The server may opt to return fewer updates than this amount, but it should
   * not return more.
   * </pre>
   *
   * <code>optional int32 batch_size = 5;</code>
   */
  private void clearBatchSize() {
    bitField0_ = (bitField0_ & ~0x00000004);
    batchSize_ = 0;
  }

  public static final int FROM_PROGRESS_MARKER_FIELD_NUMBER = 6;
  private com.google.protobuf.Internal.ProtobufList<org.chromium.components.sync.protocol.DataTypeProgressMarker> fromProgressMarker_;
  /**
   * <pre>
   * Per-datatype progress marker.  If present, the server will ignore
   * the values of requested_types and from_timestamp, using this instead.
   * With the exception of certain configuration or initial sync requests, the
   * client should include one instance of this field for each enabled data
   * type.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
   */
  public java.util.List<org.chromium.components.sync.protocol.DataTypeProgressMarker> getFromProgressMarkerList() {
    return fromProgressMarker_;
  }
  /**
   * <pre>
   * Per-datatype progress marker.  If present, the server will ignore
   * the values of requested_types and from_timestamp, using this instead.
   * With the exception of certain configuration or initial sync requests, the
   * client should include one instance of this field for each enabled data
   * type.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
   */
  public java.util.List<? extends org.chromium.components.sync.protocol.DataTypeProgressMarkerOrBuilder> 
      getFromProgressMarkerOrBuilderList() {
    return fromProgressMarker_;
  }
  /**
   * <pre>
   * Per-datatype progress marker.  If present, the server will ignore
   * the values of requested_types and from_timestamp, using this instead.
   * With the exception of certain configuration or initial sync requests, the
   * client should include one instance of this field for each enabled data
   * type.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
   */
  public int getFromProgressMarkerCount() {
    return fromProgressMarker_.size();
  }
  /**
   * <pre>
   * Per-datatype progress marker.  If present, the server will ignore
   * the values of requested_types and from_timestamp, using this instead.
   * With the exception of certain configuration or initial sync requests, the
   * client should include one instance of this field for each enabled data
   * type.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
   */
  public org.chromium.components.sync.protocol.DataTypeProgressMarker getFromProgressMarker(int index) {
    return fromProgressMarker_.get(index);
  }
  /**
   * <pre>
   * Per-datatype progress marker.  If present, the server will ignore
   * the values of requested_types and from_timestamp, using this instead.
   * With the exception of certain configuration or initial sync requests, the
   * client should include one instance of this field for each enabled data
   * type.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
   */
  public org.chromium.components.sync.protocol.DataTypeProgressMarkerOrBuilder getFromProgressMarkerOrBuilder(
      int index) {
    return fromProgressMarker_.get(index);
  }
  private void ensureFromProgressMarkerIsMutable() {
    if (!fromProgressMarker_.isModifiable()) {
      fromProgressMarker_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(fromProgressMarker_);
     }
  }

  /**
   * <pre>
   * Per-datatype progress marker.  If present, the server will ignore
   * the values of requested_types and from_timestamp, using this instead.
   * With the exception of certain configuration or initial sync requests, the
   * client should include one instance of this field for each enabled data
   * type.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
   */
  private void setFromProgressMarker(
      int index, org.chromium.components.sync.protocol.DataTypeProgressMarker value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureFromProgressMarkerIsMutable();
    fromProgressMarker_.set(index, value);
  }
  /**
   * <pre>
   * Per-datatype progress marker.  If present, the server will ignore
   * the values of requested_types and from_timestamp, using this instead.
   * With the exception of certain configuration or initial sync requests, the
   * client should include one instance of this field for each enabled data
   * type.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
   */
  private void setFromProgressMarker(
      int index, org.chromium.components.sync.protocol.DataTypeProgressMarker.Builder builderForValue) {
    ensureFromProgressMarkerIsMutable();
    fromProgressMarker_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * Per-datatype progress marker.  If present, the server will ignore
   * the values of requested_types and from_timestamp, using this instead.
   * With the exception of certain configuration or initial sync requests, the
   * client should include one instance of this field for each enabled data
   * type.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
   */
  private void addFromProgressMarker(org.chromium.components.sync.protocol.DataTypeProgressMarker value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureFromProgressMarkerIsMutable();
    fromProgressMarker_.add(value);
  }
  /**
   * <pre>
   * Per-datatype progress marker.  If present, the server will ignore
   * the values of requested_types and from_timestamp, using this instead.
   * With the exception of certain configuration or initial sync requests, the
   * client should include one instance of this field for each enabled data
   * type.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
   */
  private void addFromProgressMarker(
      int index, org.chromium.components.sync.protocol.DataTypeProgressMarker value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureFromProgressMarkerIsMutable();
    fromProgressMarker_.add(index, value);
  }
  /**
   * <pre>
   * Per-datatype progress marker.  If present, the server will ignore
   * the values of requested_types and from_timestamp, using this instead.
   * With the exception of certain configuration or initial sync requests, the
   * client should include one instance of this field for each enabled data
   * type.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
   */
  private void addFromProgressMarker(
      org.chromium.components.sync.protocol.DataTypeProgressMarker.Builder builderForValue) {
    ensureFromProgressMarkerIsMutable();
    fromProgressMarker_.add(builderForValue.build());
  }
  /**
   * <pre>
   * Per-datatype progress marker.  If present, the server will ignore
   * the values of requested_types and from_timestamp, using this instead.
   * With the exception of certain configuration or initial sync requests, the
   * client should include one instance of this field for each enabled data
   * type.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
   */
  private void addFromProgressMarker(
      int index, org.chromium.components.sync.protocol.DataTypeProgressMarker.Builder builderForValue) {
    ensureFromProgressMarkerIsMutable();
    fromProgressMarker_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * Per-datatype progress marker.  If present, the server will ignore
   * the values of requested_types and from_timestamp, using this instead.
   * With the exception of certain configuration or initial sync requests, the
   * client should include one instance of this field for each enabled data
   * type.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
   */
  private void addAllFromProgressMarker(
      java.lang.Iterable<? extends org.chromium.components.sync.protocol.DataTypeProgressMarker> values) {
    ensureFromProgressMarkerIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, fromProgressMarker_);
  }
  /**
   * <pre>
   * Per-datatype progress marker.  If present, the server will ignore
   * the values of requested_types and from_timestamp, using this instead.
   * With the exception of certain configuration or initial sync requests, the
   * client should include one instance of this field for each enabled data
   * type.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
   */
  private void clearFromProgressMarker() {
    fromProgressMarker_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Per-datatype progress marker.  If present, the server will ignore
   * the values of requested_types and from_timestamp, using this instead.
   * With the exception of certain configuration or initial sync requests, the
   * client should include one instance of this field for each enabled data
   * type.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
   */
  private void removeFromProgressMarker(int index) {
    ensureFromProgressMarkerIsMutable();
    fromProgressMarker_.remove(index);
  }

  public static final int STREAMING_FIELD_NUMBER = 7;
  private boolean streaming_;
  /**
   * <pre>
   * Indicates whether the response should be sent in chunks.  This may be
   * needed for devices with limited memory resources.  If true, the response
   * will include one or more ClientToServerResponses, with the frist one
   * containing GetUpdatesMetadataResponse, and the remaining ones, if any,
   * containing GetUpdatesStreamingResponse.  These ClientToServerResponses are
   * delimited by a length prefix, which is encoded as a varint.
   * </pre>
   *
   * <code>optional bool streaming = 7 [default = false];</code>
   */
  public boolean hasStreaming() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * Indicates whether the response should be sent in chunks.  This may be
   * needed for devices with limited memory resources.  If true, the response
   * will include one or more ClientToServerResponses, with the frist one
   * containing GetUpdatesMetadataResponse, and the remaining ones, if any,
   * containing GetUpdatesStreamingResponse.  These ClientToServerResponses are
   * delimited by a length prefix, which is encoded as a varint.
   * </pre>
   *
   * <code>optional bool streaming = 7 [default = false];</code>
   */
  public boolean getStreaming() {
    return streaming_;
  }
  /**
   * <pre>
   * Indicates whether the response should be sent in chunks.  This may be
   * needed for devices with limited memory resources.  If true, the response
   * will include one or more ClientToServerResponses, with the frist one
   * containing GetUpdatesMetadataResponse, and the remaining ones, if any,
   * containing GetUpdatesStreamingResponse.  These ClientToServerResponses are
   * delimited by a length prefix, which is encoded as a varint.
   * </pre>
   *
   * <code>optional bool streaming = 7 [default = false];</code>
   */
  private void setStreaming(boolean value) {
    bitField0_ |= 0x00000008;
    streaming_ = value;
  }
  /**
   * <pre>
   * Indicates whether the response should be sent in chunks.  This may be
   * needed for devices with limited memory resources.  If true, the response
   * will include one or more ClientToServerResponses, with the frist one
   * containing GetUpdatesMetadataResponse, and the remaining ones, if any,
   * containing GetUpdatesStreamingResponse.  These ClientToServerResponses are
   * delimited by a length prefix, which is encoded as a varint.
   * </pre>
   *
   * <code>optional bool streaming = 7 [default = false];</code>
   */
  private void clearStreaming() {
    bitField0_ = (bitField0_ & ~0x00000008);
    streaming_ = false;
  }

  public static final int NEED_ENCRYPTION_KEY_FIELD_NUMBER = 8;
  private boolean needEncryptionKey_;
  /**
   * <pre>
   * Whether the client needs the server to provide an encryption key for this
   * account.
   * Note: this should typically only be set on the first GetUpdates a client
   * requests. Clients are expected to persist the encryption key from then on.
   * The allowed frequency for requesting encryption keys is much lower than
   * other datatypes, so repeated usage will likely result in throttling.
   * </pre>
   *
   * <code>optional bool need_encryption_key = 8 [default = false];</code>
   */
  public boolean hasNeedEncryptionKey() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <pre>
   * Whether the client needs the server to provide an encryption key for this
   * account.
   * Note: this should typically only be set on the first GetUpdates a client
   * requests. Clients are expected to persist the encryption key from then on.
   * The allowed frequency for requesting encryption keys is much lower than
   * other datatypes, so repeated usage will likely result in throttling.
   * </pre>
   *
   * <code>optional bool need_encryption_key = 8 [default = false];</code>
   */
  public boolean getNeedEncryptionKey() {
    return needEncryptionKey_;
  }
  /**
   * <pre>
   * Whether the client needs the server to provide an encryption key for this
   * account.
   * Note: this should typically only be set on the first GetUpdates a client
   * requests. Clients are expected to persist the encryption key from then on.
   * The allowed frequency for requesting encryption keys is much lower than
   * other datatypes, so repeated usage will likely result in throttling.
   * </pre>
   *
   * <code>optional bool need_encryption_key = 8 [default = false];</code>
   */
  private void setNeedEncryptionKey(boolean value) {
    bitField0_ |= 0x00000010;
    needEncryptionKey_ = value;
  }
  /**
   * <pre>
   * Whether the client needs the server to provide an encryption key for this
   * account.
   * Note: this should typically only be set on the first GetUpdates a client
   * requests. Clients are expected to persist the encryption key from then on.
   * The allowed frequency for requesting encryption keys is much lower than
   * other datatypes, so repeated usage will likely result in throttling.
   * </pre>
   *
   * <code>optional bool need_encryption_key = 8 [default = false];</code>
   */
  private void clearNeedEncryptionKey() {
    bitField0_ = (bitField0_ & ~0x00000010);
    needEncryptionKey_ = false;
  }

  public static final int CREATE_MOBILE_BOOKMARKS_FOLDER_FIELD_NUMBER = 1000;
  private boolean createMobileBookmarksFolder_;
  /**
   * <pre>
   * Whether to create the mobile bookmarks folder if it's not
   * already created.  Set to true by all modern clients.
   * </pre>
   *
   * <code>optional bool create_mobile_bookmarks_folder = 1000 [default = false, deprecated = true];</code>
   */
  @java.lang.Deprecated public boolean hasCreateMobileBookmarksFolder() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * Whether to create the mobile bookmarks folder if it's not
   * already created.  Set to true by all modern clients.
   * </pre>
   *
   * <code>optional bool create_mobile_bookmarks_folder = 1000 [default = false, deprecated = true];</code>
   */
  @java.lang.Deprecated public boolean getCreateMobileBookmarksFolder() {
    return createMobileBookmarksFolder_;
  }
  /**
   * <pre>
   * Whether to create the mobile bookmarks folder if it's not
   * already created.  Set to true by all modern clients.
   * </pre>
   *
   * <code>optional bool create_mobile_bookmarks_folder = 1000 [default = false, deprecated = true];</code>
   */
  private void setCreateMobileBookmarksFolder(boolean value) {
    bitField0_ |= 0x00000020;
    createMobileBookmarksFolder_ = value;
  }
  /**
   * <pre>
   * Whether to create the mobile bookmarks folder if it's not
   * already created.  Set to true by all modern clients.
   * </pre>
   *
   * <code>optional bool create_mobile_bookmarks_folder = 1000 [default = false, deprecated = true];</code>
   */
  private void clearCreateMobileBookmarksFolder() {
    bitField0_ = (bitField0_ & ~0x00000020);
    createMobileBookmarksFolder_ = false;
  }

  public static final int GET_UPDATES_ORIGIN_FIELD_NUMBER = 9;
  private int getUpdatesOrigin_;
  /**
   * <pre>
   * This value is an updated version of the GetUpdatesCallerInfo's
   * GetUpdatesSource.  It describes the reason for the GetUpdate request.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;</code>
   */
  public boolean hasGetUpdatesOrigin() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <pre>
   * This value is an updated version of the GetUpdatesCallerInfo's
   * GetUpdatesSource.  It describes the reason for the GetUpdate request.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;</code>
   */
  public org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin getGetUpdatesOrigin() {
    org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin result = org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin.forNumber(getUpdatesOrigin_);
    return result == null ? org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin.UNKNOWN_ORIGIN : result;
  }
  /**
   * <pre>
   * This value is an updated version of the GetUpdatesCallerInfo's
   * GetUpdatesSource.  It describes the reason for the GetUpdate request.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;</code>
   */
  private void setGetUpdatesOrigin(org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000040;
    getUpdatesOrigin_ = value.getNumber();
  }
  /**
   * <pre>
   * This value is an updated version of the GetUpdatesCallerInfo's
   * GetUpdatesSource.  It describes the reason for the GetUpdate request.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;</code>
   */
  private void clearGetUpdatesOrigin() {
    bitField0_ = (bitField0_ & ~0x00000040);
    getUpdatesOrigin_ = 0;
  }

  public static final int IS_RETRY_FIELD_NUMBER = 10;
  private boolean isRetry_;
  /**
   * <pre>
   * Whether this GU also serves as a retry GU. Any GU that happens after
   * retry timer timeout is a retry GU effectively.
   * </pre>
   *
   * <code>optional bool is_retry = 10 [default = false];</code>
   */
  public boolean hasIsRetry() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <pre>
   * Whether this GU also serves as a retry GU. Any GU that happens after
   * retry timer timeout is a retry GU effectively.
   * </pre>
   *
   * <code>optional bool is_retry = 10 [default = false];</code>
   */
  public boolean getIsRetry() {
    return isRetry_;
  }
  /**
   * <pre>
   * Whether this GU also serves as a retry GU. Any GU that happens after
   * retry timer timeout is a retry GU effectively.
   * </pre>
   *
   * <code>optional bool is_retry = 10 [default = false];</code>
   */
  private void setIsRetry(boolean value) {
    bitField0_ |= 0x00000080;
    isRetry_ = value;
  }
  /**
   * <pre>
   * Whether this GU also serves as a retry GU. Any GU that happens after
   * retry timer timeout is a retry GU effectively.
   * </pre>
   *
   * <code>optional bool is_retry = 10 [default = false];</code>
   */
  private void clearIsRetry() {
    bitField0_ = (bitField0_ & ~0x00000080);
    isRetry_ = false;
  }

  public static final int CLIENT_CONTEXTS_FIELD_NUMBER = 11;
  private com.google.protobuf.Internal.ProtobufList<org.chromium.components.sync.protocol.DataTypeContext> clientContexts_;
  /**
   * <pre>
   * Set of optional per-client datatype contexts.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
   */
  public java.util.List<org.chromium.components.sync.protocol.DataTypeContext> getClientContextsList() {
    return clientContexts_;
  }
  /**
   * <pre>
   * Set of optional per-client datatype contexts.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
   */
  public java.util.List<? extends org.chromium.components.sync.protocol.DataTypeContextOrBuilder> 
      getClientContextsOrBuilderList() {
    return clientContexts_;
  }
  /**
   * <pre>
   * Set of optional per-client datatype contexts.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
   */
  public int getClientContextsCount() {
    return clientContexts_.size();
  }
  /**
   * <pre>
   * Set of optional per-client datatype contexts.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
   */
  public org.chromium.components.sync.protocol.DataTypeContext getClientContexts(int index) {
    return clientContexts_.get(index);
  }
  /**
   * <pre>
   * Set of optional per-client datatype contexts.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
   */
  public org.chromium.components.sync.protocol.DataTypeContextOrBuilder getClientContextsOrBuilder(
      int index) {
    return clientContexts_.get(index);
  }
  private void ensureClientContextsIsMutable() {
    if (!clientContexts_.isModifiable()) {
      clientContexts_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(clientContexts_);
     }
  }

  /**
   * <pre>
   * Set of optional per-client datatype contexts.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
   */
  private void setClientContexts(
      int index, org.chromium.components.sync.protocol.DataTypeContext value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureClientContextsIsMutable();
    clientContexts_.set(index, value);
  }
  /**
   * <pre>
   * Set of optional per-client datatype contexts.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
   */
  private void setClientContexts(
      int index, org.chromium.components.sync.protocol.DataTypeContext.Builder builderForValue) {
    ensureClientContextsIsMutable();
    clientContexts_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * Set of optional per-client datatype contexts.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
   */
  private void addClientContexts(org.chromium.components.sync.protocol.DataTypeContext value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureClientContextsIsMutable();
    clientContexts_.add(value);
  }
  /**
   * <pre>
   * Set of optional per-client datatype contexts.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
   */
  private void addClientContexts(
      int index, org.chromium.components.sync.protocol.DataTypeContext value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureClientContextsIsMutable();
    clientContexts_.add(index, value);
  }
  /**
   * <pre>
   * Set of optional per-client datatype contexts.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
   */
  private void addClientContexts(
      org.chromium.components.sync.protocol.DataTypeContext.Builder builderForValue) {
    ensureClientContextsIsMutable();
    clientContexts_.add(builderForValue.build());
  }
  /**
   * <pre>
   * Set of optional per-client datatype contexts.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
   */
  private void addClientContexts(
      int index, org.chromium.components.sync.protocol.DataTypeContext.Builder builderForValue) {
    ensureClientContextsIsMutable();
    clientContexts_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * Set of optional per-client datatype contexts.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
   */
  private void addAllClientContexts(
      java.lang.Iterable<? extends org.chromium.components.sync.protocol.DataTypeContext> values) {
    ensureClientContextsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, clientContexts_);
  }
  /**
   * <pre>
   * Set of optional per-client datatype contexts.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
   */
  private void clearClientContexts() {
    clientContexts_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Set of optional per-client datatype contexts.
   * </pre>
   *
   * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
   */
  private void removeClientContexts(int index) {
    ensureClientContextsIsMutable();
    clientContexts_.remove(index);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeMessage(2, getCallerInfo());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeBool(3, fetchFolders_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt32(5, batchSize_);
    }
    for (int i = 0; i < fromProgressMarker_.size(); i++) {
      output.writeMessage(6, fromProgressMarker_.get(i));
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeBool(7, streaming_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeBool(8, needEncryptionKey_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeEnum(9, getUpdatesOrigin_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeBool(10, isRetry_);
    }
    for (int i = 0; i < clientContexts_.size(); i++) {
      output.writeMessage(11, clientContexts_.get(i));
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeBool(1000, createMobileBookmarksFolder_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getCallerInfo());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, fetchFolders_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, batchSize_);
    }
    for (int i = 0; i < fromProgressMarker_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, fromProgressMarker_.get(i));
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, streaming_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, needEncryptionKey_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(9, getUpdatesOrigin_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(10, isRetry_);
    }
    for (int i = 0; i < clientContexts_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, clientContexts_.get(i));
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1000, createMobileBookmarksFolder_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.GetUpdatesMessage parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.GetUpdatesMessage parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GetUpdatesMessage parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.GetUpdatesMessage parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GetUpdatesMessage parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.GetUpdatesMessage parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GetUpdatesMessage parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.GetUpdatesMessage parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GetUpdatesMessage parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.GetUpdatesMessage parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.GetUpdatesMessage prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code sync_pb.GetUpdatesMessage}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.GetUpdatesMessage, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.GetUpdatesMessage)
      org.chromium.components.sync.protocol.GetUpdatesMessageOrBuilder {
    // Construct using org.chromium.components.sync.protocol.GetUpdatesMessage.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Indicates the reason for the GetUpdatesMessage.
     * This was *mostly* deprecated in M29.  GetUpdatesOrigin is the new way to
     * encode the reason for the GetUpdates request, but some parts of the server
     * still rely on this field.  It also still contains the
     * "notifications_enabled" flag which needs to be moved elsewhere before this
     * can be fully removed. See https://crbug.com/510165.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;</code>
     */
    public boolean hasCallerInfo() {
      return instance.hasCallerInfo();
    }
    /**
     * <pre>
     * Indicates the reason for the GetUpdatesMessage.
     * This was *mostly* deprecated in M29.  GetUpdatesOrigin is the new way to
     * encode the reason for the GetUpdates request, but some parts of the server
     * still rely on this field.  It also still contains the
     * "notifications_enabled" flag which needs to be moved elsewhere before this
     * can be fully removed. See https://crbug.com/510165.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;</code>
     */
    public org.chromium.components.sync.protocol.GetUpdatesCallerInfo getCallerInfo() {
      return instance.getCallerInfo();
    }
    /**
     * <pre>
     * Indicates the reason for the GetUpdatesMessage.
     * This was *mostly* deprecated in M29.  GetUpdatesOrigin is the new way to
     * encode the reason for the GetUpdates request, but some parts of the server
     * still rely on this field.  It also still contains the
     * "notifications_enabled" flag which needs to be moved elsewhere before this
     * can be fully removed. See https://crbug.com/510165.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;</code>
     */
    public Builder setCallerInfo(org.chromium.components.sync.protocol.GetUpdatesCallerInfo value) {
      copyOnWrite();
      instance.setCallerInfo(value);
      return this;
      }
    /**
     * <pre>
     * Indicates the reason for the GetUpdatesMessage.
     * This was *mostly* deprecated in M29.  GetUpdatesOrigin is the new way to
     * encode the reason for the GetUpdates request, but some parts of the server
     * still rely on this field.  It also still contains the
     * "notifications_enabled" flag which needs to be moved elsewhere before this
     * can be fully removed. See https://crbug.com/510165.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;</code>
     */
    public Builder setCallerInfo(
        org.chromium.components.sync.protocol.GetUpdatesCallerInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setCallerInfo(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Indicates the reason for the GetUpdatesMessage.
     * This was *mostly* deprecated in M29.  GetUpdatesOrigin is the new way to
     * encode the reason for the GetUpdates request, but some parts of the server
     * still rely on this field.  It also still contains the
     * "notifications_enabled" flag which needs to be moved elsewhere before this
     * can be fully removed. See https://crbug.com/510165.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;</code>
     */
    public Builder mergeCallerInfo(org.chromium.components.sync.protocol.GetUpdatesCallerInfo value) {
      copyOnWrite();
      instance.mergeCallerInfo(value);
      return this;
    }
    /**
     * <pre>
     * Indicates the reason for the GetUpdatesMessage.
     * This was *mostly* deprecated in M29.  GetUpdatesOrigin is the new way to
     * encode the reason for the GetUpdates request, but some parts of the server
     * still rely on this field.  It also still contains the
     * "notifications_enabled" flag which needs to be moved elsewhere before this
     * can be fully removed. See https://crbug.com/510165.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;</code>
     */
    public Builder clearCallerInfo() {  copyOnWrite();
      instance.clearCallerInfo();
      return this;
    }

    /**
     * <pre>
     * Indicates whether related folders should be fetched.
     * </pre>
     *
     * <code>optional bool fetch_folders = 3 [default = true];</code>
     */
    public boolean hasFetchFolders() {
      return instance.hasFetchFolders();
    }
    /**
     * <pre>
     * Indicates whether related folders should be fetched.
     * </pre>
     *
     * <code>optional bool fetch_folders = 3 [default = true];</code>
     */
    public boolean getFetchFolders() {
      return instance.getFetchFolders();
    }
    /**
     * <pre>
     * Indicates whether related folders should be fetched.
     * </pre>
     *
     * <code>optional bool fetch_folders = 3 [default = true];</code>
     */
    public Builder setFetchFolders(boolean value) {
      copyOnWrite();
      instance.setFetchFolders(value);
      return this;
    }
    /**
     * <pre>
     * Indicates whether related folders should be fetched.
     * </pre>
     *
     * <code>optional bool fetch_folders = 3 [default = true];</code>
     */
    public Builder clearFetchFolders() {
      copyOnWrite();
      instance.clearFetchFolders();
      return this;
    }

    /**
     * <pre>
     * Client-requested limit on the maximum number of updates to return at once.
     * The server may opt to return fewer updates than this amount, but it should
     * not return more.
     * </pre>
     *
     * <code>optional int32 batch_size = 5;</code>
     */
    public boolean hasBatchSize() {
      return instance.hasBatchSize();
    }
    /**
     * <pre>
     * Client-requested limit on the maximum number of updates to return at once.
     * The server may opt to return fewer updates than this amount, but it should
     * not return more.
     * </pre>
     *
     * <code>optional int32 batch_size = 5;</code>
     */
    public int getBatchSize() {
      return instance.getBatchSize();
    }
    /**
     * <pre>
     * Client-requested limit on the maximum number of updates to return at once.
     * The server may opt to return fewer updates than this amount, but it should
     * not return more.
     * </pre>
     *
     * <code>optional int32 batch_size = 5;</code>
     */
    public Builder setBatchSize(int value) {
      copyOnWrite();
      instance.setBatchSize(value);
      return this;
    }
    /**
     * <pre>
     * Client-requested limit on the maximum number of updates to return at once.
     * The server may opt to return fewer updates than this amount, but it should
     * not return more.
     * </pre>
     *
     * <code>optional int32 batch_size = 5;</code>
     */
    public Builder clearBatchSize() {
      copyOnWrite();
      instance.clearBatchSize();
      return this;
    }

    /**
     * <pre>
     * Per-datatype progress marker.  If present, the server will ignore
     * the values of requested_types and from_timestamp, using this instead.
     * With the exception of certain configuration or initial sync requests, the
     * client should include one instance of this field for each enabled data
     * type.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
     */
    public java.util.List<org.chromium.components.sync.protocol.DataTypeProgressMarker> getFromProgressMarkerList() {
      return java.util.Collections.unmodifiableList(
          instance.getFromProgressMarkerList());
    }
    /**
     * <pre>
     * Per-datatype progress marker.  If present, the server will ignore
     * the values of requested_types and from_timestamp, using this instead.
     * With the exception of certain configuration or initial sync requests, the
     * client should include one instance of this field for each enabled data
     * type.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
     */
    public int getFromProgressMarkerCount() {
      return instance.getFromProgressMarkerCount();
    }/**
     * <pre>
     * Per-datatype progress marker.  If present, the server will ignore
     * the values of requested_types and from_timestamp, using this instead.
     * With the exception of certain configuration or initial sync requests, the
     * client should include one instance of this field for each enabled data
     * type.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
     */
    public org.chromium.components.sync.protocol.DataTypeProgressMarker getFromProgressMarker(int index) {
      return instance.getFromProgressMarker(index);
    }
    /**
     * <pre>
     * Per-datatype progress marker.  If present, the server will ignore
     * the values of requested_types and from_timestamp, using this instead.
     * With the exception of certain configuration or initial sync requests, the
     * client should include one instance of this field for each enabled data
     * type.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
     */
    public Builder setFromProgressMarker(
        int index, org.chromium.components.sync.protocol.DataTypeProgressMarker value) {
      copyOnWrite();
      instance.setFromProgressMarker(index, value);
      return this;
    }
    /**
     * <pre>
     * Per-datatype progress marker.  If present, the server will ignore
     * the values of requested_types and from_timestamp, using this instead.
     * With the exception of certain configuration or initial sync requests, the
     * client should include one instance of this field for each enabled data
     * type.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
     */
    public Builder setFromProgressMarker(
        int index, org.chromium.components.sync.protocol.DataTypeProgressMarker.Builder builderForValue) {
      copyOnWrite();
      instance.setFromProgressMarker(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Per-datatype progress marker.  If present, the server will ignore
     * the values of requested_types and from_timestamp, using this instead.
     * With the exception of certain configuration or initial sync requests, the
     * client should include one instance of this field for each enabled data
     * type.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
     */
    public Builder addFromProgressMarker(org.chromium.components.sync.protocol.DataTypeProgressMarker value) {
      copyOnWrite();
      instance.addFromProgressMarker(value);
      return this;
    }
    /**
     * <pre>
     * Per-datatype progress marker.  If present, the server will ignore
     * the values of requested_types and from_timestamp, using this instead.
     * With the exception of certain configuration or initial sync requests, the
     * client should include one instance of this field for each enabled data
     * type.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
     */
    public Builder addFromProgressMarker(
        int index, org.chromium.components.sync.protocol.DataTypeProgressMarker value) {
      copyOnWrite();
      instance.addFromProgressMarker(index, value);
      return this;
    }
    /**
     * <pre>
     * Per-datatype progress marker.  If present, the server will ignore
     * the values of requested_types and from_timestamp, using this instead.
     * With the exception of certain configuration or initial sync requests, the
     * client should include one instance of this field for each enabled data
     * type.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
     */
    public Builder addFromProgressMarker(
        org.chromium.components.sync.protocol.DataTypeProgressMarker.Builder builderForValue) {
      copyOnWrite();
      instance.addFromProgressMarker(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Per-datatype progress marker.  If present, the server will ignore
     * the values of requested_types and from_timestamp, using this instead.
     * With the exception of certain configuration or initial sync requests, the
     * client should include one instance of this field for each enabled data
     * type.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
     */
    public Builder addFromProgressMarker(
        int index, org.chromium.components.sync.protocol.DataTypeProgressMarker.Builder builderForValue) {
      copyOnWrite();
      instance.addFromProgressMarker(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Per-datatype progress marker.  If present, the server will ignore
     * the values of requested_types and from_timestamp, using this instead.
     * With the exception of certain configuration or initial sync requests, the
     * client should include one instance of this field for each enabled data
     * type.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
     */
    public Builder addAllFromProgressMarker(
        java.lang.Iterable<? extends org.chromium.components.sync.protocol.DataTypeProgressMarker> values) {
      copyOnWrite();
      instance.addAllFromProgressMarker(values);
      return this;
    }
    /**
     * <pre>
     * Per-datatype progress marker.  If present, the server will ignore
     * the values of requested_types and from_timestamp, using this instead.
     * With the exception of certain configuration or initial sync requests, the
     * client should include one instance of this field for each enabled data
     * type.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
     */
    public Builder clearFromProgressMarker() {
      copyOnWrite();
      instance.clearFromProgressMarker();
      return this;
    }
    /**
     * <pre>
     * Per-datatype progress marker.  If present, the server will ignore
     * the values of requested_types and from_timestamp, using this instead.
     * With the exception of certain configuration or initial sync requests, the
     * client should include one instance of this field for each enabled data
     * type.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;</code>
     */
    public Builder removeFromProgressMarker(int index) {
      copyOnWrite();
      instance.removeFromProgressMarker(index);
      return this;
    }

    /**
     * <pre>
     * Indicates whether the response should be sent in chunks.  This may be
     * needed for devices with limited memory resources.  If true, the response
     * will include one or more ClientToServerResponses, with the frist one
     * containing GetUpdatesMetadataResponse, and the remaining ones, if any,
     * containing GetUpdatesStreamingResponse.  These ClientToServerResponses are
     * delimited by a length prefix, which is encoded as a varint.
     * </pre>
     *
     * <code>optional bool streaming = 7 [default = false];</code>
     */
    public boolean hasStreaming() {
      return instance.hasStreaming();
    }
    /**
     * <pre>
     * Indicates whether the response should be sent in chunks.  This may be
     * needed for devices with limited memory resources.  If true, the response
     * will include one or more ClientToServerResponses, with the frist one
     * containing GetUpdatesMetadataResponse, and the remaining ones, if any,
     * containing GetUpdatesStreamingResponse.  These ClientToServerResponses are
     * delimited by a length prefix, which is encoded as a varint.
     * </pre>
     *
     * <code>optional bool streaming = 7 [default = false];</code>
     */
    public boolean getStreaming() {
      return instance.getStreaming();
    }
    /**
     * <pre>
     * Indicates whether the response should be sent in chunks.  This may be
     * needed for devices with limited memory resources.  If true, the response
     * will include one or more ClientToServerResponses, with the frist one
     * containing GetUpdatesMetadataResponse, and the remaining ones, if any,
     * containing GetUpdatesStreamingResponse.  These ClientToServerResponses are
     * delimited by a length prefix, which is encoded as a varint.
     * </pre>
     *
     * <code>optional bool streaming = 7 [default = false];</code>
     */
    public Builder setStreaming(boolean value) {
      copyOnWrite();
      instance.setStreaming(value);
      return this;
    }
    /**
     * <pre>
     * Indicates whether the response should be sent in chunks.  This may be
     * needed for devices with limited memory resources.  If true, the response
     * will include one or more ClientToServerResponses, with the frist one
     * containing GetUpdatesMetadataResponse, and the remaining ones, if any,
     * containing GetUpdatesStreamingResponse.  These ClientToServerResponses are
     * delimited by a length prefix, which is encoded as a varint.
     * </pre>
     *
     * <code>optional bool streaming = 7 [default = false];</code>
     */
    public Builder clearStreaming() {
      copyOnWrite();
      instance.clearStreaming();
      return this;
    }

    /**
     * <pre>
     * Whether the client needs the server to provide an encryption key for this
     * account.
     * Note: this should typically only be set on the first GetUpdates a client
     * requests. Clients are expected to persist the encryption key from then on.
     * The allowed frequency for requesting encryption keys is much lower than
     * other datatypes, so repeated usage will likely result in throttling.
     * </pre>
     *
     * <code>optional bool need_encryption_key = 8 [default = false];</code>
     */
    public boolean hasNeedEncryptionKey() {
      return instance.hasNeedEncryptionKey();
    }
    /**
     * <pre>
     * Whether the client needs the server to provide an encryption key for this
     * account.
     * Note: this should typically only be set on the first GetUpdates a client
     * requests. Clients are expected to persist the encryption key from then on.
     * The allowed frequency for requesting encryption keys is much lower than
     * other datatypes, so repeated usage will likely result in throttling.
     * </pre>
     *
     * <code>optional bool need_encryption_key = 8 [default = false];</code>
     */
    public boolean getNeedEncryptionKey() {
      return instance.getNeedEncryptionKey();
    }
    /**
     * <pre>
     * Whether the client needs the server to provide an encryption key for this
     * account.
     * Note: this should typically only be set on the first GetUpdates a client
     * requests. Clients are expected to persist the encryption key from then on.
     * The allowed frequency for requesting encryption keys is much lower than
     * other datatypes, so repeated usage will likely result in throttling.
     * </pre>
     *
     * <code>optional bool need_encryption_key = 8 [default = false];</code>
     */
    public Builder setNeedEncryptionKey(boolean value) {
      copyOnWrite();
      instance.setNeedEncryptionKey(value);
      return this;
    }
    /**
     * <pre>
     * Whether the client needs the server to provide an encryption key for this
     * account.
     * Note: this should typically only be set on the first GetUpdates a client
     * requests. Clients are expected to persist the encryption key from then on.
     * The allowed frequency for requesting encryption keys is much lower than
     * other datatypes, so repeated usage will likely result in throttling.
     * </pre>
     *
     * <code>optional bool need_encryption_key = 8 [default = false];</code>
     */
    public Builder clearNeedEncryptionKey() {
      copyOnWrite();
      instance.clearNeedEncryptionKey();
      return this;
    }

    /**
     * <pre>
     * Whether to create the mobile bookmarks folder if it's not
     * already created.  Set to true by all modern clients.
     * </pre>
     *
     * <code>optional bool create_mobile_bookmarks_folder = 1000 [default = false, deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasCreateMobileBookmarksFolder() {
      return instance.hasCreateMobileBookmarksFolder();
    }
    /**
     * <pre>
     * Whether to create the mobile bookmarks folder if it's not
     * already created.  Set to true by all modern clients.
     * </pre>
     *
     * <code>optional bool create_mobile_bookmarks_folder = 1000 [default = false, deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean getCreateMobileBookmarksFolder() {
      return instance.getCreateMobileBookmarksFolder();
    }
    /**
     * <pre>
     * Whether to create the mobile bookmarks folder if it's not
     * already created.  Set to true by all modern clients.
     * </pre>
     *
     * <code>optional bool create_mobile_bookmarks_folder = 1000 [default = false, deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setCreateMobileBookmarksFolder(boolean value) {
      copyOnWrite();
      instance.setCreateMobileBookmarksFolder(value);
      return this;
    }
    /**
     * <pre>
     * Whether to create the mobile bookmarks folder if it's not
     * already created.  Set to true by all modern clients.
     * </pre>
     *
     * <code>optional bool create_mobile_bookmarks_folder = 1000 [default = false, deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearCreateMobileBookmarksFolder() {
      copyOnWrite();
      instance.clearCreateMobileBookmarksFolder();
      return this;
    }

    /**
     * <pre>
     * This value is an updated version of the GetUpdatesCallerInfo's
     * GetUpdatesSource.  It describes the reason for the GetUpdate request.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;</code>
     */
    public boolean hasGetUpdatesOrigin() {
      return instance.hasGetUpdatesOrigin();
    }
    /**
     * <pre>
     * This value is an updated version of the GetUpdatesCallerInfo's
     * GetUpdatesSource.  It describes the reason for the GetUpdate request.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;</code>
     */
    public org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin getGetUpdatesOrigin() {
      return instance.getGetUpdatesOrigin();
    }
    /**
     * <pre>
     * This value is an updated version of the GetUpdatesCallerInfo's
     * GetUpdatesSource.  It describes the reason for the GetUpdate request.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;</code>
     */
    public Builder setGetUpdatesOrigin(org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin value) {
      copyOnWrite();
      instance.setGetUpdatesOrigin(value);
      return this;
    }
    /**
     * <pre>
     * This value is an updated version of the GetUpdatesCallerInfo's
     * GetUpdatesSource.  It describes the reason for the GetUpdate request.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;</code>
     */
    public Builder clearGetUpdatesOrigin() {
      copyOnWrite();
      instance.clearGetUpdatesOrigin();
      return this;
    }

    /**
     * <pre>
     * Whether this GU also serves as a retry GU. Any GU that happens after
     * retry timer timeout is a retry GU effectively.
     * </pre>
     *
     * <code>optional bool is_retry = 10 [default = false];</code>
     */
    public boolean hasIsRetry() {
      return instance.hasIsRetry();
    }
    /**
     * <pre>
     * Whether this GU also serves as a retry GU. Any GU that happens after
     * retry timer timeout is a retry GU effectively.
     * </pre>
     *
     * <code>optional bool is_retry = 10 [default = false];</code>
     */
    public boolean getIsRetry() {
      return instance.getIsRetry();
    }
    /**
     * <pre>
     * Whether this GU also serves as a retry GU. Any GU that happens after
     * retry timer timeout is a retry GU effectively.
     * </pre>
     *
     * <code>optional bool is_retry = 10 [default = false];</code>
     */
    public Builder setIsRetry(boolean value) {
      copyOnWrite();
      instance.setIsRetry(value);
      return this;
    }
    /**
     * <pre>
     * Whether this GU also serves as a retry GU. Any GU that happens after
     * retry timer timeout is a retry GU effectively.
     * </pre>
     *
     * <code>optional bool is_retry = 10 [default = false];</code>
     */
    public Builder clearIsRetry() {
      copyOnWrite();
      instance.clearIsRetry();
      return this;
    }

    /**
     * <pre>
     * Set of optional per-client datatype contexts.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
     */
    public java.util.List<org.chromium.components.sync.protocol.DataTypeContext> getClientContextsList() {
      return java.util.Collections.unmodifiableList(
          instance.getClientContextsList());
    }
    /**
     * <pre>
     * Set of optional per-client datatype contexts.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
     */
    public int getClientContextsCount() {
      return instance.getClientContextsCount();
    }/**
     * <pre>
     * Set of optional per-client datatype contexts.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
     */
    public org.chromium.components.sync.protocol.DataTypeContext getClientContexts(int index) {
      return instance.getClientContexts(index);
    }
    /**
     * <pre>
     * Set of optional per-client datatype contexts.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
     */
    public Builder setClientContexts(
        int index, org.chromium.components.sync.protocol.DataTypeContext value) {
      copyOnWrite();
      instance.setClientContexts(index, value);
      return this;
    }
    /**
     * <pre>
     * Set of optional per-client datatype contexts.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
     */
    public Builder setClientContexts(
        int index, org.chromium.components.sync.protocol.DataTypeContext.Builder builderForValue) {
      copyOnWrite();
      instance.setClientContexts(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Set of optional per-client datatype contexts.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
     */
    public Builder addClientContexts(org.chromium.components.sync.protocol.DataTypeContext value) {
      copyOnWrite();
      instance.addClientContexts(value);
      return this;
    }
    /**
     * <pre>
     * Set of optional per-client datatype contexts.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
     */
    public Builder addClientContexts(
        int index, org.chromium.components.sync.protocol.DataTypeContext value) {
      copyOnWrite();
      instance.addClientContexts(index, value);
      return this;
    }
    /**
     * <pre>
     * Set of optional per-client datatype contexts.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
     */
    public Builder addClientContexts(
        org.chromium.components.sync.protocol.DataTypeContext.Builder builderForValue) {
      copyOnWrite();
      instance.addClientContexts(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Set of optional per-client datatype contexts.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
     */
    public Builder addClientContexts(
        int index, org.chromium.components.sync.protocol.DataTypeContext.Builder builderForValue) {
      copyOnWrite();
      instance.addClientContexts(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Set of optional per-client datatype contexts.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
     */
    public Builder addAllClientContexts(
        java.lang.Iterable<? extends org.chromium.components.sync.protocol.DataTypeContext> values) {
      copyOnWrite();
      instance.addAllClientContexts(values);
      return this;
    }
    /**
     * <pre>
     * Set of optional per-client datatype contexts.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
     */
    public Builder clearClientContexts() {
      copyOnWrite();
      instance.clearClientContexts();
      return this;
    }
    /**
     * <pre>
     * Set of optional per-client datatype contexts.
     * </pre>
     *
     * <code>repeated .sync_pb.DataTypeContext client_contexts = 11;</code>
     */
    public Builder removeClientContexts(int index) {
      copyOnWrite();
      instance.removeClientContexts(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.GetUpdatesMessage)
  }
  private byte memoizedIsInitialized = -1;
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.GetUpdatesMessage();
      }
      case IS_INITIALIZED: {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return DEFAULT_INSTANCE;
        if (isInitialized == 0) return null;

        boolean shouldMemoize = ((Boolean) arg0).booleanValue();
        if (hasCallerInfo()) {
          if (!getCallerInfo().isInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
        }
        if (shouldMemoize) memoizedIsInitialized = 1;
        return DEFAULT_INSTANCE;

      }
      case MAKE_IMMUTABLE: {
        fromProgressMarker_.makeImmutable();
        clientContexts_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.GetUpdatesMessage other = (org.chromium.components.sync.protocol.GetUpdatesMessage) arg1;
        callerInfo_ = visitor.visitMessage(callerInfo_, other.callerInfo_);
        fetchFolders_ = visitor.visitBoolean(
            hasFetchFolders(), fetchFolders_,
            other.hasFetchFolders(), other.fetchFolders_);
        batchSize_ = visitor.visitInt(
            hasBatchSize(), batchSize_,
            other.hasBatchSize(), other.batchSize_);
        fromProgressMarker_= visitor.visitList(fromProgressMarker_, other.fromProgressMarker_);
        streaming_ = visitor.visitBoolean(
            hasStreaming(), streaming_,
            other.hasStreaming(), other.streaming_);
        needEncryptionKey_ = visitor.visitBoolean(
            hasNeedEncryptionKey(), needEncryptionKey_,
            other.hasNeedEncryptionKey(), other.needEncryptionKey_);
        createMobileBookmarksFolder_ = visitor.visitBoolean(
            hasCreateMobileBookmarksFolder(), createMobileBookmarksFolder_,
            other.hasCreateMobileBookmarksFolder(), other.createMobileBookmarksFolder_);
        getUpdatesOrigin_ = visitor.visitInt(hasGetUpdatesOrigin(), getUpdatesOrigin_,
            other.hasGetUpdatesOrigin(), other.getUpdatesOrigin_);
        isRetry_ = visitor.visitBoolean(
            hasIsRetry(), isRetry_,
            other.hasIsRetry(), other.isRetry_);
        clientContexts_= visitor.visitList(clientContexts_, other.clientContexts_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 18: {
                org.chromium.components.sync.protocol.GetUpdatesCallerInfo.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = callerInfo_.toBuilder();
                }
                callerInfo_ = input.readMessage(org.chromium.components.sync.protocol.GetUpdatesCallerInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(callerInfo_);
                  callerInfo_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
              case 24: {
                bitField0_ |= 0x00000002;
                fetchFolders_ = input.readBool();
                break;
              }
              case 40: {
                bitField0_ |= 0x00000004;
                batchSize_ = input.readInt32();
                break;
              }
              case 50: {
                if (!fromProgressMarker_.isModifiable()) {
                  fromProgressMarker_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(fromProgressMarker_);
                }
                fromProgressMarker_.add(
                    input.readMessage(org.chromium.components.sync.protocol.DataTypeProgressMarker.parser(), extensionRegistry));
                break;
              }
              case 56: {
                bitField0_ |= 0x00000008;
                streaming_ = input.readBool();
                break;
              }
              case 64: {
                bitField0_ |= 0x00000010;
                needEncryptionKey_ = input.readBool();
                break;
              }
              case 72: {
                int rawValue = input.readEnum();
                org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin value = org.chromium.components.sync.protocol.SyncEnums.GetUpdatesOrigin.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(9, rawValue);
                } else {
                  bitField0_ |= 0x00000040;
                  getUpdatesOrigin_ = rawValue;
                }
                break;
              }
              case 80: {
                bitField0_ |= 0x00000080;
                isRetry_ = input.readBool();
                break;
              }
              case 90: {
                if (!clientContexts_.isModifiable()) {
                  clientContexts_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(clientContexts_);
                }
                clientContexts_.add(
                    input.readMessage(org.chromium.components.sync.protocol.DataTypeContext.parser(), extensionRegistry));
                break;
              }
              case 8000: {
                bitField0_ |= 0x00000020;
                createMobileBookmarksFolder_ = input.readBool();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.GetUpdatesMessage.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.GetUpdatesMessage)
  private static final org.chromium.components.sync.protocol.GetUpdatesMessage DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new GetUpdatesMessage();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.GetUpdatesMessage getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<GetUpdatesMessage> PARSER;

  public static com.google.protobuf.Parser<GetUpdatesMessage> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

