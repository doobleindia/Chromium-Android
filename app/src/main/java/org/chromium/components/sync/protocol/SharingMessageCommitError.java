// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing_message_specifics.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * Used for the server to return fine grained commit errors back to the client.
 * </pre>
 *
 * Protobuf type {@code sync_pb.SharingMessageCommitError}
 */
public  final class SharingMessageCommitError extends
    com.google.protobuf.GeneratedMessageLite<
        SharingMessageCommitError, SharingMessageCommitError.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.SharingMessageCommitError)
    SharingMessageCommitErrorOrBuilder {
  private SharingMessageCommitError() {
  }
  /**
   * <pre>
   * This enum is used in histograms. Entries should not be renumbered and
   * numeric values should never be reused. Also remember to update in
   * tools/metrics/histograms/enums.xml SyncSharingMessageCommitErrorCode enum.
   * </pre>
   *
   * Protobuf enum {@code sync_pb.SharingMessageCommitError.ErrorCode}
   */
  public enum ErrorCode
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>NONE = 0;</code>
     */
    NONE(0),
    /**
     * <code>INVALID_ARGUMENT = 1;</code>
     */
    INVALID_ARGUMENT(1),
    /**
     * <code>NOT_FOUND = 2;</code>
     */
    NOT_FOUND(2),
    /**
     * <code>INTERNAL = 3;</code>
     */
    INTERNAL(3),
    /**
     * <code>UNAVAILABLE = 4;</code>
     */
    UNAVAILABLE(4),
    /**
     * <code>RESOURCE_EXHAUSTED = 5;</code>
     */
    RESOURCE_EXHAUSTED(5),
    /**
     * <code>UNAUTHENTICATED = 6;</code>
     */
    UNAUTHENTICATED(6),
    /**
     * <code>PERMISSION_DENIED = 7;</code>
     */
    PERMISSION_DENIED(7),
    /**
     * <pre>
     * Client-specific error codes.
     * </pre>
     *
     * <code>SYNC_TURNED_OFF = 8;</code>
     */
    SYNC_TURNED_OFF(8),
    /**
     * <code>SYNC_NETWORK_ERROR = 9;</code>
     */
    SYNC_NETWORK_ERROR(9),
    /**
     * <pre>
     * Error code for server error or unparsable server response.
     * </pre>
     *
     * <code>SYNC_SERVER_ERROR = 10;</code>
     */
    SYNC_SERVER_ERROR(10),
    ;

    /**
     * <code>NONE = 0;</code>
     */
    public static final int NONE_VALUE = 0;
    /**
     * <code>INVALID_ARGUMENT = 1;</code>
     */
    public static final int INVALID_ARGUMENT_VALUE = 1;
    /**
     * <code>NOT_FOUND = 2;</code>
     */
    public static final int NOT_FOUND_VALUE = 2;
    /**
     * <code>INTERNAL = 3;</code>
     */
    public static final int INTERNAL_VALUE = 3;
    /**
     * <code>UNAVAILABLE = 4;</code>
     */
    public static final int UNAVAILABLE_VALUE = 4;
    /**
     * <code>RESOURCE_EXHAUSTED = 5;</code>
     */
    public static final int RESOURCE_EXHAUSTED_VALUE = 5;
    /**
     * <code>UNAUTHENTICATED = 6;</code>
     */
    public static final int UNAUTHENTICATED_VALUE = 6;
    /**
     * <code>PERMISSION_DENIED = 7;</code>
     */
    public static final int PERMISSION_DENIED_VALUE = 7;
    /**
     * <pre>
     * Client-specific error codes.
     * </pre>
     *
     * <code>SYNC_TURNED_OFF = 8;</code>
     */
    public static final int SYNC_TURNED_OFF_VALUE = 8;
    /**
     * <code>SYNC_NETWORK_ERROR = 9;</code>
     */
    public static final int SYNC_NETWORK_ERROR_VALUE = 9;
    /**
     * <pre>
     * Error code for server error or unparsable server response.
     * </pre>
     *
     * <code>SYNC_SERVER_ERROR = 10;</code>
     */
    public static final int SYNC_SERVER_ERROR_VALUE = 10;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ErrorCode valueOf(int value) {
      return forNumber(value);
    }

    public static ErrorCode forNumber(int value) {
      switch (value) {
        case 0: return NONE;
        case 1: return INVALID_ARGUMENT;
        case 2: return NOT_FOUND;
        case 3: return INTERNAL;
        case 4: return UNAVAILABLE;
        case 5: return RESOURCE_EXHAUSTED;
        case 6: return UNAUTHENTICATED;
        case 7: return PERMISSION_DENIED;
        case 8: return SYNC_TURNED_OFF;
        case 9: return SYNC_NETWORK_ERROR;
        case 10: return SYNC_SERVER_ERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ErrorCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ErrorCode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ErrorCode>() {
            public ErrorCode findValueByNumber(int number) {
              return ErrorCode.forNumber(number);
            }
          };

    private final int value;

    private ErrorCode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sync_pb.SharingMessageCommitError.ErrorCode)
  }

  private int bitField0_;
  public static final int ERROR_CODE_FIELD_NUMBER = 1;
  private int errorCode_;
  /**
   * <code>optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;</code>
   */
  public boolean hasErrorCode() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;</code>
   */
  public org.chromium.components.sync.protocol.SharingMessageCommitError.ErrorCode getErrorCode() {
    org.chromium.components.sync.protocol.SharingMessageCommitError.ErrorCode result = org.chromium.components.sync.protocol.SharingMessageCommitError.ErrorCode.forNumber(errorCode_);
    return result == null ? org.chromium.components.sync.protocol.SharingMessageCommitError.ErrorCode.NONE : result;
  }
  /**
   * <code>optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;</code>
   */
  private void setErrorCode(org.chromium.components.sync.protocol.SharingMessageCommitError.ErrorCode value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000001;
    errorCode_ = value.getNumber();
  }
  /**
   * <code>optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;</code>
   */
  private void clearErrorCode() {
    bitField0_ = (bitField0_ & ~0x00000001);
    errorCode_ = 0;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeEnum(1, errorCode_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, errorCode_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.SharingMessageCommitError parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.SharingMessageCommitError parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SharingMessageCommitError parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.SharingMessageCommitError parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SharingMessageCommitError parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SharingMessageCommitError parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SharingMessageCommitError parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SharingMessageCommitError parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SharingMessageCommitError parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SharingMessageCommitError parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.SharingMessageCommitError prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Used for the server to return fine grained commit errors back to the client.
   * </pre>
   *
   * Protobuf type {@code sync_pb.SharingMessageCommitError}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.SharingMessageCommitError, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.SharingMessageCommitError)
      org.chromium.components.sync.protocol.SharingMessageCommitErrorOrBuilder {
    // Construct using org.chromium.components.sync.protocol.SharingMessageCommitError.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;</code>
     */
    public boolean hasErrorCode() {
      return instance.hasErrorCode();
    }
    /**
     * <code>optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;</code>
     */
    public org.chromium.components.sync.protocol.SharingMessageCommitError.ErrorCode getErrorCode() {
      return instance.getErrorCode();
    }
    /**
     * <code>optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;</code>
     */
    public Builder setErrorCode(org.chromium.components.sync.protocol.SharingMessageCommitError.ErrorCode value) {
      copyOnWrite();
      instance.setErrorCode(value);
      return this;
    }
    /**
     * <code>optional .sync_pb.SharingMessageCommitError.ErrorCode error_code = 1;</code>
     */
    public Builder clearErrorCode() {
      copyOnWrite();
      instance.clearErrorCode();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.SharingMessageCommitError)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.SharingMessageCommitError();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.SharingMessageCommitError other = (org.chromium.components.sync.protocol.SharingMessageCommitError) arg1;
        errorCode_ = visitor.visitInt(hasErrorCode(), errorCode_,
            other.hasErrorCode(), other.errorCode_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                org.chromium.components.sync.protocol.SharingMessageCommitError.ErrorCode value = org.chromium.components.sync.protocol.SharingMessageCommitError.ErrorCode.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  errorCode_ = rawValue;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.SharingMessageCommitError.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.SharingMessageCommitError)
  private static final org.chromium.components.sync.protocol.SharingMessageCommitError DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new SharingMessageCommitError();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.SharingMessageCommitError getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SharingMessageCommitError> PARSER;

  public static com.google.protobuf.Parser<SharingMessageCommitError> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

