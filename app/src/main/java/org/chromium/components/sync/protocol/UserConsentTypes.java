// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_consent_types.proto

package org.chromium.components.sync.protocol;

/**
 * Protobuf type {@code sync_pb.UserConsentTypes}
 */
public  final class UserConsentTypes extends
    com.google.protobuf.GeneratedMessageLite<
        UserConsentTypes, UserConsentTypes.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.UserConsentTypes)
    UserConsentTypesOrBuilder {
  private UserConsentTypes() {
  }
  /**
   * <pre>
   * The status of a particular User Consent. The status describes the state
   * of the consent as it is: given, not_given.
   * </pre>
   *
   * Protobuf enum {@code sync_pb.UserConsentTypes.ConsentStatus}
   */
  public enum ConsentStatus
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * The status is unspecified e.g. because the user was not asked to
     * consent yet or an error happened or the decision was delayed.
     * </pre>
     *
     * <code>CONSENT_STATUS_UNSPECIFIED = 0;</code>
     */
    CONSENT_STATUS_UNSPECIFIED(0),
    /**
     * <pre>
     * The consent is not given. This means the user either revoked the
     * consent or did not grant it in the first place.
     * </pre>
     *
     * <code>NOT_GIVEN = 1;</code>
     */
    NOT_GIVEN(1),
    /**
     * <pre>
     * The consent is given. This means the user did grant the consent.
     * </pre>
     *
     * <code>GIVEN = 2;</code>
     */
    GIVEN(2),
    ;

    /**
     * <pre>
     * The status is unspecified e.g. because the user was not asked to
     * consent yet or an error happened or the decision was delayed.
     * </pre>
     *
     * <code>CONSENT_STATUS_UNSPECIFIED = 0;</code>
     */
    public static final int CONSENT_STATUS_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * The consent is not given. This means the user either revoked the
     * consent or did not grant it in the first place.
     * </pre>
     *
     * <code>NOT_GIVEN = 1;</code>
     */
    public static final int NOT_GIVEN_VALUE = 1;
    /**
     * <pre>
     * The consent is given. This means the user did grant the consent.
     * </pre>
     *
     * <code>GIVEN = 2;</code>
     */
    public static final int GIVEN_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ConsentStatus valueOf(int value) {
      return forNumber(value);
    }

    public static ConsentStatus forNumber(int value) {
      switch (value) {
        case 0: return CONSENT_STATUS_UNSPECIFIED;
        case 1: return NOT_GIVEN;
        case 2: return GIVEN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ConsentStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ConsentStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ConsentStatus>() {
            public ConsentStatus findValueByNumber(int number) {
              return ConsentStatus.forNumber(number);
            }
          };

    private final int value;

    private ConsentStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sync_pb.UserConsentTypes.ConsentStatus)
  }

  public interface ArcBackupAndRestoreConsentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    java.util.List<java.lang.Integer> getDescriptionGrdIdsList();
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    int getDescriptionGrdIdsCount();
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    int getDescriptionGrdIds(int index);

    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    boolean hasConfirmationGrdId();
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    int getConfirmationGrdId();

    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    boolean hasStatus();
    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus();
  }
  /**
   * <pre>
   * The user consent for the ARC Backup And Restore feature. The consent
   * status is determined by the corresponding setting on the ARC setup dialog.
   * </pre>
   *
   * Protobuf type {@code sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent}
   */
  public  static final class ArcBackupAndRestoreConsent extends
      com.google.protobuf.GeneratedMessageLite<
          ArcBackupAndRestoreConsent, ArcBackupAndRestoreConsent.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
      ArcBackupAndRestoreConsentOrBuilder {
    private ArcBackupAndRestoreConsent() {
      descriptionGrdIds_ = emptyIntList();
    }
    private int bitField0_;
    public static final int DESCRIPTION_GRD_IDS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.IntList descriptionGrdIds_;
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getDescriptionGrdIdsList() {
      return descriptionGrdIds_;
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    public int getDescriptionGrdIdsCount() {
      return descriptionGrdIds_.size();
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    public int getDescriptionGrdIds(int index) {
      return descriptionGrdIds_.getInt(index);
    }
    private void ensureDescriptionGrdIdsIsMutable() {
      if (!descriptionGrdIds_.isModifiable()) {
        descriptionGrdIds_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
       }
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void setDescriptionGrdIds(
        int index, int value) {
      ensureDescriptionGrdIdsIsMutable();
      descriptionGrdIds_.setInt(index, value);
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void addDescriptionGrdIds(int value) {
      ensureDescriptionGrdIdsIsMutable();
      descriptionGrdIds_.addInt(value);
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void addAllDescriptionGrdIds(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureDescriptionGrdIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, descriptionGrdIds_);
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void clearDescriptionGrdIds() {
      descriptionGrdIds_ = emptyIntList();
    }

    public static final int CONFIRMATION_GRD_ID_FIELD_NUMBER = 2;
    private int confirmationGrdId_;
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    public boolean hasConfirmationGrdId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    public int getConfirmationGrdId() {
      return confirmationGrdId_;
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    private void setConfirmationGrdId(int value) {
      bitField0_ |= 0x00000001;
      confirmationGrdId_ = value;
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    private void clearConfirmationGrdId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      confirmationGrdId_ = 0;
    }

    public static final int STATUS_FIELD_NUMBER = 3;
    private int status_;
    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    public org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus() {
      org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus result = org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.forNumber(status_);
      return result == null ? org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.CONSENT_STATUS_UNSPECIFIED : result;
    }
    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    private void setStatus(org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      status_ = value.getNumber();
    }
    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    private void clearStatus() {
      bitField0_ = (bitField0_ & ~0x00000002);
      status_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < descriptionGrdIds_.size(); i++) {
        output.writeInt32(1, descriptionGrdIds_.getInt(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, confirmationGrdId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(3, status_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < descriptionGrdIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(descriptionGrdIds_.getInt(i));
        }
        size += dataSize;
        size += 1 * getDescriptionGrdIdsList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, confirmationGrdId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, status_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * The user consent for the ARC Backup And Restore feature. The consent
     * status is determined by the corresponding setting on the ARC setup dialog.
     * </pre>
     *
     * Protobuf type {@code sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
        org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsentOrBuilder {
      // Construct using org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getDescriptionGrdIdsList() {
        return java.util.Collections.unmodifiableList(
            instance.getDescriptionGrdIdsList());
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public int getDescriptionGrdIdsCount() {
        return instance.getDescriptionGrdIdsCount();
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public int getDescriptionGrdIds(int index) {
        return instance.getDescriptionGrdIds(index);
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder setDescriptionGrdIds(
          int index, int value) {
        copyOnWrite();
        instance.setDescriptionGrdIds(index, value);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder addDescriptionGrdIds(int value) {
        copyOnWrite();
        instance.addDescriptionGrdIds(value);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder addAllDescriptionGrdIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllDescriptionGrdIds(values);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder clearDescriptionGrdIds() {
        copyOnWrite();
        instance.clearDescriptionGrdIds();
        return this;
      }

      /**
       * <pre>
       * Id of the string of the UI element the user clicked when consenting.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public boolean hasConfirmationGrdId() {
        return instance.hasConfirmationGrdId();
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked when consenting.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public int getConfirmationGrdId() {
        return instance.getConfirmationGrdId();
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked when consenting.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public Builder setConfirmationGrdId(int value) {
        copyOnWrite();
        instance.setConfirmationGrdId(value);
        return this;
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked when consenting.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public Builder clearConfirmationGrdId() {
        copyOnWrite();
        instance.clearConfirmationGrdId();
        return this;
      }

      /**
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public boolean hasStatus() {
        return instance.hasStatus();
      }
      /**
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus() {
        return instance.getStatus();
      }
      /**
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public Builder setStatus(org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value) {
        copyOnWrite();
        instance.setStatus(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public Builder clearStatus() {
        copyOnWrite();
        instance.clearStatus();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          descriptionGrdIds_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent other = (org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent) arg1;
          descriptionGrdIds_= visitor.visitIntList(descriptionGrdIds_, other.descriptionGrdIds_);
          confirmationGrdId_ = visitor.visitInt(
              hasConfirmationGrdId(), confirmationGrdId_,
              other.hasConfirmationGrdId(), other.confirmationGrdId_);
          status_ = visitor.visitInt(hasStatus(), status_,
              other.hasStatus(), other.status_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  if (!descriptionGrdIds_.isModifiable()) {
                    descriptionGrdIds_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
                  }
                  descriptionGrdIds_.addInt(input.readInt32());
                  break;
                }
                case 10: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!descriptionGrdIds_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    descriptionGrdIds_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    descriptionGrdIds_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000001;
                  confirmationGrdId_ = input.readInt32();
                  break;
                }
                case 24: {
                  int rawValue = input.readEnum();
                  org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value = org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(3, rawValue);
                  } else {
                    bitField0_ |= 0x00000002;
                    status_ = rawValue;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
    private static final org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ArcBackupAndRestoreConsent();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ArcBackupAndRestoreConsent> PARSER;

    public static com.google.protobuf.Parser<ArcBackupAndRestoreConsent> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ArcGoogleLocationServiceConsentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    java.util.List<java.lang.Integer> getDescriptionGrdIdsList();
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    int getDescriptionGrdIdsCount();
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    int getDescriptionGrdIds(int index);

    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    boolean hasConfirmationGrdId();
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    int getConfirmationGrdId();

    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    boolean hasStatus();
    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus();
  }
  /**
   * <pre>
   * The user consent for the Google Location Service. The consent status is
   * determined by the corresponding setting on the ARC setup dialog.
   * </pre>
   *
   * Protobuf type {@code sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent}
   */
  public  static final class ArcGoogleLocationServiceConsent extends
      com.google.protobuf.GeneratedMessageLite<
          ArcGoogleLocationServiceConsent, ArcGoogleLocationServiceConsent.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
      ArcGoogleLocationServiceConsentOrBuilder {
    private ArcGoogleLocationServiceConsent() {
      descriptionGrdIds_ = emptyIntList();
    }
    private int bitField0_;
    public static final int DESCRIPTION_GRD_IDS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.IntList descriptionGrdIds_;
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getDescriptionGrdIdsList() {
      return descriptionGrdIds_;
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    public int getDescriptionGrdIdsCount() {
      return descriptionGrdIds_.size();
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    public int getDescriptionGrdIds(int index) {
      return descriptionGrdIds_.getInt(index);
    }
    private void ensureDescriptionGrdIdsIsMutable() {
      if (!descriptionGrdIds_.isModifiable()) {
        descriptionGrdIds_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
       }
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void setDescriptionGrdIds(
        int index, int value) {
      ensureDescriptionGrdIdsIsMutable();
      descriptionGrdIds_.setInt(index, value);
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void addDescriptionGrdIds(int value) {
      ensureDescriptionGrdIdsIsMutable();
      descriptionGrdIds_.addInt(value);
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void addAllDescriptionGrdIds(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureDescriptionGrdIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, descriptionGrdIds_);
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void clearDescriptionGrdIds() {
      descriptionGrdIds_ = emptyIntList();
    }

    public static final int CONFIRMATION_GRD_ID_FIELD_NUMBER = 2;
    private int confirmationGrdId_;
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    public boolean hasConfirmationGrdId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    public int getConfirmationGrdId() {
      return confirmationGrdId_;
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    private void setConfirmationGrdId(int value) {
      bitField0_ |= 0x00000001;
      confirmationGrdId_ = value;
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    private void clearConfirmationGrdId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      confirmationGrdId_ = 0;
    }

    public static final int STATUS_FIELD_NUMBER = 3;
    private int status_;
    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    public org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus() {
      org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus result = org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.forNumber(status_);
      return result == null ? org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.CONSENT_STATUS_UNSPECIFIED : result;
    }
    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    private void setStatus(org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      status_ = value.getNumber();
    }
    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    private void clearStatus() {
      bitField0_ = (bitField0_ & ~0x00000002);
      status_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < descriptionGrdIds_.size(); i++) {
        output.writeInt32(1, descriptionGrdIds_.getInt(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, confirmationGrdId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(3, status_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < descriptionGrdIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(descriptionGrdIds_.getInt(i));
        }
        size += dataSize;
        size += 1 * getDescriptionGrdIdsList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, confirmationGrdId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, status_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * The user consent for the Google Location Service. The consent status is
     * determined by the corresponding setting on the ARC setup dialog.
     * </pre>
     *
     * Protobuf type {@code sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
        org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsentOrBuilder {
      // Construct using org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getDescriptionGrdIdsList() {
        return java.util.Collections.unmodifiableList(
            instance.getDescriptionGrdIdsList());
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public int getDescriptionGrdIdsCount() {
        return instance.getDescriptionGrdIdsCount();
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public int getDescriptionGrdIds(int index) {
        return instance.getDescriptionGrdIds(index);
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder setDescriptionGrdIds(
          int index, int value) {
        copyOnWrite();
        instance.setDescriptionGrdIds(index, value);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder addDescriptionGrdIds(int value) {
        copyOnWrite();
        instance.addDescriptionGrdIds(value);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder addAllDescriptionGrdIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllDescriptionGrdIds(values);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder clearDescriptionGrdIds() {
        copyOnWrite();
        instance.clearDescriptionGrdIds();
        return this;
      }

      /**
       * <pre>
       * Id of the string of the UI element the user clicked when consenting.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public boolean hasConfirmationGrdId() {
        return instance.hasConfirmationGrdId();
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked when consenting.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public int getConfirmationGrdId() {
        return instance.getConfirmationGrdId();
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked when consenting.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public Builder setConfirmationGrdId(int value) {
        copyOnWrite();
        instance.setConfirmationGrdId(value);
        return this;
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked when consenting.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public Builder clearConfirmationGrdId() {
        copyOnWrite();
        instance.clearConfirmationGrdId();
        return this;
      }

      /**
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public boolean hasStatus() {
        return instance.hasStatus();
      }
      /**
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus() {
        return instance.getStatus();
      }
      /**
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public Builder setStatus(org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value) {
        copyOnWrite();
        instance.setStatus(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public Builder clearStatus() {
        copyOnWrite();
        instance.clearStatus();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          descriptionGrdIds_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent other = (org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent) arg1;
          descriptionGrdIds_= visitor.visitIntList(descriptionGrdIds_, other.descriptionGrdIds_);
          confirmationGrdId_ = visitor.visitInt(
              hasConfirmationGrdId(), confirmationGrdId_,
              other.hasConfirmationGrdId(), other.confirmationGrdId_);
          status_ = visitor.visitInt(hasStatus(), status_,
              other.hasStatus(), other.status_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  if (!descriptionGrdIds_.isModifiable()) {
                    descriptionGrdIds_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
                  }
                  descriptionGrdIds_.addInt(input.readInt32());
                  break;
                }
                case 10: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!descriptionGrdIds_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    descriptionGrdIds_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    descriptionGrdIds_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000001;
                  confirmationGrdId_ = input.readInt32();
                  break;
                }
                case 24: {
                  int rawValue = input.readEnum();
                  org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value = org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(3, rawValue);
                  } else {
                    bitField0_ |= 0x00000002;
                    status_ = rawValue;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
    private static final org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ArcGoogleLocationServiceConsent();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ArcGoogleLocationServiceConsent> PARSER;

    public static com.google.protobuf.Parser<ArcGoogleLocationServiceConsent> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ArcMetricsAndUsageConsentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    java.util.List<java.lang.Integer> getDescriptionGrdIdsList();
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    int getDescriptionGrdIdsCount();
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    int getDescriptionGrdIds(int index);

    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    boolean hasConfirmationGrdId();
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    int getConfirmationGrdId();

    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    boolean hasStatus();
    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus();
  }
  /**
   * <pre>
   * The user consent for Metrics and Usage reporting on Android for Chrome OS.
   * </pre>
   *
   * Protobuf type {@code sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent}
   */
  public  static final class ArcMetricsAndUsageConsent extends
      com.google.protobuf.GeneratedMessageLite<
          ArcMetricsAndUsageConsent, ArcMetricsAndUsageConsent.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
      ArcMetricsAndUsageConsentOrBuilder {
    private ArcMetricsAndUsageConsent() {
      descriptionGrdIds_ = emptyIntList();
    }
    private int bitField0_;
    public static final int DESCRIPTION_GRD_IDS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.IntList descriptionGrdIds_;
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getDescriptionGrdIdsList() {
      return descriptionGrdIds_;
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    public int getDescriptionGrdIdsCount() {
      return descriptionGrdIds_.size();
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    public int getDescriptionGrdIds(int index) {
      return descriptionGrdIds_.getInt(index);
    }
    private void ensureDescriptionGrdIdsIsMutable() {
      if (!descriptionGrdIds_.isModifiable()) {
        descriptionGrdIds_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
       }
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void setDescriptionGrdIds(
        int index, int value) {
      ensureDescriptionGrdIdsIsMutable();
      descriptionGrdIds_.setInt(index, value);
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void addDescriptionGrdIds(int value) {
      ensureDescriptionGrdIdsIsMutable();
      descriptionGrdIds_.addInt(value);
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void addAllDescriptionGrdIds(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureDescriptionGrdIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, descriptionGrdIds_);
    }
    /**
     * <pre>
     * Ids of the strings of the setting text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void clearDescriptionGrdIds() {
      descriptionGrdIds_ = emptyIntList();
    }

    public static final int CONFIRMATION_GRD_ID_FIELD_NUMBER = 2;
    private int confirmationGrdId_;
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    public boolean hasConfirmationGrdId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    public int getConfirmationGrdId() {
      return confirmationGrdId_;
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    private void setConfirmationGrdId(int value) {
      bitField0_ |= 0x00000001;
      confirmationGrdId_ = value;
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    private void clearConfirmationGrdId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      confirmationGrdId_ = 0;
    }

    public static final int STATUS_FIELD_NUMBER = 3;
    private int status_;
    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    public org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus() {
      org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus result = org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.forNumber(status_);
      return result == null ? org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.CONSENT_STATUS_UNSPECIFIED : result;
    }
    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    private void setStatus(org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      status_ = value.getNumber();
    }
    /**
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    private void clearStatus() {
      bitField0_ = (bitField0_ & ~0x00000002);
      status_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < descriptionGrdIds_.size(); i++) {
        output.writeInt32(1, descriptionGrdIds_.getInt(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, confirmationGrdId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(3, status_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < descriptionGrdIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(descriptionGrdIds_.getInt(i));
        }
        size += dataSize;
        size += 1 * getDescriptionGrdIdsList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, confirmationGrdId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, status_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * The user consent for Metrics and Usage reporting on Android for Chrome OS.
     * </pre>
     *
     * Protobuf type {@code sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
        org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsentOrBuilder {
      // Construct using org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getDescriptionGrdIdsList() {
        return java.util.Collections.unmodifiableList(
            instance.getDescriptionGrdIdsList());
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public int getDescriptionGrdIdsCount() {
        return instance.getDescriptionGrdIdsCount();
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public int getDescriptionGrdIds(int index) {
        return instance.getDescriptionGrdIds(index);
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder setDescriptionGrdIds(
          int index, int value) {
        copyOnWrite();
        instance.setDescriptionGrdIds(index, value);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder addDescriptionGrdIds(int value) {
        copyOnWrite();
        instance.addDescriptionGrdIds(value);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder addAllDescriptionGrdIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllDescriptionGrdIds(values);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings of the setting text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder clearDescriptionGrdIds() {
        copyOnWrite();
        instance.clearDescriptionGrdIds();
        return this;
      }

      /**
       * <pre>
       * Id of the string of the UI element the user clicked when consenting.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public boolean hasConfirmationGrdId() {
        return instance.hasConfirmationGrdId();
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked when consenting.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public int getConfirmationGrdId() {
        return instance.getConfirmationGrdId();
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked when consenting.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public Builder setConfirmationGrdId(int value) {
        copyOnWrite();
        instance.setConfirmationGrdId(value);
        return this;
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked when consenting.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public Builder clearConfirmationGrdId() {
        copyOnWrite();
        instance.clearConfirmationGrdId();
        return this;
      }

      /**
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public boolean hasStatus() {
        return instance.hasStatus();
      }
      /**
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus() {
        return instance.getStatus();
      }
      /**
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public Builder setStatus(org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value) {
        copyOnWrite();
        instance.setStatus(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public Builder clearStatus() {
        copyOnWrite();
        instance.clearStatus();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          descriptionGrdIds_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent other = (org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent) arg1;
          descriptionGrdIds_= visitor.visitIntList(descriptionGrdIds_, other.descriptionGrdIds_);
          confirmationGrdId_ = visitor.visitInt(
              hasConfirmationGrdId(), confirmationGrdId_,
              other.hasConfirmationGrdId(), other.confirmationGrdId_);
          status_ = visitor.visitInt(hasStatus(), status_,
              other.hasStatus(), other.status_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  if (!descriptionGrdIds_.isModifiable()) {
                    descriptionGrdIds_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
                  }
                  descriptionGrdIds_.addInt(input.readInt32());
                  break;
                }
                case 10: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!descriptionGrdIds_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    descriptionGrdIds_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    descriptionGrdIds_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000001;
                  confirmationGrdId_ = input.readInt32();
                  break;
                }
                case 24: {
                  int rawValue = input.readEnum();
                  org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value = org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(3, rawValue);
                  } else {
                    bitField0_ |= 0x00000002;
                    status_ = rawValue;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
    private static final org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ArcMetricsAndUsageConsent();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcMetricsAndUsageConsent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ArcMetricsAndUsageConsent> PARSER;

    public static com.google.protobuf.Parser<ArcMetricsAndUsageConsent> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ArcPlayTermsOfServiceConsentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The length of the UTF-8 encoded string of the Play Terms of Service
     * text. The length is given in number of bytes.
     * </pre>
     *
     * <code>optional int32 play_terms_of_service_text_length = 1;</code>
     */
    boolean hasPlayTermsOfServiceTextLength();
    /**
     * <pre>
     * The length of the UTF-8 encoded string of the Play Terms of Service
     * text. The length is given in number of bytes.
     * </pre>
     *
     * <code>optional int32 play_terms_of_service_text_length = 1;</code>
     */
    int getPlayTermsOfServiceTextLength();

    /**
     * <pre>
     * The SHA1 hash of UTF-8 encoded string of the Play Terms of Service
     * displayed to the user.
     * </pre>
     *
     * <code>optional bytes play_terms_of_service_hash = 2;</code>
     */
    boolean hasPlayTermsOfServiceHash();
    /**
     * <pre>
     * The SHA1 hash of UTF-8 encoded string of the Play Terms of Service
     * displayed to the user.
     * </pre>
     *
     * <code>optional bytes play_terms_of_service_hash = 2;</code>
     */
    com.google.protobuf.ByteString getPlayTermsOfServiceHash();

    /**
     * <pre>
     * GRD Ids of the strings on the consent UI that was shown to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 5;</code>
     */
    java.util.List<java.lang.Integer> getDescriptionGrdIdsList();
    /**
     * <pre>
     * GRD Ids of the strings on the consent UI that was shown to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 5;</code>
     */
    int getDescriptionGrdIdsCount();
    /**
     * <pre>
     * GRD Ids of the strings on the consent UI that was shown to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 5;</code>
     */
    int getDescriptionGrdIds(int index);

    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 3;</code>
     */
    boolean hasConfirmationGrdId();
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 3;</code>
     */
    int getConfirmationGrdId();

    /**
     * <pre>
     * The status of the Play Terms of Service consent. This specifies whether
     * the consent was given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;</code>
     */
    boolean hasStatus();
    /**
     * <pre>
     * The status of the Play Terms of Service consent. This specifies whether
     * the consent was given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;</code>
     */
    org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus();

    /**
     * <pre>
     * The user flow during which the consent was recorded. This is necessary in
     * order to create the correct UI context and Event for the backend.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow consent_flow = 6;</code>
     */
    boolean hasConsentFlow();
    /**
     * <pre>
     * The user flow during which the consent was recorded. This is necessary in
     * order to create the correct UI context and Event for the backend.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow consent_flow = 6;</code>
     */
    org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow getConsentFlow();
  }
  /**
   * <pre>
   * The user consent for the Play terms of service is determined by the user
   * action on the ARC setup dialog that presents the Play Terms of Service.
   * </pre>
   *
   * Protobuf type {@code sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent}
   */
  public  static final class ArcPlayTermsOfServiceConsent extends
      com.google.protobuf.GeneratedMessageLite<
          ArcPlayTermsOfServiceConsent, ArcPlayTermsOfServiceConsent.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
      ArcPlayTermsOfServiceConsentOrBuilder {
    private ArcPlayTermsOfServiceConsent() {
      playTermsOfServiceHash_ = com.google.protobuf.ByteString.EMPTY;
      descriptionGrdIds_ = emptyIntList();
      consentFlow_ = 1;
    }
    /**
     * <pre>
     * Enum describing different user flow during which the ARC Play Terms of
     * service consent can be recorded.
     * </pre>
     *
     * Protobuf enum {@code sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow}
     */
    public enum ConsentFlow
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       * The ARC setup flow on a CROS device.
       * </pre>
       *
       * <code>SETUP = 1;</code>
       */
      SETUP(1),
      /**
       * <pre>
       * The user flow for changing the ARC setting on a CROS device.
       * </pre>
       *
       * <code>SETTING_CHANGE = 2;</code>
       */
      SETTING_CHANGE(2),
      ;

      /**
       * <pre>
       * The ARC setup flow on a CROS device.
       * </pre>
       *
       * <code>SETUP = 1;</code>
       */
      public static final int SETUP_VALUE = 1;
      /**
       * <pre>
       * The user flow for changing the ARC setting on a CROS device.
       * </pre>
       *
       * <code>SETTING_CHANGE = 2;</code>
       */
      public static final int SETTING_CHANGE_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ConsentFlow valueOf(int value) {
        return forNumber(value);
      }

      public static ConsentFlow forNumber(int value) {
        switch (value) {
          case 1: return SETUP;
          case 2: return SETTING_CHANGE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ConsentFlow>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ConsentFlow> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ConsentFlow>() {
              public ConsentFlow findValueByNumber(int number) {
                return ConsentFlow.forNumber(number);
              }
            };

      private final int value;

      private ConsentFlow(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow)
    }

    private int bitField0_;
    public static final int PLAY_TERMS_OF_SERVICE_TEXT_LENGTH_FIELD_NUMBER = 1;
    private int playTermsOfServiceTextLength_;
    /**
     * <pre>
     * The length of the UTF-8 encoded string of the Play Terms of Service
     * text. The length is given in number of bytes.
     * </pre>
     *
     * <code>optional int32 play_terms_of_service_text_length = 1;</code>
     */
    public boolean hasPlayTermsOfServiceTextLength() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The length of the UTF-8 encoded string of the Play Terms of Service
     * text. The length is given in number of bytes.
     * </pre>
     *
     * <code>optional int32 play_terms_of_service_text_length = 1;</code>
     */
    public int getPlayTermsOfServiceTextLength() {
      return playTermsOfServiceTextLength_;
    }
    /**
     * <pre>
     * The length of the UTF-8 encoded string of the Play Terms of Service
     * text. The length is given in number of bytes.
     * </pre>
     *
     * <code>optional int32 play_terms_of_service_text_length = 1;</code>
     */
    private void setPlayTermsOfServiceTextLength(int value) {
      bitField0_ |= 0x00000001;
      playTermsOfServiceTextLength_ = value;
    }
    /**
     * <pre>
     * The length of the UTF-8 encoded string of the Play Terms of Service
     * text. The length is given in number of bytes.
     * </pre>
     *
     * <code>optional int32 play_terms_of_service_text_length = 1;</code>
     */
    private void clearPlayTermsOfServiceTextLength() {
      bitField0_ = (bitField0_ & ~0x00000001);
      playTermsOfServiceTextLength_ = 0;
    }

    public static final int PLAY_TERMS_OF_SERVICE_HASH_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString playTermsOfServiceHash_;
    /**
     * <pre>
     * The SHA1 hash of UTF-8 encoded string of the Play Terms of Service
     * displayed to the user.
     * </pre>
     *
     * <code>optional bytes play_terms_of_service_hash = 2;</code>
     */
    public boolean hasPlayTermsOfServiceHash() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The SHA1 hash of UTF-8 encoded string of the Play Terms of Service
     * displayed to the user.
     * </pre>
     *
     * <code>optional bytes play_terms_of_service_hash = 2;</code>
     */
    public com.google.protobuf.ByteString getPlayTermsOfServiceHash() {
      return playTermsOfServiceHash_;
    }
    /**
     * <pre>
     * The SHA1 hash of UTF-8 encoded string of the Play Terms of Service
     * displayed to the user.
     * </pre>
     *
     * <code>optional bytes play_terms_of_service_hash = 2;</code>
     */
    private void setPlayTermsOfServiceHash(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      playTermsOfServiceHash_ = value;
    }
    /**
     * <pre>
     * The SHA1 hash of UTF-8 encoded string of the Play Terms of Service
     * displayed to the user.
     * </pre>
     *
     * <code>optional bytes play_terms_of_service_hash = 2;</code>
     */
    private void clearPlayTermsOfServiceHash() {
      bitField0_ = (bitField0_ & ~0x00000002);
      playTermsOfServiceHash_ = getDefaultInstance().getPlayTermsOfServiceHash();
    }

    public static final int DESCRIPTION_GRD_IDS_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.IntList descriptionGrdIds_;
    /**
     * <pre>
     * GRD Ids of the strings on the consent UI that was shown to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 5;</code>
     */
    public java.util.List<java.lang.Integer>
        getDescriptionGrdIdsList() {
      return descriptionGrdIds_;
    }
    /**
     * <pre>
     * GRD Ids of the strings on the consent UI that was shown to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 5;</code>
     */
    public int getDescriptionGrdIdsCount() {
      return descriptionGrdIds_.size();
    }
    /**
     * <pre>
     * GRD Ids of the strings on the consent UI that was shown to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 5;</code>
     */
    public int getDescriptionGrdIds(int index) {
      return descriptionGrdIds_.getInt(index);
    }
    private void ensureDescriptionGrdIdsIsMutable() {
      if (!descriptionGrdIds_.isModifiable()) {
        descriptionGrdIds_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
       }
    }
    /**
     * <pre>
     * GRD Ids of the strings on the consent UI that was shown to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 5;</code>
     */
    private void setDescriptionGrdIds(
        int index, int value) {
      ensureDescriptionGrdIdsIsMutable();
      descriptionGrdIds_.setInt(index, value);
    }
    /**
     * <pre>
     * GRD Ids of the strings on the consent UI that was shown to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 5;</code>
     */
    private void addDescriptionGrdIds(int value) {
      ensureDescriptionGrdIdsIsMutable();
      descriptionGrdIds_.addInt(value);
    }
    /**
     * <pre>
     * GRD Ids of the strings on the consent UI that was shown to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 5;</code>
     */
    private void addAllDescriptionGrdIds(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureDescriptionGrdIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, descriptionGrdIds_);
    }
    /**
     * <pre>
     * GRD Ids of the strings on the consent UI that was shown to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 5;</code>
     */
    private void clearDescriptionGrdIds() {
      descriptionGrdIds_ = emptyIntList();
    }

    public static final int CONFIRMATION_GRD_ID_FIELD_NUMBER = 3;
    private int confirmationGrdId_;
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 3;</code>
     */
    public boolean hasConfirmationGrdId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 3;</code>
     */
    public int getConfirmationGrdId() {
      return confirmationGrdId_;
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 3;</code>
     */
    private void setConfirmationGrdId(int value) {
      bitField0_ |= 0x00000004;
      confirmationGrdId_ = value;
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 3;</code>
     */
    private void clearConfirmationGrdId() {
      bitField0_ = (bitField0_ & ~0x00000004);
      confirmationGrdId_ = 0;
    }

    public static final int STATUS_FIELD_NUMBER = 4;
    private int status_;
    /**
     * <pre>
     * The status of the Play Terms of Service consent. This specifies whether
     * the consent was given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * The status of the Play Terms of Service consent. This specifies whether
     * the consent was given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;</code>
     */
    public org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus() {
      org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus result = org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.forNumber(status_);
      return result == null ? org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.CONSENT_STATUS_UNSPECIFIED : result;
    }
    /**
     * <pre>
     * The status of the Play Terms of Service consent. This specifies whether
     * the consent was given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;</code>
     */
    private void setStatus(org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000008;
      status_ = value.getNumber();
    }
    /**
     * <pre>
     * The status of the Play Terms of Service consent. This specifies whether
     * the consent was given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;</code>
     */
    private void clearStatus() {
      bitField0_ = (bitField0_ & ~0x00000008);
      status_ = 0;
    }

    public static final int CONSENT_FLOW_FIELD_NUMBER = 6;
    private int consentFlow_;
    /**
     * <pre>
     * The user flow during which the consent was recorded. This is necessary in
     * order to create the correct UI context and Event for the backend.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow consent_flow = 6;</code>
     */
    public boolean hasConsentFlow() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * The user flow during which the consent was recorded. This is necessary in
     * order to create the correct UI context and Event for the backend.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow consent_flow = 6;</code>
     */
    public org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow getConsentFlow() {
      org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow result = org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow.forNumber(consentFlow_);
      return result == null ? org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow.SETUP : result;
    }
    /**
     * <pre>
     * The user flow during which the consent was recorded. This is necessary in
     * order to create the correct UI context and Event for the backend.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow consent_flow = 6;</code>
     */
    private void setConsentFlow(org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000010;
      consentFlow_ = value.getNumber();
    }
    /**
     * <pre>
     * The user flow during which the consent was recorded. This is necessary in
     * order to create the correct UI context and Event for the backend.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow consent_flow = 6;</code>
     */
    private void clearConsentFlow() {
      bitField0_ = (bitField0_ & ~0x00000010);
      consentFlow_ = 1;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, playTermsOfServiceTextLength_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, playTermsOfServiceHash_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, confirmationGrdId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, status_);
      }
      for (int i = 0; i < descriptionGrdIds_.size(); i++) {
        output.writeInt32(5, descriptionGrdIds_.getInt(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(6, consentFlow_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, playTermsOfServiceTextLength_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, playTermsOfServiceHash_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, confirmationGrdId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, status_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < descriptionGrdIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(descriptionGrdIds_.getInt(i));
        }
        size += dataSize;
        size += 1 * getDescriptionGrdIdsList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, consentFlow_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * The user consent for the Play terms of service is determined by the user
     * action on the ARC setup dialog that presents the Play Terms of Service.
     * </pre>
     *
     * Protobuf type {@code sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
        org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsentOrBuilder {
      // Construct using org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The length of the UTF-8 encoded string of the Play Terms of Service
       * text. The length is given in number of bytes.
       * </pre>
       *
       * <code>optional int32 play_terms_of_service_text_length = 1;</code>
       */
      public boolean hasPlayTermsOfServiceTextLength() {
        return instance.hasPlayTermsOfServiceTextLength();
      }
      /**
       * <pre>
       * The length of the UTF-8 encoded string of the Play Terms of Service
       * text. The length is given in number of bytes.
       * </pre>
       *
       * <code>optional int32 play_terms_of_service_text_length = 1;</code>
       */
      public int getPlayTermsOfServiceTextLength() {
        return instance.getPlayTermsOfServiceTextLength();
      }
      /**
       * <pre>
       * The length of the UTF-8 encoded string of the Play Terms of Service
       * text. The length is given in number of bytes.
       * </pre>
       *
       * <code>optional int32 play_terms_of_service_text_length = 1;</code>
       */
      public Builder setPlayTermsOfServiceTextLength(int value) {
        copyOnWrite();
        instance.setPlayTermsOfServiceTextLength(value);
        return this;
      }
      /**
       * <pre>
       * The length of the UTF-8 encoded string of the Play Terms of Service
       * text. The length is given in number of bytes.
       * </pre>
       *
       * <code>optional int32 play_terms_of_service_text_length = 1;</code>
       */
      public Builder clearPlayTermsOfServiceTextLength() {
        copyOnWrite();
        instance.clearPlayTermsOfServiceTextLength();
        return this;
      }

      /**
       * <pre>
       * The SHA1 hash of UTF-8 encoded string of the Play Terms of Service
       * displayed to the user.
       * </pre>
       *
       * <code>optional bytes play_terms_of_service_hash = 2;</code>
       */
      public boolean hasPlayTermsOfServiceHash() {
        return instance.hasPlayTermsOfServiceHash();
      }
      /**
       * <pre>
       * The SHA1 hash of UTF-8 encoded string of the Play Terms of Service
       * displayed to the user.
       * </pre>
       *
       * <code>optional bytes play_terms_of_service_hash = 2;</code>
       */
      public com.google.protobuf.ByteString getPlayTermsOfServiceHash() {
        return instance.getPlayTermsOfServiceHash();
      }
      /**
       * <pre>
       * The SHA1 hash of UTF-8 encoded string of the Play Terms of Service
       * displayed to the user.
       * </pre>
       *
       * <code>optional bytes play_terms_of_service_hash = 2;</code>
       */
      public Builder setPlayTermsOfServiceHash(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPlayTermsOfServiceHash(value);
        return this;
      }
      /**
       * <pre>
       * The SHA1 hash of UTF-8 encoded string of the Play Terms of Service
       * displayed to the user.
       * </pre>
       *
       * <code>optional bytes play_terms_of_service_hash = 2;</code>
       */
      public Builder clearPlayTermsOfServiceHash() {
        copyOnWrite();
        instance.clearPlayTermsOfServiceHash();
        return this;
      }

      /**
       * <pre>
       * GRD Ids of the strings on the consent UI that was shown to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 5;</code>
       */
      public java.util.List<java.lang.Integer>
          getDescriptionGrdIdsList() {
        return java.util.Collections.unmodifiableList(
            instance.getDescriptionGrdIdsList());
      }
      /**
       * <pre>
       * GRD Ids of the strings on the consent UI that was shown to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 5;</code>
       */
      public int getDescriptionGrdIdsCount() {
        return instance.getDescriptionGrdIdsCount();
      }
      /**
       * <pre>
       * GRD Ids of the strings on the consent UI that was shown to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 5;</code>
       */
      public int getDescriptionGrdIds(int index) {
        return instance.getDescriptionGrdIds(index);
      }
      /**
       * <pre>
       * GRD Ids of the strings on the consent UI that was shown to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 5;</code>
       */
      public Builder setDescriptionGrdIds(
          int index, int value) {
        copyOnWrite();
        instance.setDescriptionGrdIds(index, value);
        return this;
      }
      /**
       * <pre>
       * GRD Ids of the strings on the consent UI that was shown to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 5;</code>
       */
      public Builder addDescriptionGrdIds(int value) {
        copyOnWrite();
        instance.addDescriptionGrdIds(value);
        return this;
      }
      /**
       * <pre>
       * GRD Ids of the strings on the consent UI that was shown to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 5;</code>
       */
      public Builder addAllDescriptionGrdIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllDescriptionGrdIds(values);
        return this;
      }
      /**
       * <pre>
       * GRD Ids of the strings on the consent UI that was shown to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 5;</code>
       */
      public Builder clearDescriptionGrdIds() {
        copyOnWrite();
        instance.clearDescriptionGrdIds();
        return this;
      }

      /**
       * <pre>
       * Id of the string of the UI element the user clicked when consenting.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 3;</code>
       */
      public boolean hasConfirmationGrdId() {
        return instance.hasConfirmationGrdId();
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked when consenting.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 3;</code>
       */
      public int getConfirmationGrdId() {
        return instance.getConfirmationGrdId();
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked when consenting.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 3;</code>
       */
      public Builder setConfirmationGrdId(int value) {
        copyOnWrite();
        instance.setConfirmationGrdId(value);
        return this;
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked when consenting.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 3;</code>
       */
      public Builder clearConfirmationGrdId() {
        copyOnWrite();
        instance.clearConfirmationGrdId();
        return this;
      }

      /**
       * <pre>
       * The status of the Play Terms of Service consent. This specifies whether
       * the consent was given or not given/revoked.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;</code>
       */
      public boolean hasStatus() {
        return instance.hasStatus();
      }
      /**
       * <pre>
       * The status of the Play Terms of Service consent. This specifies whether
       * the consent was given or not given/revoked.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;</code>
       */
      public org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus() {
        return instance.getStatus();
      }
      /**
       * <pre>
       * The status of the Play Terms of Service consent. This specifies whether
       * the consent was given or not given/revoked.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;</code>
       */
      public Builder setStatus(org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value) {
        copyOnWrite();
        instance.setStatus(value);
        return this;
      }
      /**
       * <pre>
       * The status of the Play Terms of Service consent. This specifies whether
       * the consent was given or not given/revoked.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;</code>
       */
      public Builder clearStatus() {
        copyOnWrite();
        instance.clearStatus();
        return this;
      }

      /**
       * <pre>
       * The user flow during which the consent was recorded. This is necessary in
       * order to create the correct UI context and Event for the backend.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow consent_flow = 6;</code>
       */
      public boolean hasConsentFlow() {
        return instance.hasConsentFlow();
      }
      /**
       * <pre>
       * The user flow during which the consent was recorded. This is necessary in
       * order to create the correct UI context and Event for the backend.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow consent_flow = 6;</code>
       */
      public org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow getConsentFlow() {
        return instance.getConsentFlow();
      }
      /**
       * <pre>
       * The user flow during which the consent was recorded. This is necessary in
       * order to create the correct UI context and Event for the backend.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow consent_flow = 6;</code>
       */
      public Builder setConsentFlow(org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow value) {
        copyOnWrite();
        instance.setConsentFlow(value);
        return this;
      }
      /**
       * <pre>
       * The user flow during which the consent was recorded. This is necessary in
       * order to create the correct UI context and Event for the backend.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow consent_flow = 6;</code>
       */
      public Builder clearConsentFlow() {
        copyOnWrite();
        instance.clearConsentFlow();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          descriptionGrdIds_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent other = (org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent) arg1;
          playTermsOfServiceTextLength_ = visitor.visitInt(
              hasPlayTermsOfServiceTextLength(), playTermsOfServiceTextLength_,
              other.hasPlayTermsOfServiceTextLength(), other.playTermsOfServiceTextLength_);
          playTermsOfServiceHash_ = visitor.visitByteString(
              hasPlayTermsOfServiceHash(), playTermsOfServiceHash_,
              other.hasPlayTermsOfServiceHash(), other.playTermsOfServiceHash_);
          descriptionGrdIds_= visitor.visitIntList(descriptionGrdIds_, other.descriptionGrdIds_);
          confirmationGrdId_ = visitor.visitInt(
              hasConfirmationGrdId(), confirmationGrdId_,
              other.hasConfirmationGrdId(), other.confirmationGrdId_);
          status_ = visitor.visitInt(hasStatus(), status_,
              other.hasStatus(), other.status_);
          consentFlow_ = visitor.visitInt(hasConsentFlow(), consentFlow_,
              other.hasConsentFlow(), other.consentFlow_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  playTermsOfServiceTextLength_ = input.readInt32();
                  break;
                }
                case 18: {
                  bitField0_ |= 0x00000002;
                  playTermsOfServiceHash_ = input.readBytes();
                  break;
                }
                case 24: {
                  bitField0_ |= 0x00000004;
                  confirmationGrdId_ = input.readInt32();
                  break;
                }
                case 32: {
                  int rawValue = input.readEnum();
                  org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value = org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(4, rawValue);
                  } else {
                    bitField0_ |= 0x00000008;
                    status_ = rawValue;
                  }
                  break;
                }
                case 40: {
                  if (!descriptionGrdIds_.isModifiable()) {
                    descriptionGrdIds_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
                  }
                  descriptionGrdIds_.addInt(input.readInt32());
                  break;
                }
                case 42: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!descriptionGrdIds_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    descriptionGrdIds_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    descriptionGrdIds_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                }
                case 48: {
                  int rawValue = input.readEnum();
                  org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow value = org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.ConsentFlow.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(6, rawValue);
                  } else {
                    bitField0_ |= 0x00000010;
                    consentFlow_ = rawValue;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
    private static final org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ArcPlayTermsOfServiceConsent();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ArcPlayTermsOfServiceConsent> PARSER;

    public static com.google.protobuf.Parser<ArcPlayTermsOfServiceConsent> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SyncConsentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.UserConsentTypes.SyncConsent)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Ids of the strings of the sync consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    java.util.List<java.lang.Integer> getDescriptionGrdIdsList();
    /**
     * <pre>
     * Ids of the strings of the sync consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    int getDescriptionGrdIdsCount();
    /**
     * <pre>
     * Ids of the strings of the sync consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    int getDescriptionGrdIds(int index);

    /**
     * <pre>
     * Id of the string of the UI element the user clicked in order to confirm
     * and close the sync consent dialog.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    boolean hasConfirmationGrdId();
    /**
     * <pre>
     * Id of the string of the UI element the user clicked in order to confirm
     * and close the sync consent dialog.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    int getConfirmationGrdId();

    /**
     * <pre>
     * The status of the sync consent. This specifies whether the consent was
     * given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    boolean hasStatus();
    /**
     * <pre>
     * The status of the sync consent. This specifies whether the consent was
     * given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus();
  }
  /**
   * <pre>
   * The User Consent for Chrome Sync is determined by the user action on the
   * corresponding Sync Consent dialog.
   * </pre>
   *
   * Protobuf type {@code sync_pb.UserConsentTypes.SyncConsent}
   */
  public  static final class SyncConsent extends
      com.google.protobuf.GeneratedMessageLite<
          SyncConsent, SyncConsent.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.UserConsentTypes.SyncConsent)
      SyncConsentOrBuilder {
    private SyncConsent() {
      descriptionGrdIds_ = emptyIntList();
    }
    private int bitField0_;
    public static final int DESCRIPTION_GRD_IDS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.IntList descriptionGrdIds_;
    /**
     * <pre>
     * Ids of the strings of the sync consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getDescriptionGrdIdsList() {
      return descriptionGrdIds_;
    }
    /**
     * <pre>
     * Ids of the strings of the sync consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    public int getDescriptionGrdIdsCount() {
      return descriptionGrdIds_.size();
    }
    /**
     * <pre>
     * Ids of the strings of the sync consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    public int getDescriptionGrdIds(int index) {
      return descriptionGrdIds_.getInt(index);
    }
    private void ensureDescriptionGrdIdsIsMutable() {
      if (!descriptionGrdIds_.isModifiable()) {
        descriptionGrdIds_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
       }
    }
    /**
     * <pre>
     * Ids of the strings of the sync consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void setDescriptionGrdIds(
        int index, int value) {
      ensureDescriptionGrdIdsIsMutable();
      descriptionGrdIds_.setInt(index, value);
    }
    /**
     * <pre>
     * Ids of the strings of the sync consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void addDescriptionGrdIds(int value) {
      ensureDescriptionGrdIdsIsMutable();
      descriptionGrdIds_.addInt(value);
    }
    /**
     * <pre>
     * Ids of the strings of the sync consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void addAllDescriptionGrdIds(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureDescriptionGrdIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, descriptionGrdIds_);
    }
    /**
     * <pre>
     * Ids of the strings of the sync consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void clearDescriptionGrdIds() {
      descriptionGrdIds_ = emptyIntList();
    }

    public static final int CONFIRMATION_GRD_ID_FIELD_NUMBER = 2;
    private int confirmationGrdId_;
    /**
     * <pre>
     * Id of the string of the UI element the user clicked in order to confirm
     * and close the sync consent dialog.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    public boolean hasConfirmationGrdId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked in order to confirm
     * and close the sync consent dialog.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    public int getConfirmationGrdId() {
      return confirmationGrdId_;
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked in order to confirm
     * and close the sync consent dialog.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    private void setConfirmationGrdId(int value) {
      bitField0_ |= 0x00000001;
      confirmationGrdId_ = value;
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked in order to confirm
     * and close the sync consent dialog.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    private void clearConfirmationGrdId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      confirmationGrdId_ = 0;
    }

    public static final int STATUS_FIELD_NUMBER = 3;
    private int status_;
    /**
     * <pre>
     * The status of the sync consent. This specifies whether the consent was
     * given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The status of the sync consent. This specifies whether the consent was
     * given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    public org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus() {
      org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus result = org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.forNumber(status_);
      return result == null ? org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.CONSENT_STATUS_UNSPECIFIED : result;
    }
    /**
     * <pre>
     * The status of the sync consent. This specifies whether the consent was
     * given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    private void setStatus(org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      status_ = value.getNumber();
    }
    /**
     * <pre>
     * The status of the sync consent. This specifies whether the consent was
     * given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    private void clearStatus() {
      bitField0_ = (bitField0_ & ~0x00000002);
      status_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < descriptionGrdIds_.size(); i++) {
        output.writeInt32(1, descriptionGrdIds_.getInt(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, confirmationGrdId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(3, status_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < descriptionGrdIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(descriptionGrdIds_.getInt(i));
        }
        size += dataSize;
        size += 1 * getDescriptionGrdIdsList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, confirmationGrdId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, status_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * The User Consent for Chrome Sync is determined by the user action on the
     * corresponding Sync Consent dialog.
     * </pre>
     *
     * Protobuf type {@code sync_pb.UserConsentTypes.SyncConsent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.UserConsentTypes.SyncConsent)
        org.chromium.components.sync.protocol.UserConsentTypes.SyncConsentOrBuilder {
      // Construct using org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Ids of the strings of the sync consent text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getDescriptionGrdIdsList() {
        return java.util.Collections.unmodifiableList(
            instance.getDescriptionGrdIdsList());
      }
      /**
       * <pre>
       * Ids of the strings of the sync consent text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public int getDescriptionGrdIdsCount() {
        return instance.getDescriptionGrdIdsCount();
      }
      /**
       * <pre>
       * Ids of the strings of the sync consent text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public int getDescriptionGrdIds(int index) {
        return instance.getDescriptionGrdIds(index);
      }
      /**
       * <pre>
       * Ids of the strings of the sync consent text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder setDescriptionGrdIds(
          int index, int value) {
        copyOnWrite();
        instance.setDescriptionGrdIds(index, value);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings of the sync consent text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder addDescriptionGrdIds(int value) {
        copyOnWrite();
        instance.addDescriptionGrdIds(value);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings of the sync consent text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder addAllDescriptionGrdIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllDescriptionGrdIds(values);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings of the sync consent text presented to the user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder clearDescriptionGrdIds() {
        copyOnWrite();
        instance.clearDescriptionGrdIds();
        return this;
      }

      /**
       * <pre>
       * Id of the string of the UI element the user clicked in order to confirm
       * and close the sync consent dialog.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public boolean hasConfirmationGrdId() {
        return instance.hasConfirmationGrdId();
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked in order to confirm
       * and close the sync consent dialog.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public int getConfirmationGrdId() {
        return instance.getConfirmationGrdId();
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked in order to confirm
       * and close the sync consent dialog.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public Builder setConfirmationGrdId(int value) {
        copyOnWrite();
        instance.setConfirmationGrdId(value);
        return this;
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked in order to confirm
       * and close the sync consent dialog.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public Builder clearConfirmationGrdId() {
        copyOnWrite();
        instance.clearConfirmationGrdId();
        return this;
      }

      /**
       * <pre>
       * The status of the sync consent. This specifies whether the consent was
       * given or not given/revoked.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public boolean hasStatus() {
        return instance.hasStatus();
      }
      /**
       * <pre>
       * The status of the sync consent. This specifies whether the consent was
       * given or not given/revoked.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus() {
        return instance.getStatus();
      }
      /**
       * <pre>
       * The status of the sync consent. This specifies whether the consent was
       * given or not given/revoked.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public Builder setStatus(org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value) {
        copyOnWrite();
        instance.setStatus(value);
        return this;
      }
      /**
       * <pre>
       * The status of the sync consent. This specifies whether the consent was
       * given or not given/revoked.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public Builder clearStatus() {
        copyOnWrite();
        instance.clearStatus();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.UserConsentTypes.SyncConsent)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          descriptionGrdIds_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent other = (org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent) arg1;
          descriptionGrdIds_= visitor.visitIntList(descriptionGrdIds_, other.descriptionGrdIds_);
          confirmationGrdId_ = visitor.visitInt(
              hasConfirmationGrdId(), confirmationGrdId_,
              other.hasConfirmationGrdId(), other.confirmationGrdId_);
          status_ = visitor.visitInt(hasStatus(), status_,
              other.hasStatus(), other.status_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  if (!descriptionGrdIds_.isModifiable()) {
                    descriptionGrdIds_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
                  }
                  descriptionGrdIds_.addInt(input.readInt32());
                  break;
                }
                case 10: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!descriptionGrdIds_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    descriptionGrdIds_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    descriptionGrdIds_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000001;
                  confirmationGrdId_ = input.readInt32();
                  break;
                }
                case 24: {
                  int rawValue = input.readEnum();
                  org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value = org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(3, rawValue);
                  } else {
                    bitField0_ |= 0x00000002;
                    status_ = rawValue;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.SyncConsent)
    private static final org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SyncConsent();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SyncConsent> PARSER;

    public static com.google.protobuf.Parser<SyncConsent> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface UnifiedConsentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.UserConsentTypes.UnifiedConsent)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Ids of the strings of the unified Chrome consent text presented to the
     * user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    java.util.List<java.lang.Integer> getDescriptionGrdIdsList();
    /**
     * <pre>
     * Ids of the strings of the unified Chrome consent text presented to the
     * user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    int getDescriptionGrdIdsCount();
    /**
     * <pre>
     * Ids of the strings of the unified Chrome consent text presented to the
     * user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    int getDescriptionGrdIds(int index);

    /**
     * <pre>
     * Id of the string of the UI element the user clicked in order to confirm
     * and close the unified Chrome consent dialog.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    boolean hasConfirmationGrdId();
    /**
     * <pre>
     * Id of the string of the UI element the user clicked in order to confirm
     * and close the unified Chrome consent dialog.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    int getConfirmationGrdId();

    /**
     * <pre>
     * The status of the unified Chrome consent. This specifies whether the
     * consent was given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    boolean hasStatus();
    /**
     * <pre>
     * The status of the unified Chrome consent. This specifies whether the
     * consent was given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus();
  }
  /**
   * <pre>
   * The unified User Consent for Chrome is determined by the user action on the
   * corresponding Chrome Consent dialog.
   * </pre>
   *
   * Protobuf type {@code sync_pb.UserConsentTypes.UnifiedConsent}
   */
  public  static final class UnifiedConsent extends
      com.google.protobuf.GeneratedMessageLite<
          UnifiedConsent, UnifiedConsent.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.UserConsentTypes.UnifiedConsent)
      UnifiedConsentOrBuilder {
    private UnifiedConsent() {
      descriptionGrdIds_ = emptyIntList();
    }
    private int bitField0_;
    public static final int DESCRIPTION_GRD_IDS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.IntList descriptionGrdIds_;
    /**
     * <pre>
     * Ids of the strings of the unified Chrome consent text presented to the
     * user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getDescriptionGrdIdsList() {
      return descriptionGrdIds_;
    }
    /**
     * <pre>
     * Ids of the strings of the unified Chrome consent text presented to the
     * user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    public int getDescriptionGrdIdsCount() {
      return descriptionGrdIds_.size();
    }
    /**
     * <pre>
     * Ids of the strings of the unified Chrome consent text presented to the
     * user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    public int getDescriptionGrdIds(int index) {
      return descriptionGrdIds_.getInt(index);
    }
    private void ensureDescriptionGrdIdsIsMutable() {
      if (!descriptionGrdIds_.isModifiable()) {
        descriptionGrdIds_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
       }
    }
    /**
     * <pre>
     * Ids of the strings of the unified Chrome consent text presented to the
     * user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void setDescriptionGrdIds(
        int index, int value) {
      ensureDescriptionGrdIdsIsMutable();
      descriptionGrdIds_.setInt(index, value);
    }
    /**
     * <pre>
     * Ids of the strings of the unified Chrome consent text presented to the
     * user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void addDescriptionGrdIds(int value) {
      ensureDescriptionGrdIdsIsMutable();
      descriptionGrdIds_.addInt(value);
    }
    /**
     * <pre>
     * Ids of the strings of the unified Chrome consent text presented to the
     * user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void addAllDescriptionGrdIds(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureDescriptionGrdIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, descriptionGrdIds_);
    }
    /**
     * <pre>
     * Ids of the strings of the unified Chrome consent text presented to the
     * user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 1;</code>
     */
    private void clearDescriptionGrdIds() {
      descriptionGrdIds_ = emptyIntList();
    }

    public static final int CONFIRMATION_GRD_ID_FIELD_NUMBER = 2;
    private int confirmationGrdId_;
    /**
     * <pre>
     * Id of the string of the UI element the user clicked in order to confirm
     * and close the unified Chrome consent dialog.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    public boolean hasConfirmationGrdId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked in order to confirm
     * and close the unified Chrome consent dialog.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    public int getConfirmationGrdId() {
      return confirmationGrdId_;
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked in order to confirm
     * and close the unified Chrome consent dialog.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    private void setConfirmationGrdId(int value) {
      bitField0_ |= 0x00000001;
      confirmationGrdId_ = value;
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked in order to confirm
     * and close the unified Chrome consent dialog.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 2;</code>
     */
    private void clearConfirmationGrdId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      confirmationGrdId_ = 0;
    }

    public static final int STATUS_FIELD_NUMBER = 3;
    private int status_;
    /**
     * <pre>
     * The status of the unified Chrome consent. This specifies whether the
     * consent was given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The status of the unified Chrome consent. This specifies whether the
     * consent was given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    public org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus() {
      org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus result = org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.forNumber(status_);
      return result == null ? org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.CONSENT_STATUS_UNSPECIFIED : result;
    }
    /**
     * <pre>
     * The status of the unified Chrome consent. This specifies whether the
     * consent was given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    private void setStatus(org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      status_ = value.getNumber();
    }
    /**
     * <pre>
     * The status of the unified Chrome consent. This specifies whether the
     * consent was given or not given/revoked.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
     */
    private void clearStatus() {
      bitField0_ = (bitField0_ & ~0x00000002);
      status_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < descriptionGrdIds_.size(); i++) {
        output.writeInt32(1, descriptionGrdIds_.getInt(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, confirmationGrdId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(3, status_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < descriptionGrdIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(descriptionGrdIds_.getInt(i));
        }
        size += dataSize;
        size += 1 * getDescriptionGrdIdsList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, confirmationGrdId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, status_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * The unified User Consent for Chrome is determined by the user action on the
     * corresponding Chrome Consent dialog.
     * </pre>
     *
     * Protobuf type {@code sync_pb.UserConsentTypes.UnifiedConsent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.UserConsentTypes.UnifiedConsent)
        org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsentOrBuilder {
      // Construct using org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Ids of the strings of the unified Chrome consent text presented to the
       * user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getDescriptionGrdIdsList() {
        return java.util.Collections.unmodifiableList(
            instance.getDescriptionGrdIdsList());
      }
      /**
       * <pre>
       * Ids of the strings of the unified Chrome consent text presented to the
       * user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public int getDescriptionGrdIdsCount() {
        return instance.getDescriptionGrdIdsCount();
      }
      /**
       * <pre>
       * Ids of the strings of the unified Chrome consent text presented to the
       * user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public int getDescriptionGrdIds(int index) {
        return instance.getDescriptionGrdIds(index);
      }
      /**
       * <pre>
       * Ids of the strings of the unified Chrome consent text presented to the
       * user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder setDescriptionGrdIds(
          int index, int value) {
        copyOnWrite();
        instance.setDescriptionGrdIds(index, value);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings of the unified Chrome consent text presented to the
       * user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder addDescriptionGrdIds(int value) {
        copyOnWrite();
        instance.addDescriptionGrdIds(value);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings of the unified Chrome consent text presented to the
       * user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder addAllDescriptionGrdIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllDescriptionGrdIds(values);
        return this;
      }
      /**
       * <pre>
       * Ids of the strings of the unified Chrome consent text presented to the
       * user.
       * </pre>
       *
       * <code>repeated int32 description_grd_ids = 1;</code>
       */
      public Builder clearDescriptionGrdIds() {
        copyOnWrite();
        instance.clearDescriptionGrdIds();
        return this;
      }

      /**
       * <pre>
       * Id of the string of the UI element the user clicked in order to confirm
       * and close the unified Chrome consent dialog.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public boolean hasConfirmationGrdId() {
        return instance.hasConfirmationGrdId();
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked in order to confirm
       * and close the unified Chrome consent dialog.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public int getConfirmationGrdId() {
        return instance.getConfirmationGrdId();
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked in order to confirm
       * and close the unified Chrome consent dialog.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public Builder setConfirmationGrdId(int value) {
        copyOnWrite();
        instance.setConfirmationGrdId(value);
        return this;
      }
      /**
       * <pre>
       * Id of the string of the UI element the user clicked in order to confirm
       * and close the unified Chrome consent dialog.
       * </pre>
       *
       * <code>optional int32 confirmation_grd_id = 2;</code>
       */
      public Builder clearConfirmationGrdId() {
        copyOnWrite();
        instance.clearConfirmationGrdId();
        return this;
      }

      /**
       * <pre>
       * The status of the unified Chrome consent. This specifies whether the
       * consent was given or not given/revoked.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public boolean hasStatus() {
        return instance.hasStatus();
      }
      /**
       * <pre>
       * The status of the unified Chrome consent. This specifies whether the
       * consent was given or not given/revoked.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus() {
        return instance.getStatus();
      }
      /**
       * <pre>
       * The status of the unified Chrome consent. This specifies whether the
       * consent was given or not given/revoked.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public Builder setStatus(org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value) {
        copyOnWrite();
        instance.setStatus(value);
        return this;
      }
      /**
       * <pre>
       * The status of the unified Chrome consent. This specifies whether the
       * consent was given or not given/revoked.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;</code>
       */
      public Builder clearStatus() {
        copyOnWrite();
        instance.clearStatus();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.UserConsentTypes.UnifiedConsent)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          descriptionGrdIds_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent other = (org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent) arg1;
          descriptionGrdIds_= visitor.visitIntList(descriptionGrdIds_, other.descriptionGrdIds_);
          confirmationGrdId_ = visitor.visitInt(
              hasConfirmationGrdId(), confirmationGrdId_,
              other.hasConfirmationGrdId(), other.confirmationGrdId_);
          status_ = visitor.visitInt(hasStatus(), status_,
              other.hasStatus(), other.status_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  if (!descriptionGrdIds_.isModifiable()) {
                    descriptionGrdIds_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
                  }
                  descriptionGrdIds_.addInt(input.readInt32());
                  break;
                }
                case 10: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!descriptionGrdIds_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    descriptionGrdIds_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(descriptionGrdIds_);
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    descriptionGrdIds_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000001;
                  confirmationGrdId_ = input.readInt32();
                  break;
                }
                case 24: {
                  int rawValue = input.readEnum();
                  org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value = org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(3, rawValue);
                  } else {
                    bitField0_ |= 0x00000002;
                    status_ = rawValue;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.UnifiedConsent)
    private static final org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new UnifiedConsent();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<UnifiedConsent> PARSER;

    public static com.google.protobuf.Parser<UnifiedConsent> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface AssistantActivityControlConsentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.UserConsentTypes.AssistantActivityControlConsent)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * An opaque token to for ui auditing, which strengthens the audit trail.
     * </pre>
     *
     * <code>optional bytes ui_audit_key = 1;</code>
     */
    boolean hasUiAuditKey();
    /**
     * <pre>
     * An opaque token to for ui auditing, which strengthens the audit trail.
     * </pre>
     *
     * <code>optional bytes ui_audit_key = 1;</code>
     */
    com.google.protobuf.ByteString getUiAuditKey();

    /**
     * <pre>
     * The status of the Assistant activity control consent. This specifies
     * whether the consent was given or not given.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 2;</code>
     */
    boolean hasStatus();
    /**
     * <pre>
     * The status of the Assistant activity control consent. This specifies
     * whether the consent was given or not given.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 2;</code>
     */
    org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus();
  }
  /**
   * <pre>
   * The User Consent for Assistant activity control is determined by the user
   * action on the Assistant opt-in flow.
   * </pre>
   *
   * Protobuf type {@code sync_pb.UserConsentTypes.AssistantActivityControlConsent}
   */
  public  static final class AssistantActivityControlConsent extends
      com.google.protobuf.GeneratedMessageLite<
          AssistantActivityControlConsent, AssistantActivityControlConsent.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.UserConsentTypes.AssistantActivityControlConsent)
      AssistantActivityControlConsentOrBuilder {
    private AssistantActivityControlConsent() {
      uiAuditKey_ = com.google.protobuf.ByteString.EMPTY;
    }
    private int bitField0_;
    public static final int UI_AUDIT_KEY_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString uiAuditKey_;
    /**
     * <pre>
     * An opaque token to for ui auditing, which strengthens the audit trail.
     * </pre>
     *
     * <code>optional bytes ui_audit_key = 1;</code>
     */
    public boolean hasUiAuditKey() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * An opaque token to for ui auditing, which strengthens the audit trail.
     * </pre>
     *
     * <code>optional bytes ui_audit_key = 1;</code>
     */
    public com.google.protobuf.ByteString getUiAuditKey() {
      return uiAuditKey_;
    }
    /**
     * <pre>
     * An opaque token to for ui auditing, which strengthens the audit trail.
     * </pre>
     *
     * <code>optional bytes ui_audit_key = 1;</code>
     */
    private void setUiAuditKey(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      uiAuditKey_ = value;
    }
    /**
     * <pre>
     * An opaque token to for ui auditing, which strengthens the audit trail.
     * </pre>
     *
     * <code>optional bytes ui_audit_key = 1;</code>
     */
    private void clearUiAuditKey() {
      bitField0_ = (bitField0_ & ~0x00000001);
      uiAuditKey_ = getDefaultInstance().getUiAuditKey();
    }

    public static final int STATUS_FIELD_NUMBER = 2;
    private int status_;
    /**
     * <pre>
     * The status of the Assistant activity control consent. This specifies
     * whether the consent was given or not given.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 2;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The status of the Assistant activity control consent. This specifies
     * whether the consent was given or not given.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 2;</code>
     */
    public org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus() {
      org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus result = org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.forNumber(status_);
      return result == null ? org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.CONSENT_STATUS_UNSPECIFIED : result;
    }
    /**
     * <pre>
     * The status of the Assistant activity control consent. This specifies
     * whether the consent was given or not given.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 2;</code>
     */
    private void setStatus(org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      status_ = value.getNumber();
    }
    /**
     * <pre>
     * The status of the Assistant activity control consent. This specifies
     * whether the consent was given or not given.
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 2;</code>
     */
    private void clearStatus() {
      bitField0_ = (bitField0_ & ~0x00000002);
      status_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, uiAuditKey_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, status_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, uiAuditKey_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, status_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * The User Consent for Assistant activity control is determined by the user
     * action on the Assistant opt-in flow.
     * </pre>
     *
     * Protobuf type {@code sync_pb.UserConsentTypes.AssistantActivityControlConsent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.UserConsentTypes.AssistantActivityControlConsent)
        org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsentOrBuilder {
      // Construct using org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * An opaque token to for ui auditing, which strengthens the audit trail.
       * </pre>
       *
       * <code>optional bytes ui_audit_key = 1;</code>
       */
      public boolean hasUiAuditKey() {
        return instance.hasUiAuditKey();
      }
      /**
       * <pre>
       * An opaque token to for ui auditing, which strengthens the audit trail.
       * </pre>
       *
       * <code>optional bytes ui_audit_key = 1;</code>
       */
      public com.google.protobuf.ByteString getUiAuditKey() {
        return instance.getUiAuditKey();
      }
      /**
       * <pre>
       * An opaque token to for ui auditing, which strengthens the audit trail.
       * </pre>
       *
       * <code>optional bytes ui_audit_key = 1;</code>
       */
      public Builder setUiAuditKey(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setUiAuditKey(value);
        return this;
      }
      /**
       * <pre>
       * An opaque token to for ui auditing, which strengthens the audit trail.
       * </pre>
       *
       * <code>optional bytes ui_audit_key = 1;</code>
       */
      public Builder clearUiAuditKey() {
        copyOnWrite();
        instance.clearUiAuditKey();
        return this;
      }

      /**
       * <pre>
       * The status of the Assistant activity control consent. This specifies
       * whether the consent was given or not given.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 2;</code>
       */
      public boolean hasStatus() {
        return instance.hasStatus();
      }
      /**
       * <pre>
       * The status of the Assistant activity control consent. This specifies
       * whether the consent was given or not given.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 2;</code>
       */
      public org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus() {
        return instance.getStatus();
      }
      /**
       * <pre>
       * The status of the Assistant activity control consent. This specifies
       * whether the consent was given or not given.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 2;</code>
       */
      public Builder setStatus(org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value) {
        copyOnWrite();
        instance.setStatus(value);
        return this;
      }
      /**
       * <pre>
       * The status of the Assistant activity control consent. This specifies
       * whether the consent was given or not given.
       * </pre>
       *
       * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 2;</code>
       */
      public Builder clearStatus() {
        copyOnWrite();
        instance.clearStatus();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.UserConsentTypes.AssistantActivityControlConsent)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent other = (org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent) arg1;
          uiAuditKey_ = visitor.visitByteString(
              hasUiAuditKey(), uiAuditKey_,
              other.hasUiAuditKey(), other.uiAuditKey_);
          status_ = visitor.visitInt(hasStatus(), status_,
              other.hasStatus(), other.status_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  bitField0_ |= 0x00000001;
                  uiAuditKey_ = input.readBytes();
                  break;
                }
                case 16: {
                  int rawValue = input.readEnum();
                  org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value = org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(2, rawValue);
                  } else {
                    bitField0_ |= 0x00000002;
                    status_ = rawValue;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes.AssistantActivityControlConsent)
    private static final org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new AssistantActivityControlConsent();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<AssistantActivityControlConsent> PARSER;

    public static com.google.protobuf.Parser<AssistantActivityControlConsent> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.UserConsentTypes parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.UserConsentTypes parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UserConsentTypes parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.UserConsentTypes parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UserConsentTypes parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.UserConsentTypes parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UserConsentTypes parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.UserConsentTypes parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UserConsentTypes parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.UserConsentTypes parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.UserConsentTypes prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code sync_pb.UserConsentTypes}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.UserConsentTypes, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.UserConsentTypes)
      org.chromium.components.sync.protocol.UserConsentTypesOrBuilder {
    // Construct using org.chromium.components.sync.protocol.UserConsentTypes.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    // @@protoc_insertion_point(builder_scope:sync_pb.UserConsentTypes)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.UserConsentTypes();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.UserConsentTypes other = (org.chromium.components.sync.protocol.UserConsentTypes) arg1;
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.UserConsentTypes.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentTypes)
  private static final org.chromium.components.sync.protocol.UserConsentTypes DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new UserConsentTypes();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.UserConsentTypes getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<UserConsentTypes> PARSER;

  public static com.google.protobuf.Parser<UserConsentTypes> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

