// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unique_position.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * A UniquePosition is a string of bytes.
 * Unique positions are unique per-item, since they are guaranteed to end with a
 * fixed-length suffix that is unique per-item.  The position string may not end
 * with a '&#92;0' byte.
 * Prior to the suffix is a series of arbitrary bytes of arbitrary length.
 * Items under the same parent are positioned relative to each other by a
 * lexicographic comparison of their UniquePosition values.
 * </pre>
 *
 * Protobuf type {@code sync_pb.UniquePosition}
 */
public  final class UniquePosition extends
    com.google.protobuf.GeneratedMessageLite<
        UniquePosition, UniquePosition.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.UniquePosition)
    UniquePositionOrBuilder {
  private UniquePosition() {
    value_ = com.google.protobuf.ByteString.EMPTY;
    compressedValue_ = com.google.protobuf.ByteString.EMPTY;
    customCompressedV1_ = com.google.protobuf.ByteString.EMPTY;
  }
  private int bitField0_;
  public static final int VALUE_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString value_;
  /**
   * <pre>
   * The uncompressed string of bytes representing the position.
   * Deprecated.  See history note above.
   * </pre>
   *
   * <code>optional bytes value = 1;</code>
   */
  public boolean hasValue() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * The uncompressed string of bytes representing the position.
   * Deprecated.  See history note above.
   * </pre>
   *
   * <code>optional bytes value = 1;</code>
   */
  public com.google.protobuf.ByteString getValue() {
    return value_;
  }
  /**
   * <pre>
   * The uncompressed string of bytes representing the position.
   * Deprecated.  See history note above.
   * </pre>
   *
   * <code>optional bytes value = 1;</code>
   */
  private void setValue(com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    value_ = value;
  }
  /**
   * <pre>
   * The uncompressed string of bytes representing the position.
   * Deprecated.  See history note above.
   * </pre>
   *
   * <code>optional bytes value = 1;</code>
   */
  private void clearValue() {
    bitField0_ = (bitField0_ & ~0x00000001);
    value_ = getDefaultInstance().getValue();
  }

  public static final int COMPRESSED_VALUE_FIELD_NUMBER = 2;
  private com.google.protobuf.ByteString compressedValue_;
  /**
   * <pre>
   * The client may choose to write a compressed position to this field instead
   * of populating the 'value' above.  If it chooses to use compression, the
   * 'value' field above must be empty.  The position value will be compressed
   * with gzip and stored in the compressed_value field.  The position's
   * uncompressed length must be specified and written to the
   * uncompressed_length field.
   * Deprecated.  See history note above.
   * </pre>
   *
   * <code>optional bytes compressed_value = 2;</code>
   */
  public boolean hasCompressedValue() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * The client may choose to write a compressed position to this field instead
   * of populating the 'value' above.  If it chooses to use compression, the
   * 'value' field above must be empty.  The position value will be compressed
   * with gzip and stored in the compressed_value field.  The position's
   * uncompressed length must be specified and written to the
   * uncompressed_length field.
   * Deprecated.  See history note above.
   * </pre>
   *
   * <code>optional bytes compressed_value = 2;</code>
   */
  public com.google.protobuf.ByteString getCompressedValue() {
    return compressedValue_;
  }
  /**
   * <pre>
   * The client may choose to write a compressed position to this field instead
   * of populating the 'value' above.  If it chooses to use compression, the
   * 'value' field above must be empty.  The position value will be compressed
   * with gzip and stored in the compressed_value field.  The position's
   * uncompressed length must be specified and written to the
   * uncompressed_length field.
   * Deprecated.  See history note above.
   * </pre>
   *
   * <code>optional bytes compressed_value = 2;</code>
   */
  private void setCompressedValue(com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    compressedValue_ = value;
  }
  /**
   * <pre>
   * The client may choose to write a compressed position to this field instead
   * of populating the 'value' above.  If it chooses to use compression, the
   * 'value' field above must be empty.  The position value will be compressed
   * with gzip and stored in the compressed_value field.  The position's
   * uncompressed length must be specified and written to the
   * uncompressed_length field.
   * Deprecated.  See history note above.
   * </pre>
   *
   * <code>optional bytes compressed_value = 2;</code>
   */
  private void clearCompressedValue() {
    bitField0_ = (bitField0_ & ~0x00000002);
    compressedValue_ = getDefaultInstance().getCompressedValue();
  }

  public static final int UNCOMPRESSED_LENGTH_FIELD_NUMBER = 3;
  private long uncompressedLength_;
  /**
   * <code>optional uint64 uncompressed_length = 3;</code>
   */
  public boolean hasUncompressedLength() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>optional uint64 uncompressed_length = 3;</code>
   */
  public long getUncompressedLength() {
    return uncompressedLength_;
  }
  /**
   * <code>optional uint64 uncompressed_length = 3;</code>
   */
  private void setUncompressedLength(long value) {
    bitField0_ |= 0x00000004;
    uncompressedLength_ = value;
  }
  /**
   * <code>optional uint64 uncompressed_length = 3;</code>
   */
  private void clearUncompressedLength() {
    bitField0_ = (bitField0_ & ~0x00000004);
    uncompressedLength_ = 0L;
  }

  public static final int CUSTOM_COMPRESSED_V1_FIELD_NUMBER = 4;
  private com.google.protobuf.ByteString customCompressedV1_;
  /**
   * <pre>
   * This encoding uses compression scheme designed especially for unique
   * positions.  It has the property that X &lt; Y precisely when Compressed(X) &lt;
   * Compressed(Y), which is very useful when the most common operation is to
   * compare these positions against each other.  Their values may remain
   * compressed in memory.
   * The compression scheme is implemented and documented in
   * sync/core_impl/base/unique_position.cc.
   * As of M30, this is the preferred encoding.  Newer clients may continue to
   * populate the 'value' and 'compressed_value' fields to ensure backwards
   * compatibility, but they will always try to read from this field first.
   * </pre>
   *
   * <code>optional bytes custom_compressed_v1 = 4;</code>
   */
  public boolean hasCustomCompressedV1() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * This encoding uses compression scheme designed especially for unique
   * positions.  It has the property that X &lt; Y precisely when Compressed(X) &lt;
   * Compressed(Y), which is very useful when the most common operation is to
   * compare these positions against each other.  Their values may remain
   * compressed in memory.
   * The compression scheme is implemented and documented in
   * sync/core_impl/base/unique_position.cc.
   * As of M30, this is the preferred encoding.  Newer clients may continue to
   * populate the 'value' and 'compressed_value' fields to ensure backwards
   * compatibility, but they will always try to read from this field first.
   * </pre>
   *
   * <code>optional bytes custom_compressed_v1 = 4;</code>
   */
  public com.google.protobuf.ByteString getCustomCompressedV1() {
    return customCompressedV1_;
  }
  /**
   * <pre>
   * This encoding uses compression scheme designed especially for unique
   * positions.  It has the property that X &lt; Y precisely when Compressed(X) &lt;
   * Compressed(Y), which is very useful when the most common operation is to
   * compare these positions against each other.  Their values may remain
   * compressed in memory.
   * The compression scheme is implemented and documented in
   * sync/core_impl/base/unique_position.cc.
   * As of M30, this is the preferred encoding.  Newer clients may continue to
   * populate the 'value' and 'compressed_value' fields to ensure backwards
   * compatibility, but they will always try to read from this field first.
   * </pre>
   *
   * <code>optional bytes custom_compressed_v1 = 4;</code>
   */
  private void setCustomCompressedV1(com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    customCompressedV1_ = value;
  }
  /**
   * <pre>
   * This encoding uses compression scheme designed especially for unique
   * positions.  It has the property that X &lt; Y precisely when Compressed(X) &lt;
   * Compressed(Y), which is very useful when the most common operation is to
   * compare these positions against each other.  Their values may remain
   * compressed in memory.
   * The compression scheme is implemented and documented in
   * sync/core_impl/base/unique_position.cc.
   * As of M30, this is the preferred encoding.  Newer clients may continue to
   * populate the 'value' and 'compressed_value' fields to ensure backwards
   * compatibility, but they will always try to read from this field first.
   * </pre>
   *
   * <code>optional bytes custom_compressed_v1 = 4;</code>
   */
  private void clearCustomCompressedV1() {
    bitField0_ = (bitField0_ & ~0x00000008);
    customCompressedV1_ = getDefaultInstance().getCustomCompressedV1();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeBytes(1, value_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeBytes(2, compressedValue_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeUInt64(3, uncompressedLength_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeBytes(4, customCompressedV1_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(1, value_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(2, compressedValue_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(3, uncompressedLength_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(4, customCompressedV1_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.UniquePosition prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * A UniquePosition is a string of bytes.
   * Unique positions are unique per-item, since they are guaranteed to end with a
   * fixed-length suffix that is unique per-item.  The position string may not end
   * with a '&#92;0' byte.
   * Prior to the suffix is a series of arbitrary bytes of arbitrary length.
   * Items under the same parent are positioned relative to each other by a
   * lexicographic comparison of their UniquePosition values.
   * </pre>
   *
   * Protobuf type {@code sync_pb.UniquePosition}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.UniquePosition, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.UniquePosition)
      org.chromium.components.sync.protocol.UniquePositionOrBuilder {
    // Construct using org.chromium.components.sync.protocol.UniquePosition.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The uncompressed string of bytes representing the position.
     * Deprecated.  See history note above.
     * </pre>
     *
     * <code>optional bytes value = 1;</code>
     */
    public boolean hasValue() {
      return instance.hasValue();
    }
    /**
     * <pre>
     * The uncompressed string of bytes representing the position.
     * Deprecated.  See history note above.
     * </pre>
     *
     * <code>optional bytes value = 1;</code>
     */
    public com.google.protobuf.ByteString getValue() {
      return instance.getValue();
    }
    /**
     * <pre>
     * The uncompressed string of bytes representing the position.
     * Deprecated.  See history note above.
     * </pre>
     *
     * <code>optional bytes value = 1;</code>
     */
    public Builder setValue(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setValue(value);
      return this;
    }
    /**
     * <pre>
     * The uncompressed string of bytes representing the position.
     * Deprecated.  See history note above.
     * </pre>
     *
     * <code>optional bytes value = 1;</code>
     */
    public Builder clearValue() {
      copyOnWrite();
      instance.clearValue();
      return this;
    }

    /**
     * <pre>
     * The client may choose to write a compressed position to this field instead
     * of populating the 'value' above.  If it chooses to use compression, the
     * 'value' field above must be empty.  The position value will be compressed
     * with gzip and stored in the compressed_value field.  The position's
     * uncompressed length must be specified and written to the
     * uncompressed_length field.
     * Deprecated.  See history note above.
     * </pre>
     *
     * <code>optional bytes compressed_value = 2;</code>
     */
    public boolean hasCompressedValue() {
      return instance.hasCompressedValue();
    }
    /**
     * <pre>
     * The client may choose to write a compressed position to this field instead
     * of populating the 'value' above.  If it chooses to use compression, the
     * 'value' field above must be empty.  The position value will be compressed
     * with gzip and stored in the compressed_value field.  The position's
     * uncompressed length must be specified and written to the
     * uncompressed_length field.
     * Deprecated.  See history note above.
     * </pre>
     *
     * <code>optional bytes compressed_value = 2;</code>
     */
    public com.google.protobuf.ByteString getCompressedValue() {
      return instance.getCompressedValue();
    }
    /**
     * <pre>
     * The client may choose to write a compressed position to this field instead
     * of populating the 'value' above.  If it chooses to use compression, the
     * 'value' field above must be empty.  The position value will be compressed
     * with gzip and stored in the compressed_value field.  The position's
     * uncompressed length must be specified and written to the
     * uncompressed_length field.
     * Deprecated.  See history note above.
     * </pre>
     *
     * <code>optional bytes compressed_value = 2;</code>
     */
    public Builder setCompressedValue(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCompressedValue(value);
      return this;
    }
    /**
     * <pre>
     * The client may choose to write a compressed position to this field instead
     * of populating the 'value' above.  If it chooses to use compression, the
     * 'value' field above must be empty.  The position value will be compressed
     * with gzip and stored in the compressed_value field.  The position's
     * uncompressed length must be specified and written to the
     * uncompressed_length field.
     * Deprecated.  See history note above.
     * </pre>
     *
     * <code>optional bytes compressed_value = 2;</code>
     */
    public Builder clearCompressedValue() {
      copyOnWrite();
      instance.clearCompressedValue();
      return this;
    }

    /**
     * <code>optional uint64 uncompressed_length = 3;</code>
     */
    public boolean hasUncompressedLength() {
      return instance.hasUncompressedLength();
    }
    /**
     * <code>optional uint64 uncompressed_length = 3;</code>
     */
    public long getUncompressedLength() {
      return instance.getUncompressedLength();
    }
    /**
     * <code>optional uint64 uncompressed_length = 3;</code>
     */
    public Builder setUncompressedLength(long value) {
      copyOnWrite();
      instance.setUncompressedLength(value);
      return this;
    }
    /**
     * <code>optional uint64 uncompressed_length = 3;</code>
     */
    public Builder clearUncompressedLength() {
      copyOnWrite();
      instance.clearUncompressedLength();
      return this;
    }

    /**
     * <pre>
     * This encoding uses compression scheme designed especially for unique
     * positions.  It has the property that X &lt; Y precisely when Compressed(X) &lt;
     * Compressed(Y), which is very useful when the most common operation is to
     * compare these positions against each other.  Their values may remain
     * compressed in memory.
     * The compression scheme is implemented and documented in
     * sync/core_impl/base/unique_position.cc.
     * As of M30, this is the preferred encoding.  Newer clients may continue to
     * populate the 'value' and 'compressed_value' fields to ensure backwards
     * compatibility, but they will always try to read from this field first.
     * </pre>
     *
     * <code>optional bytes custom_compressed_v1 = 4;</code>
     */
    public boolean hasCustomCompressedV1() {
      return instance.hasCustomCompressedV1();
    }
    /**
     * <pre>
     * This encoding uses compression scheme designed especially for unique
     * positions.  It has the property that X &lt; Y precisely when Compressed(X) &lt;
     * Compressed(Y), which is very useful when the most common operation is to
     * compare these positions against each other.  Their values may remain
     * compressed in memory.
     * The compression scheme is implemented and documented in
     * sync/core_impl/base/unique_position.cc.
     * As of M30, this is the preferred encoding.  Newer clients may continue to
     * populate the 'value' and 'compressed_value' fields to ensure backwards
     * compatibility, but they will always try to read from this field first.
     * </pre>
     *
     * <code>optional bytes custom_compressed_v1 = 4;</code>
     */
    public com.google.protobuf.ByteString getCustomCompressedV1() {
      return instance.getCustomCompressedV1();
    }
    /**
     * <pre>
     * This encoding uses compression scheme designed especially for unique
     * positions.  It has the property that X &lt; Y precisely when Compressed(X) &lt;
     * Compressed(Y), which is very useful when the most common operation is to
     * compare these positions against each other.  Their values may remain
     * compressed in memory.
     * The compression scheme is implemented and documented in
     * sync/core_impl/base/unique_position.cc.
     * As of M30, this is the preferred encoding.  Newer clients may continue to
     * populate the 'value' and 'compressed_value' fields to ensure backwards
     * compatibility, but they will always try to read from this field first.
     * </pre>
     *
     * <code>optional bytes custom_compressed_v1 = 4;</code>
     */
    public Builder setCustomCompressedV1(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCustomCompressedV1(value);
      return this;
    }
    /**
     * <pre>
     * This encoding uses compression scheme designed especially for unique
     * positions.  It has the property that X &lt; Y precisely when Compressed(X) &lt;
     * Compressed(Y), which is very useful when the most common operation is to
     * compare these positions against each other.  Their values may remain
     * compressed in memory.
     * The compression scheme is implemented and documented in
     * sync/core_impl/base/unique_position.cc.
     * As of M30, this is the preferred encoding.  Newer clients may continue to
     * populate the 'value' and 'compressed_value' fields to ensure backwards
     * compatibility, but they will always try to read from this field first.
     * </pre>
     *
     * <code>optional bytes custom_compressed_v1 = 4;</code>
     */
    public Builder clearCustomCompressedV1() {
      copyOnWrite();
      instance.clearCustomCompressedV1();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.UniquePosition)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.UniquePosition();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.UniquePosition other = (org.chromium.components.sync.protocol.UniquePosition) arg1;
        value_ = visitor.visitByteString(
            hasValue(), value_,
            other.hasValue(), other.value_);
        compressedValue_ = visitor.visitByteString(
            hasCompressedValue(), compressedValue_,
            other.hasCompressedValue(), other.compressedValue_);
        uncompressedLength_ = visitor.visitLong(
            hasUncompressedLength(), uncompressedLength_,
            other.hasUncompressedLength(), other.uncompressedLength_);
        customCompressedV1_ = visitor.visitByteString(
            hasCustomCompressedV1(), customCompressedV1_,
            other.hasCustomCompressedV1(), other.customCompressedV1_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                value_ = input.readBytes();
                break;
              }
              case 18: {
                bitField0_ |= 0x00000002;
                compressedValue_ = input.readBytes();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                uncompressedLength_ = input.readUInt64();
                break;
              }
              case 34: {
                bitField0_ |= 0x00000008;
                customCompressedV1_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.UniquePosition.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.UniquePosition)
  private static final org.chromium.components.sync.protocol.UniquePosition DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new UniquePosition();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.UniquePosition getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<UniquePosition> PARSER;

  public static com.google.protobuf.Parser<UniquePosition> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

