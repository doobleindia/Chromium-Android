// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_debug_info.proto

package org.chromium.components.sync.protocol;

public interface DatatypeAssociationStatsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sync_pb.DatatypeAssociationStats)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * The datatype that was associated.
   * </pre>
   *
   * <code>optional int32 data_type_id = 1;</code>
   */
  boolean hasDataTypeId();
  /**
   * <pre>
   * The datatype that was associated.
   * </pre>
   *
   * <code>optional int32 data_type_id = 1;</code>
   */
  int getDataTypeId();

  /**
   * <pre>
   * The state of the world before association.
   * </pre>
   *
   * <code>optional int32 num_local_items_before_association = 2;</code>
   */
  boolean hasNumLocalItemsBeforeAssociation();
  /**
   * <pre>
   * The state of the world before association.
   * </pre>
   *
   * <code>optional int32 num_local_items_before_association = 2;</code>
   */
  int getNumLocalItemsBeforeAssociation();

  /**
   * <code>optional int32 num_sync_items_before_association = 3;</code>
   */
  boolean hasNumSyncItemsBeforeAssociation();
  /**
   * <code>optional int32 num_sync_items_before_association = 3;</code>
   */
  int getNumSyncItemsBeforeAssociation();

  /**
   * <pre>
   * The state of the world after association.
   * </pre>
   *
   * <code>optional int32 num_local_items_after_association = 4;</code>
   */
  boolean hasNumLocalItemsAfterAssociation();
  /**
   * <pre>
   * The state of the world after association.
   * </pre>
   *
   * <code>optional int32 num_local_items_after_association = 4;</code>
   */
  int getNumLocalItemsAfterAssociation();

  /**
   * <code>optional int32 num_sync_items_after_association = 5;</code>
   */
  boolean hasNumSyncItemsAfterAssociation();
  /**
   * <code>optional int32 num_sync_items_after_association = 5;</code>
   */
  int getNumSyncItemsAfterAssociation();

  /**
   * <pre>
   * The changes that got us from before to after. In a correctly working
   * system these should be the deltas between before and after.
   * </pre>
   *
   * <code>optional int32 num_local_items_added = 6;</code>
   */
  boolean hasNumLocalItemsAdded();
  /**
   * <pre>
   * The changes that got us from before to after. In a correctly working
   * system these should be the deltas between before and after.
   * </pre>
   *
   * <code>optional int32 num_local_items_added = 6;</code>
   */
  int getNumLocalItemsAdded();

  /**
   * <code>optional int32 num_local_items_deleted = 7;</code>
   */
  boolean hasNumLocalItemsDeleted();
  /**
   * <code>optional int32 num_local_items_deleted = 7;</code>
   */
  int getNumLocalItemsDeleted();

  /**
   * <code>optional int32 num_local_items_modified = 8;</code>
   */
  boolean hasNumLocalItemsModified();
  /**
   * <code>optional int32 num_local_items_modified = 8;</code>
   */
  int getNumLocalItemsModified();

  /**
   * <code>optional int32 num_sync_items_added = 9;</code>
   */
  boolean hasNumSyncItemsAdded();
  /**
   * <code>optional int32 num_sync_items_added = 9;</code>
   */
  int getNumSyncItemsAdded();

  /**
   * <code>optional int32 num_sync_items_deleted = 10;</code>
   */
  boolean hasNumSyncItemsDeleted();
  /**
   * <code>optional int32 num_sync_items_deleted = 10;</code>
   */
  int getNumSyncItemsDeleted();

  /**
   * <code>optional int32 num_sync_items_modified = 11;</code>
   */
  boolean hasNumSyncItemsModified();
  /**
   * <code>optional int32 num_sync_items_modified = 11;</code>
   */
  int getNumSyncItemsModified();

  /**
   * <pre>
   * Model versions before association. Ideally local and sync model should
   * have same version if models were persisted properly in last cycle.
   * Note: currently version is only set on bookmark model.
   * </pre>
   *
   * <code>optional int64 local_version_pre_association = 20;</code>
   */
  boolean hasLocalVersionPreAssociation();
  /**
   * <pre>
   * Model versions before association. Ideally local and sync model should
   * have same version if models were persisted properly in last cycle.
   * Note: currently version is only set on bookmark model.
   * </pre>
   *
   * <code>optional int64 local_version_pre_association = 20;</code>
   */
  long getLocalVersionPreAssociation();

  /**
   * <code>optional int64 sync_version_pre_association = 21;</code>
   */
  boolean hasSyncVersionPreAssociation();
  /**
   * <code>optional int64 sync_version_pre_association = 21;</code>
   */
  long getSyncVersionPreAssociation();

  /**
   * <pre>
   * The data type ran into an error during model association.
   * </pre>
   *
   * <code>optional bool had_error = 12;</code>
   */
  boolean hasHadError();
  /**
   * <pre>
   * The data type ran into an error during model association.
   * </pre>
   *
   * <code>optional bool had_error = 12;</code>
   */
  boolean getHadError();

  /**
   * <pre>
   * Waiting time before downloading starts. This measures the time between
   * receiving configuration request for a set of data types to starting
   * downloading data of this type.
   * </pre>
   *
   * <code>optional int64 download_wait_time_us = 15;</code>
   */
  boolean hasDownloadWaitTimeUs();
  /**
   * <pre>
   * Waiting time before downloading starts. This measures the time between
   * receiving configuration request for a set of data types to starting
   * downloading data of this type.
   * </pre>
   *
   * <code>optional int64 download_wait_time_us = 15;</code>
   */
  long getDownloadWaitTimeUs();

  /**
   * <pre>
   * Time spent on downloading sync data for first time sync.
   * Note: This measures the time between asking backend to download data to
   *       being notified of download-ready by backend. So it consists of
   *       time on data downloading and processing at sync backend. But
   *       downloading time should dominate. It's also the total time spent on
   *       downloading data of all types in the priority group of
   *       |data_type_id| instead of just one data type.
   * </pre>
   *
   * <code>optional int64 download_time_us = 13;</code>
   */
  boolean hasDownloadTimeUs();
  /**
   * <pre>
   * Time spent on downloading sync data for first time sync.
   * Note: This measures the time between asking backend to download data to
   *       being notified of download-ready by backend. So it consists of
   *       time on data downloading and processing at sync backend. But
   *       downloading time should dominate. It's also the total time spent on
   *       downloading data of all types in the priority group of
   *       |data_type_id| instead of just one data type.
   * </pre>
   *
   * <code>optional int64 download_time_us = 13;</code>
   */
  long getDownloadTimeUs();

  /**
   * <pre>
   * Waiting time for higher priority types to finish association. This
   * measures the time between finishing downloading data to requesting
   * association manager to associate this batch of types. High priority types
   * have near zero waiting time.
   * </pre>
   *
   * <code>optional int64 association_wait_time_for_high_priority_us = 16;</code>
   */
  boolean hasAssociationWaitTimeForHighPriorityUs();
  /**
   * <pre>
   * Waiting time for higher priority types to finish association. This
   * measures the time between finishing downloading data to requesting
   * association manager to associate this batch of types. High priority types
   * have near zero waiting time.
   * </pre>
   *
   * <code>optional int64 association_wait_time_for_high_priority_us = 16;</code>
   */
  long getAssociationWaitTimeForHighPriorityUs();

  /**
   * <pre>
   * Waiting time for other types with same priority during association.
   * Data type manger sends types of same priority to association manager to
   * configure as a batch. Association manager configures one type at a time.
   * This measures the time between when a type is sent to association manager
   * (among other types) to when association manager starts configuring the
   * type. Total wait time before association is
   *     |association_wait_time_for_high_priority_us| +
   *     |association_wait_time_for_same_priority_us|
   * </pre>
   *
   * <code>optional int64 association_wait_time_for_same_priority_us = 14;</code>
   */
  boolean hasAssociationWaitTimeForSamePriorityUs();
  /**
   * <pre>
   * Waiting time for other types with same priority during association.
   * Data type manger sends types of same priority to association manager to
   * configure as a batch. Association manager configures one type at a time.
   * This measures the time between when a type is sent to association manager
   * (among other types) to when association manager starts configuring the
   * type. Total wait time before association is
   *     |association_wait_time_for_high_priority_us| +
   *     |association_wait_time_for_same_priority_us|
   * </pre>
   *
   * <code>optional int64 association_wait_time_for_same_priority_us = 14;</code>
   */
  long getAssociationWaitTimeForSamePriorityUs();

  /**
   * <pre>
   * Time spent on model association.
   * </pre>
   *
   * <code>optional int64 association_time_us = 17;</code>
   */
  boolean hasAssociationTimeUs();
  /**
   * <pre>
   * Time spent on model association.
   * </pre>
   *
   * <code>optional int64 association_time_us = 17;</code>
   */
  long getAssociationTimeUs();

  /**
   * <pre>
   * Higher priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 high_priority_type_configured_before = 18;</code>
   */
  java.util.List<java.lang.Integer> getHighPriorityTypeConfiguredBeforeList();
  /**
   * <pre>
   * Higher priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 high_priority_type_configured_before = 18;</code>
   */
  int getHighPriorityTypeConfiguredBeforeCount();
  /**
   * <pre>
   * Higher priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 high_priority_type_configured_before = 18;</code>
   */
  int getHighPriorityTypeConfiguredBefore(int index);

  /**
   * <pre>
   * Same priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 same_priority_type_configured_before = 19;</code>
   */
  java.util.List<java.lang.Integer> getSamePriorityTypeConfiguredBeforeList();
  /**
   * <pre>
   * Same priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 same_priority_type_configured_before = 19;</code>
   */
  int getSamePriorityTypeConfiguredBeforeCount();
  /**
   * <pre>
   * Same priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 same_priority_type_configured_before = 19;</code>
   */
  int getSamePriorityTypeConfiguredBefore(int index);
}
