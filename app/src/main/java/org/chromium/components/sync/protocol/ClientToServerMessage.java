// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync.proto

package org.chromium.components.sync.protocol;

/**
 * Protobuf type {@code sync_pb.ClientToServerMessage}
 */
public  final class ClientToServerMessage extends
    com.google.protobuf.GeneratedMessageLite<
        ClientToServerMessage, ClientToServerMessage.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.ClientToServerMessage)
    ClientToServerMessageOrBuilder {
  private ClientToServerMessage() {
    share_ = "";
    protocolVersion_ = 52;
    messageContents_ = 1;
    storeBirthday_ = "";
    apiKey_ = "";
    invalidatorClientId_ = "";
  }
  /**
   * Protobuf enum {@code sync_pb.ClientToServerMessage.Contents}
   */
  public enum Contents
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>COMMIT = 1;</code>
     */
    COMMIT(1),
    /**
     * <code>GET_UPDATES = 2;</code>
     */
    GET_UPDATES(2),
    /**
     * <code>DEPRECATED_3 = 3;</code>
     */
    DEPRECATED_3(3),
    /**
     * <code>DEPRECATED_4 = 4;</code>
     */
    DEPRECATED_4(4),
    /**
     * <code>CLEAR_SERVER_DATA = 5;</code>
     */
    CLEAR_SERVER_DATA(5),
    ;

    /**
     * <code>COMMIT = 1;</code>
     */
    public static final int COMMIT_VALUE = 1;
    /**
     * <code>GET_UPDATES = 2;</code>
     */
    public static final int GET_UPDATES_VALUE = 2;
    /**
     * <code>DEPRECATED_3 = 3;</code>
     */
    public static final int DEPRECATED_3_VALUE = 3;
    /**
     * <code>DEPRECATED_4 = 4;</code>
     */
    public static final int DEPRECATED_4_VALUE = 4;
    /**
     * <code>CLEAR_SERVER_DATA = 5;</code>
     */
    public static final int CLEAR_SERVER_DATA_VALUE = 5;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Contents valueOf(int value) {
      return forNumber(value);
    }

    public static Contents forNumber(int value) {
      switch (value) {
        case 1: return COMMIT;
        case 2: return GET_UPDATES;
        case 3: return DEPRECATED_3;
        case 4: return DEPRECATED_4;
        case 5: return CLEAR_SERVER_DATA;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Contents>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Contents> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Contents>() {
            public Contents findValueByNumber(int number) {
              return Contents.forNumber(number);
            }
          };

    private final int value;

    private Contents(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sync_pb.ClientToServerMessage.Contents)
  }

  private int bitField0_;
  public static final int SHARE_FIELD_NUMBER = 1;
  private java.lang.String share_;
  /**
   * <pre>
   * |share| field is only used on the server for logging and can sometimes
   * contain empty string. It is still useful for logging username when it can't
   * be derived from access token in case of auth error.
   * </pre>
   *
   * <code>required string share = 1;</code>
   */
  public boolean hasShare() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * |share| field is only used on the server for logging and can sometimes
   * contain empty string. It is still useful for logging username when it can't
   * be derived from access token in case of auth error.
   * </pre>
   *
   * <code>required string share = 1;</code>
   */
  public java.lang.String getShare() {
    return share_;
  }
  /**
   * <pre>
   * |share| field is only used on the server for logging and can sometimes
   * contain empty string. It is still useful for logging username when it can't
   * be derived from access token in case of auth error.
   * </pre>
   *
   * <code>required string share = 1;</code>
   */
  public com.google.protobuf.ByteString
      getShareBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(share_);
  }
  /**
   * <pre>
   * |share| field is only used on the server for logging and can sometimes
   * contain empty string. It is still useful for logging username when it can't
   * be derived from access token in case of auth error.
   * </pre>
   *
   * <code>required string share = 1;</code>
   */
  private void setShare(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    share_ = value;
  }
  /**
   * <pre>
   * |share| field is only used on the server for logging and can sometimes
   * contain empty string. It is still useful for logging username when it can't
   * be derived from access token in case of auth error.
   * </pre>
   *
   * <code>required string share = 1;</code>
   */
  private void clearShare() {
    bitField0_ = (bitField0_ & ~0x00000001);
    share_ = getDefaultInstance().getShare();
  }
  /**
   * <pre>
   * |share| field is only used on the server for logging and can sometimes
   * contain empty string. It is still useful for logging username when it can't
   * be derived from access token in case of auth error.
   * </pre>
   *
   * <code>required string share = 1;</code>
   */
  private void setShareBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    share_ = value.toStringUtf8();
  }

  public static final int PROTOCOL_VERSION_FIELD_NUMBER = 2;
  private int protocolVersion_;
  /**
   * <code>optional int32 protocol_version = 2 [default = 52];</code>
   */
  public boolean hasProtocolVersion() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional int32 protocol_version = 2 [default = 52];</code>
   */
  public int getProtocolVersion() {
    return protocolVersion_;
  }
  /**
   * <code>optional int32 protocol_version = 2 [default = 52];</code>
   */
  private void setProtocolVersion(int value) {
    bitField0_ |= 0x00000002;
    protocolVersion_ = value;
  }
  /**
   * <code>optional int32 protocol_version = 2 [default = 52];</code>
   */
  private void clearProtocolVersion() {
    bitField0_ = (bitField0_ & ~0x00000002);
    protocolVersion_ = 52;
  }

  public static final int MESSAGE_CONTENTS_FIELD_NUMBER = 3;
  private int messageContents_;
  /**
   * <pre>
   * Each ClientToServerMessage contains one request defined by the
   * message_contents. Each type has a corresponding message field that will be
   * present iff the message is of that type. E.g. a commit message will have a
   * message_contents of COMMIT and its commit field will be present.
   * </pre>
   *
   * <code>required .sync_pb.ClientToServerMessage.Contents message_contents = 3;</code>
   */
  public boolean hasMessageContents() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * Each ClientToServerMessage contains one request defined by the
   * message_contents. Each type has a corresponding message field that will be
   * present iff the message is of that type. E.g. a commit message will have a
   * message_contents of COMMIT and its commit field will be present.
   * </pre>
   *
   * <code>required .sync_pb.ClientToServerMessage.Contents message_contents = 3;</code>
   */
  public org.chromium.components.sync.protocol.ClientToServerMessage.Contents getMessageContents() {
    org.chromium.components.sync.protocol.ClientToServerMessage.Contents result = org.chromium.components.sync.protocol.ClientToServerMessage.Contents.forNumber(messageContents_);
    return result == null ? org.chromium.components.sync.protocol.ClientToServerMessage.Contents.COMMIT : result;
  }
  /**
   * <pre>
   * Each ClientToServerMessage contains one request defined by the
   * message_contents. Each type has a corresponding message field that will be
   * present iff the message is of that type. E.g. a commit message will have a
   * message_contents of COMMIT and its commit field will be present.
   * </pre>
   *
   * <code>required .sync_pb.ClientToServerMessage.Contents message_contents = 3;</code>
   */
  private void setMessageContents(org.chromium.components.sync.protocol.ClientToServerMessage.Contents value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000004;
    messageContents_ = value.getNumber();
  }
  /**
   * <pre>
   * Each ClientToServerMessage contains one request defined by the
   * message_contents. Each type has a corresponding message field that will be
   * present iff the message is of that type. E.g. a commit message will have a
   * message_contents of COMMIT and its commit field will be present.
   * </pre>
   *
   * <code>required .sync_pb.ClientToServerMessage.Contents message_contents = 3;</code>
   */
  private void clearMessageContents() {
    bitField0_ = (bitField0_ & ~0x00000004);
    messageContents_ = 1;
  }

  public static final int COMMIT_FIELD_NUMBER = 4;
  private org.chromium.components.sync.protocol.CommitMessage commit_;
  /**
   * <code>optional .sync_pb.CommitMessage commit = 4;</code>
   */
  public boolean hasCommit() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional .sync_pb.CommitMessage commit = 4;</code>
   */
  public org.chromium.components.sync.protocol.CommitMessage getCommit() {
    return commit_ == null ? org.chromium.components.sync.protocol.CommitMessage.getDefaultInstance() : commit_;
  }
  /**
   * <code>optional .sync_pb.CommitMessage commit = 4;</code>
   */
  private void setCommit(org.chromium.components.sync.protocol.CommitMessage value) {
    if (value == null) {
      throw new NullPointerException();
    }
    commit_ = value;
    bitField0_ |= 0x00000008;
    }
  /**
   * <code>optional .sync_pb.CommitMessage commit = 4;</code>
   */
  private void setCommit(
      org.chromium.components.sync.protocol.CommitMessage.Builder builderForValue) {
    commit_ = builderForValue.build();
    bitField0_ |= 0x00000008;
  }
  /**
   * <code>optional .sync_pb.CommitMessage commit = 4;</code>
   */
  private void mergeCommit(org.chromium.components.sync.protocol.CommitMessage value) {
    if (commit_ != null &&
        commit_ != org.chromium.components.sync.protocol.CommitMessage.getDefaultInstance()) {
      commit_ =
        org.chromium.components.sync.protocol.CommitMessage.newBuilder(commit_).mergeFrom(value).buildPartial();
    } else {
      commit_ = value;
    }
    bitField0_ |= 0x00000008;
  }
  /**
   * <code>optional .sync_pb.CommitMessage commit = 4;</code>
   */
  private void clearCommit() {  commit_ = null;
    bitField0_ = (bitField0_ & ~0x00000008);
  }

  public static final int GET_UPDATES_FIELD_NUMBER = 5;
  private org.chromium.components.sync.protocol.GetUpdatesMessage getUpdates_;
  /**
   * <code>optional .sync_pb.GetUpdatesMessage get_updates = 5;</code>
   */
  public boolean hasGetUpdates() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>optional .sync_pb.GetUpdatesMessage get_updates = 5;</code>
   */
  public org.chromium.components.sync.protocol.GetUpdatesMessage getGetUpdates() {
    return getUpdates_ == null ? org.chromium.components.sync.protocol.GetUpdatesMessage.getDefaultInstance() : getUpdates_;
  }
  /**
   * <code>optional .sync_pb.GetUpdatesMessage get_updates = 5;</code>
   */
  private void setGetUpdates(org.chromium.components.sync.protocol.GetUpdatesMessage value) {
    if (value == null) {
      throw new NullPointerException();
    }
    getUpdates_ = value;
    bitField0_ |= 0x00000010;
    }
  /**
   * <code>optional .sync_pb.GetUpdatesMessage get_updates = 5;</code>
   */
  private void setGetUpdates(
      org.chromium.components.sync.protocol.GetUpdatesMessage.Builder builderForValue) {
    getUpdates_ = builderForValue.build();
    bitField0_ |= 0x00000010;
  }
  /**
   * <code>optional .sync_pb.GetUpdatesMessage get_updates = 5;</code>
   */
  private void mergeGetUpdates(org.chromium.components.sync.protocol.GetUpdatesMessage value) {
    if (getUpdates_ != null &&
        getUpdates_ != org.chromium.components.sync.protocol.GetUpdatesMessage.getDefaultInstance()) {
      getUpdates_ =
        org.chromium.components.sync.protocol.GetUpdatesMessage.newBuilder(getUpdates_).mergeFrom(value).buildPartial();
    } else {
      getUpdates_ = value;
    }
    bitField0_ |= 0x00000010;
  }
  /**
   * <code>optional .sync_pb.GetUpdatesMessage get_updates = 5;</code>
   */
  private void clearGetUpdates() {  getUpdates_ = null;
    bitField0_ = (bitField0_ & ~0x00000010);
  }

  public static final int STORE_BIRTHDAY_FIELD_NUMBER = 7;
  private java.lang.String storeBirthday_;
  /**
   * <pre>
   * Opaque store ID; if it changes, duck!
   * </pre>
   *
   * <code>optional string store_birthday = 7;</code>
   */
  public boolean hasStoreBirthday() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * Opaque store ID; if it changes, duck!
   * </pre>
   *
   * <code>optional string store_birthday = 7;</code>
   */
  public java.lang.String getStoreBirthday() {
    return storeBirthday_;
  }
  /**
   * <pre>
   * Opaque store ID; if it changes, duck!
   * </pre>
   *
   * <code>optional string store_birthday = 7;</code>
   */
  public com.google.protobuf.ByteString
      getStoreBirthdayBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(storeBirthday_);
  }
  /**
   * <pre>
   * Opaque store ID; if it changes, duck!
   * </pre>
   *
   * <code>optional string store_birthday = 7;</code>
   */
  private void setStoreBirthday(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
    storeBirthday_ = value;
  }
  /**
   * <pre>
   * Opaque store ID; if it changes, duck!
   * </pre>
   *
   * <code>optional string store_birthday = 7;</code>
   */
  private void clearStoreBirthday() {
    bitField0_ = (bitField0_ & ~0x00000020);
    storeBirthday_ = getDefaultInstance().getStoreBirthday();
  }
  /**
   * <pre>
   * Opaque store ID; if it changes, duck!
   * </pre>
   *
   * <code>optional string store_birthday = 7;</code>
   */
  private void setStoreBirthdayBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
    storeBirthday_ = value.toStringUtf8();
  }

  public static final int SYNC_PROBLEM_DETECTED_FIELD_NUMBER = 8;
  private boolean syncProblemDetected_;
  /**
   * <pre>
   * The client sets this if it detects a sync issue. The server will tell it
   * if it should perform a refresh.
   * </pre>
   *
   * <code>optional bool sync_problem_detected = 8 [default = false];</code>
   */
  public boolean hasSyncProblemDetected() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <pre>
   * The client sets this if it detects a sync issue. The server will tell it
   * if it should perform a refresh.
   * </pre>
   *
   * <code>optional bool sync_problem_detected = 8 [default = false];</code>
   */
  public boolean getSyncProblemDetected() {
    return syncProblemDetected_;
  }
  /**
   * <pre>
   * The client sets this if it detects a sync issue. The server will tell it
   * if it should perform a refresh.
   * </pre>
   *
   * <code>optional bool sync_problem_detected = 8 [default = false];</code>
   */
  private void setSyncProblemDetected(boolean value) {
    bitField0_ |= 0x00000040;
    syncProblemDetected_ = value;
  }
  /**
   * <pre>
   * The client sets this if it detects a sync issue. The server will tell it
   * if it should perform a refresh.
   * </pre>
   *
   * <code>optional bool sync_problem_detected = 8 [default = false];</code>
   */
  private void clearSyncProblemDetected() {
    bitField0_ = (bitField0_ & ~0x00000040);
    syncProblemDetected_ = false;
  }

  public static final int DEBUG_INFO_FIELD_NUMBER = 10;
  private org.chromium.components.sync.protocol.DebugInfo debugInfo_;
  /**
   * <pre>
   * Client side state information for debugging purpose.
   * This is only sent on the first getupdates of every sync cycle,
   * as an optimization to save bandwidth.
   * </pre>
   *
   * <code>optional .sync_pb.DebugInfo debug_info = 10;</code>
   */
  public boolean hasDebugInfo() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <pre>
   * Client side state information for debugging purpose.
   * This is only sent on the first getupdates of every sync cycle,
   * as an optimization to save bandwidth.
   * </pre>
   *
   * <code>optional .sync_pb.DebugInfo debug_info = 10;</code>
   */
  public org.chromium.components.sync.protocol.DebugInfo getDebugInfo() {
    return debugInfo_ == null ? org.chromium.components.sync.protocol.DebugInfo.getDefaultInstance() : debugInfo_;
  }
  /**
   * <pre>
   * Client side state information for debugging purpose.
   * This is only sent on the first getupdates of every sync cycle,
   * as an optimization to save bandwidth.
   * </pre>
   *
   * <code>optional .sync_pb.DebugInfo debug_info = 10;</code>
   */
  private void setDebugInfo(org.chromium.components.sync.protocol.DebugInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    debugInfo_ = value;
    bitField0_ |= 0x00000080;
    }
  /**
   * <pre>
   * Client side state information for debugging purpose.
   * This is only sent on the first getupdates of every sync cycle,
   * as an optimization to save bandwidth.
   * </pre>
   *
   * <code>optional .sync_pb.DebugInfo debug_info = 10;</code>
   */
  private void setDebugInfo(
      org.chromium.components.sync.protocol.DebugInfo.Builder builderForValue) {
    debugInfo_ = builderForValue.build();
    bitField0_ |= 0x00000080;
  }
  /**
   * <pre>
   * Client side state information for debugging purpose.
   * This is only sent on the first getupdates of every sync cycle,
   * as an optimization to save bandwidth.
   * </pre>
   *
   * <code>optional .sync_pb.DebugInfo debug_info = 10;</code>
   */
  private void mergeDebugInfo(org.chromium.components.sync.protocol.DebugInfo value) {
    if (debugInfo_ != null &&
        debugInfo_ != org.chromium.components.sync.protocol.DebugInfo.getDefaultInstance()) {
      debugInfo_ =
        org.chromium.components.sync.protocol.DebugInfo.newBuilder(debugInfo_).mergeFrom(value).buildPartial();
    } else {
      debugInfo_ = value;
    }
    bitField0_ |= 0x00000080;
  }
  /**
   * <pre>
   * Client side state information for debugging purpose.
   * This is only sent on the first getupdates of every sync cycle,
   * as an optimization to save bandwidth.
   * </pre>
   *
   * <code>optional .sync_pb.DebugInfo debug_info = 10;</code>
   */
  private void clearDebugInfo() {  debugInfo_ = null;
    bitField0_ = (bitField0_ & ~0x00000080);
  }

  public static final int BAG_OF_CHIPS_FIELD_NUMBER = 11;
  private org.chromium.components.sync.protocol.ChipBag bagOfChips_;
  /**
   * <pre>
   * Per-client state for use by the server. Sent with every message sent to the
   * server.
   * </pre>
   *
   * <code>optional .sync_pb.ChipBag bag_of_chips = 11;</code>
   */
  public boolean hasBagOfChips() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <pre>
   * Per-client state for use by the server. Sent with every message sent to the
   * server.
   * </pre>
   *
   * <code>optional .sync_pb.ChipBag bag_of_chips = 11;</code>
   */
  public org.chromium.components.sync.protocol.ChipBag getBagOfChips() {
    return bagOfChips_ == null ? org.chromium.components.sync.protocol.ChipBag.getDefaultInstance() : bagOfChips_;
  }
  /**
   * <pre>
   * Per-client state for use by the server. Sent with every message sent to the
   * server.
   * </pre>
   *
   * <code>optional .sync_pb.ChipBag bag_of_chips = 11;</code>
   */
  private void setBagOfChips(org.chromium.components.sync.protocol.ChipBag value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bagOfChips_ = value;
    bitField0_ |= 0x00000100;
    }
  /**
   * <pre>
   * Per-client state for use by the server. Sent with every message sent to the
   * server.
   * </pre>
   *
   * <code>optional .sync_pb.ChipBag bag_of_chips = 11;</code>
   */
  private void setBagOfChips(
      org.chromium.components.sync.protocol.ChipBag.Builder builderForValue) {
    bagOfChips_ = builderForValue.build();
    bitField0_ |= 0x00000100;
  }
  /**
   * <pre>
   * Per-client state for use by the server. Sent with every message sent to the
   * server.
   * </pre>
   *
   * <code>optional .sync_pb.ChipBag bag_of_chips = 11;</code>
   */
  private void mergeBagOfChips(org.chromium.components.sync.protocol.ChipBag value) {
    if (bagOfChips_ != null &&
        bagOfChips_ != org.chromium.components.sync.protocol.ChipBag.getDefaultInstance()) {
      bagOfChips_ =
        org.chromium.components.sync.protocol.ChipBag.newBuilder(bagOfChips_).mergeFrom(value).buildPartial();
    } else {
      bagOfChips_ = value;
    }
    bitField0_ |= 0x00000100;
  }
  /**
   * <pre>
   * Per-client state for use by the server. Sent with every message sent to the
   * server.
   * </pre>
   *
   * <code>optional .sync_pb.ChipBag bag_of_chips = 11;</code>
   */
  private void clearBagOfChips() {  bagOfChips_ = null;
    bitField0_ = (bitField0_ & ~0x00000100);
  }

  public static final int API_KEY_FIELD_NUMBER = 12;
  private java.lang.String apiKey_;
  /**
   * <pre>
   * Google API key.
   * </pre>
   *
   * <code>optional string api_key = 12;</code>
   */
  public boolean hasApiKey() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <pre>
   * Google API key.
   * </pre>
   *
   * <code>optional string api_key = 12;</code>
   */
  public java.lang.String getApiKey() {
    return apiKey_;
  }
  /**
   * <pre>
   * Google API key.
   * </pre>
   *
   * <code>optional string api_key = 12;</code>
   */
  public com.google.protobuf.ByteString
      getApiKeyBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(apiKey_);
  }
  /**
   * <pre>
   * Google API key.
   * </pre>
   *
   * <code>optional string api_key = 12;</code>
   */
  private void setApiKey(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
    apiKey_ = value;
  }
  /**
   * <pre>
   * Google API key.
   * </pre>
   *
   * <code>optional string api_key = 12;</code>
   */
  private void clearApiKey() {
    bitField0_ = (bitField0_ & ~0x00000200);
    apiKey_ = getDefaultInstance().getApiKey();
  }
  /**
   * <pre>
   * Google API key.
   * </pre>
   *
   * <code>optional string api_key = 12;</code>
   */
  private void setApiKeyBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
    apiKey_ = value.toStringUtf8();
  }

  public static final int CLIENT_STATUS_FIELD_NUMBER = 13;
  private org.chromium.components.sync.protocol.ClientStatus clientStatus_;
  /**
   * <pre>
   * Client's self-reported state.
   * The client should set this on every message sent to the server, though its
   * member fields may often be unset.
   * </pre>
   *
   * <code>optional .sync_pb.ClientStatus client_status = 13;</code>
   */
  public boolean hasClientStatus() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <pre>
   * Client's self-reported state.
   * The client should set this on every message sent to the server, though its
   * member fields may often be unset.
   * </pre>
   *
   * <code>optional .sync_pb.ClientStatus client_status = 13;</code>
   */
  public org.chromium.components.sync.protocol.ClientStatus getClientStatus() {
    return clientStatus_ == null ? org.chromium.components.sync.protocol.ClientStatus.getDefaultInstance() : clientStatus_;
  }
  /**
   * <pre>
   * Client's self-reported state.
   * The client should set this on every message sent to the server, though its
   * member fields may often be unset.
   * </pre>
   *
   * <code>optional .sync_pb.ClientStatus client_status = 13;</code>
   */
  private void setClientStatus(org.chromium.components.sync.protocol.ClientStatus value) {
    if (value == null) {
      throw new NullPointerException();
    }
    clientStatus_ = value;
    bitField0_ |= 0x00000400;
    }
  /**
   * <pre>
   * Client's self-reported state.
   * The client should set this on every message sent to the server, though its
   * member fields may often be unset.
   * </pre>
   *
   * <code>optional .sync_pb.ClientStatus client_status = 13;</code>
   */
  private void setClientStatus(
      org.chromium.components.sync.protocol.ClientStatus.Builder builderForValue) {
    clientStatus_ = builderForValue.build();
    bitField0_ |= 0x00000400;
  }
  /**
   * <pre>
   * Client's self-reported state.
   * The client should set this on every message sent to the server, though its
   * member fields may often be unset.
   * </pre>
   *
   * <code>optional .sync_pb.ClientStatus client_status = 13;</code>
   */
  private void mergeClientStatus(org.chromium.components.sync.protocol.ClientStatus value) {
    if (clientStatus_ != null &&
        clientStatus_ != org.chromium.components.sync.protocol.ClientStatus.getDefaultInstance()) {
      clientStatus_ =
        org.chromium.components.sync.protocol.ClientStatus.newBuilder(clientStatus_).mergeFrom(value).buildPartial();
    } else {
      clientStatus_ = value;
    }
    bitField0_ |= 0x00000400;
  }
  /**
   * <pre>
   * Client's self-reported state.
   * The client should set this on every message sent to the server, though its
   * member fields may often be unset.
   * </pre>
   *
   * <code>optional .sync_pb.ClientStatus client_status = 13;</code>
   */
  private void clearClientStatus() {  clientStatus_ = null;
    bitField0_ = (bitField0_ & ~0x00000400);
  }

  public static final int INVALIDATOR_CLIENT_ID_FIELD_NUMBER = 14;
  private java.lang.String invalidatorClientId_;
  /**
   * <pre>
   * The ID that our invalidation client used to identify itself to the server.
   * Sending the ID here allows the server to not send notifications of our own
   * changes to our invalidator.
   * </pre>
   *
   * <code>optional string invalidator_client_id = 14;</code>
   */
  public boolean hasInvalidatorClientId() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <pre>
   * The ID that our invalidation client used to identify itself to the server.
   * Sending the ID here allows the server to not send notifications of our own
   * changes to our invalidator.
   * </pre>
   *
   * <code>optional string invalidator_client_id = 14;</code>
   */
  public java.lang.String getInvalidatorClientId() {
    return invalidatorClientId_;
  }
  /**
   * <pre>
   * The ID that our invalidation client used to identify itself to the server.
   * Sending the ID here allows the server to not send notifications of our own
   * changes to our invalidator.
   * </pre>
   *
   * <code>optional string invalidator_client_id = 14;</code>
   */
  public com.google.protobuf.ByteString
      getInvalidatorClientIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(invalidatorClientId_);
  }
  /**
   * <pre>
   * The ID that our invalidation client used to identify itself to the server.
   * Sending the ID here allows the server to not send notifications of our own
   * changes to our invalidator.
   * </pre>
   *
   * <code>optional string invalidator_client_id = 14;</code>
   */
  private void setInvalidatorClientId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
    invalidatorClientId_ = value;
  }
  /**
   * <pre>
   * The ID that our invalidation client used to identify itself to the server.
   * Sending the ID here allows the server to not send notifications of our own
   * changes to our invalidator.
   * </pre>
   *
   * <code>optional string invalidator_client_id = 14;</code>
   */
  private void clearInvalidatorClientId() {
    bitField0_ = (bitField0_ & ~0x00000800);
    invalidatorClientId_ = getDefaultInstance().getInvalidatorClientId();
  }
  /**
   * <pre>
   * The ID that our invalidation client used to identify itself to the server.
   * Sending the ID here allows the server to not send notifications of our own
   * changes to our invalidator.
   * </pre>
   *
   * <code>optional string invalidator_client_id = 14;</code>
   */
  private void setInvalidatorClientIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
    invalidatorClientId_ = value.toStringUtf8();
  }

  public static final int CLEAR_SERVER_DATA_FIELD_NUMBER = 15;
  private org.chromium.components.sync.protocol.ClearServerDataMessage clearServerData_;
  /**
   * <pre>
   * Identifies this ClientToServerMessage as a clear server data request. This
   * field is present when message_contents is CLEAR_SERVER_DATA.
   * </pre>
   *
   * <code>optional .sync_pb.ClearServerDataMessage clear_server_data = 15;</code>
   */
  public boolean hasClearServerData() {
    return ((bitField0_ & 0x00001000) == 0x00001000);
  }
  /**
   * <pre>
   * Identifies this ClientToServerMessage as a clear server data request. This
   * field is present when message_contents is CLEAR_SERVER_DATA.
   * </pre>
   *
   * <code>optional .sync_pb.ClearServerDataMessage clear_server_data = 15;</code>
   */
  public org.chromium.components.sync.protocol.ClearServerDataMessage getClearServerData() {
    return clearServerData_ == null ? org.chromium.components.sync.protocol.ClearServerDataMessage.getDefaultInstance() : clearServerData_;
  }
  /**
   * <pre>
   * Identifies this ClientToServerMessage as a clear server data request. This
   * field is present when message_contents is CLEAR_SERVER_DATA.
   * </pre>
   *
   * <code>optional .sync_pb.ClearServerDataMessage clear_server_data = 15;</code>
   */
  private void setClearServerData(org.chromium.components.sync.protocol.ClearServerDataMessage value) {
    if (value == null) {
      throw new NullPointerException();
    }
    clearServerData_ = value;
    bitField0_ |= 0x00001000;
    }
  /**
   * <pre>
   * Identifies this ClientToServerMessage as a clear server data request. This
   * field is present when message_contents is CLEAR_SERVER_DATA.
   * </pre>
   *
   * <code>optional .sync_pb.ClearServerDataMessage clear_server_data = 15;</code>
   */
  private void setClearServerData(
      org.chromium.components.sync.protocol.ClearServerDataMessage.Builder builderForValue) {
    clearServerData_ = builderForValue.build();
    bitField0_ |= 0x00001000;
  }
  /**
   * <pre>
   * Identifies this ClientToServerMessage as a clear server data request. This
   * field is present when message_contents is CLEAR_SERVER_DATA.
   * </pre>
   *
   * <code>optional .sync_pb.ClearServerDataMessage clear_server_data = 15;</code>
   */
  private void mergeClearServerData(org.chromium.components.sync.protocol.ClearServerDataMessage value) {
    if (clearServerData_ != null &&
        clearServerData_ != org.chromium.components.sync.protocol.ClearServerDataMessage.getDefaultInstance()) {
      clearServerData_ =
        org.chromium.components.sync.protocol.ClearServerDataMessage.newBuilder(clearServerData_).mergeFrom(value).buildPartial();
    } else {
      clearServerData_ = value;
    }
    bitField0_ |= 0x00001000;
  }
  /**
   * <pre>
   * Identifies this ClientToServerMessage as a clear server data request. This
   * field is present when message_contents is CLEAR_SERVER_DATA.
   * </pre>
   *
   * <code>optional .sync_pb.ClearServerDataMessage clear_server_data = 15;</code>
   */
  private void clearClearServerData() {  clearServerData_ = null;
    bitField0_ = (bitField0_ & ~0x00001000);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeString(1, getShare());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt32(2, protocolVersion_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeEnum(3, messageContents_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeMessage(4, getCommit());
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeMessage(5, getGetUpdates());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeString(7, getStoreBirthday());
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeBool(8, syncProblemDetected_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeMessage(10, getDebugInfo());
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeMessage(11, getBagOfChips());
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeString(12, getApiKey());
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      output.writeMessage(13, getClientStatus());
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeString(14, getInvalidatorClientId());
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      output.writeMessage(15, getClearServerData());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getShare());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, protocolVersion_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, messageContents_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getCommit());
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getGetUpdates());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(7, getStoreBirthday());
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, syncProblemDetected_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getDebugInfo());
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getBagOfChips());
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(12, getApiKey());
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, getClientStatus());
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(14, getInvalidatorClientId());
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, getClearServerData());
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.ClientToServerMessage parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.ClientToServerMessage parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ClientToServerMessage parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.ClientToServerMessage parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ClientToServerMessage parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.ClientToServerMessage parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ClientToServerMessage parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.ClientToServerMessage parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ClientToServerMessage parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.ClientToServerMessage parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.ClientToServerMessage prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code sync_pb.ClientToServerMessage}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.ClientToServerMessage, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.ClientToServerMessage)
      org.chromium.components.sync.protocol.ClientToServerMessageOrBuilder {
    // Construct using org.chromium.components.sync.protocol.ClientToServerMessage.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * |share| field is only used on the server for logging and can sometimes
     * contain empty string. It is still useful for logging username when it can't
     * be derived from access token in case of auth error.
     * </pre>
     *
     * <code>required string share = 1;</code>
     */
    public boolean hasShare() {
      return instance.hasShare();
    }
    /**
     * <pre>
     * |share| field is only used on the server for logging and can sometimes
     * contain empty string. It is still useful for logging username when it can't
     * be derived from access token in case of auth error.
     * </pre>
     *
     * <code>required string share = 1;</code>
     */
    public java.lang.String getShare() {
      return instance.getShare();
    }
    /**
     * <pre>
     * |share| field is only used on the server for logging and can sometimes
     * contain empty string. It is still useful for logging username when it can't
     * be derived from access token in case of auth error.
     * </pre>
     *
     * <code>required string share = 1;</code>
     */
    public com.google.protobuf.ByteString
        getShareBytes() {
      return instance.getShareBytes();
    }
    /**
     * <pre>
     * |share| field is only used on the server for logging and can sometimes
     * contain empty string. It is still useful for logging username when it can't
     * be derived from access token in case of auth error.
     * </pre>
     *
     * <code>required string share = 1;</code>
     */
    public Builder setShare(
        java.lang.String value) {
      copyOnWrite();
      instance.setShare(value);
      return this;
    }
    /**
     * <pre>
     * |share| field is only used on the server for logging and can sometimes
     * contain empty string. It is still useful for logging username when it can't
     * be derived from access token in case of auth error.
     * </pre>
     *
     * <code>required string share = 1;</code>
     */
    public Builder clearShare() {
      copyOnWrite();
      instance.clearShare();
      return this;
    }
    /**
     * <pre>
     * |share| field is only used on the server for logging and can sometimes
     * contain empty string. It is still useful for logging username when it can't
     * be derived from access token in case of auth error.
     * </pre>
     *
     * <code>required string share = 1;</code>
     */
    public Builder setShareBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setShareBytes(value);
      return this;
    }

    /**
     * <code>optional int32 protocol_version = 2 [default = 52];</code>
     */
    public boolean hasProtocolVersion() {
      return instance.hasProtocolVersion();
    }
    /**
     * <code>optional int32 protocol_version = 2 [default = 52];</code>
     */
    public int getProtocolVersion() {
      return instance.getProtocolVersion();
    }
    /**
     * <code>optional int32 protocol_version = 2 [default = 52];</code>
     */
    public Builder setProtocolVersion(int value) {
      copyOnWrite();
      instance.setProtocolVersion(value);
      return this;
    }
    /**
     * <code>optional int32 protocol_version = 2 [default = 52];</code>
     */
    public Builder clearProtocolVersion() {
      copyOnWrite();
      instance.clearProtocolVersion();
      return this;
    }

    /**
     * <pre>
     * Each ClientToServerMessage contains one request defined by the
     * message_contents. Each type has a corresponding message field that will be
     * present iff the message is of that type. E.g. a commit message will have a
     * message_contents of COMMIT and its commit field will be present.
     * </pre>
     *
     * <code>required .sync_pb.ClientToServerMessage.Contents message_contents = 3;</code>
     */
    public boolean hasMessageContents() {
      return instance.hasMessageContents();
    }
    /**
     * <pre>
     * Each ClientToServerMessage contains one request defined by the
     * message_contents. Each type has a corresponding message field that will be
     * present iff the message is of that type. E.g. a commit message will have a
     * message_contents of COMMIT and its commit field will be present.
     * </pre>
     *
     * <code>required .sync_pb.ClientToServerMessage.Contents message_contents = 3;</code>
     */
    public org.chromium.components.sync.protocol.ClientToServerMessage.Contents getMessageContents() {
      return instance.getMessageContents();
    }
    /**
     * <pre>
     * Each ClientToServerMessage contains one request defined by the
     * message_contents. Each type has a corresponding message field that will be
     * present iff the message is of that type. E.g. a commit message will have a
     * message_contents of COMMIT and its commit field will be present.
     * </pre>
     *
     * <code>required .sync_pb.ClientToServerMessage.Contents message_contents = 3;</code>
     */
    public Builder setMessageContents(org.chromium.components.sync.protocol.ClientToServerMessage.Contents value) {
      copyOnWrite();
      instance.setMessageContents(value);
      return this;
    }
    /**
     * <pre>
     * Each ClientToServerMessage contains one request defined by the
     * message_contents. Each type has a corresponding message field that will be
     * present iff the message is of that type. E.g. a commit message will have a
     * message_contents of COMMIT and its commit field will be present.
     * </pre>
     *
     * <code>required .sync_pb.ClientToServerMessage.Contents message_contents = 3;</code>
     */
    public Builder clearMessageContents() {
      copyOnWrite();
      instance.clearMessageContents();
      return this;
    }

    /**
     * <code>optional .sync_pb.CommitMessage commit = 4;</code>
     */
    public boolean hasCommit() {
      return instance.hasCommit();
    }
    /**
     * <code>optional .sync_pb.CommitMessage commit = 4;</code>
     */
    public org.chromium.components.sync.protocol.CommitMessage getCommit() {
      return instance.getCommit();
    }
    /**
     * <code>optional .sync_pb.CommitMessage commit = 4;</code>
     */
    public Builder setCommit(org.chromium.components.sync.protocol.CommitMessage value) {
      copyOnWrite();
      instance.setCommit(value);
      return this;
      }
    /**
     * <code>optional .sync_pb.CommitMessage commit = 4;</code>
     */
    public Builder setCommit(
        org.chromium.components.sync.protocol.CommitMessage.Builder builderForValue) {
      copyOnWrite();
      instance.setCommit(builderForValue);
      return this;
    }
    /**
     * <code>optional .sync_pb.CommitMessage commit = 4;</code>
     */
    public Builder mergeCommit(org.chromium.components.sync.protocol.CommitMessage value) {
      copyOnWrite();
      instance.mergeCommit(value);
      return this;
    }
    /**
     * <code>optional .sync_pb.CommitMessage commit = 4;</code>
     */
    public Builder clearCommit() {  copyOnWrite();
      instance.clearCommit();
      return this;
    }

    /**
     * <code>optional .sync_pb.GetUpdatesMessage get_updates = 5;</code>
     */
    public boolean hasGetUpdates() {
      return instance.hasGetUpdates();
    }
    /**
     * <code>optional .sync_pb.GetUpdatesMessage get_updates = 5;</code>
     */
    public org.chromium.components.sync.protocol.GetUpdatesMessage getGetUpdates() {
      return instance.getGetUpdates();
    }
    /**
     * <code>optional .sync_pb.GetUpdatesMessage get_updates = 5;</code>
     */
    public Builder setGetUpdates(org.chromium.components.sync.protocol.GetUpdatesMessage value) {
      copyOnWrite();
      instance.setGetUpdates(value);
      return this;
      }
    /**
     * <code>optional .sync_pb.GetUpdatesMessage get_updates = 5;</code>
     */
    public Builder setGetUpdates(
        org.chromium.components.sync.protocol.GetUpdatesMessage.Builder builderForValue) {
      copyOnWrite();
      instance.setGetUpdates(builderForValue);
      return this;
    }
    /**
     * <code>optional .sync_pb.GetUpdatesMessage get_updates = 5;</code>
     */
    public Builder mergeGetUpdates(org.chromium.components.sync.protocol.GetUpdatesMessage value) {
      copyOnWrite();
      instance.mergeGetUpdates(value);
      return this;
    }
    /**
     * <code>optional .sync_pb.GetUpdatesMessage get_updates = 5;</code>
     */
    public Builder clearGetUpdates() {  copyOnWrite();
      instance.clearGetUpdates();
      return this;
    }

    /**
     * <pre>
     * Opaque store ID; if it changes, duck!
     * </pre>
     *
     * <code>optional string store_birthday = 7;</code>
     */
    public boolean hasStoreBirthday() {
      return instance.hasStoreBirthday();
    }
    /**
     * <pre>
     * Opaque store ID; if it changes, duck!
     * </pre>
     *
     * <code>optional string store_birthday = 7;</code>
     */
    public java.lang.String getStoreBirthday() {
      return instance.getStoreBirthday();
    }
    /**
     * <pre>
     * Opaque store ID; if it changes, duck!
     * </pre>
     *
     * <code>optional string store_birthday = 7;</code>
     */
    public com.google.protobuf.ByteString
        getStoreBirthdayBytes() {
      return instance.getStoreBirthdayBytes();
    }
    /**
     * <pre>
     * Opaque store ID; if it changes, duck!
     * </pre>
     *
     * <code>optional string store_birthday = 7;</code>
     */
    public Builder setStoreBirthday(
        java.lang.String value) {
      copyOnWrite();
      instance.setStoreBirthday(value);
      return this;
    }
    /**
     * <pre>
     * Opaque store ID; if it changes, duck!
     * </pre>
     *
     * <code>optional string store_birthday = 7;</code>
     */
    public Builder clearStoreBirthday() {
      copyOnWrite();
      instance.clearStoreBirthday();
      return this;
    }
    /**
     * <pre>
     * Opaque store ID; if it changes, duck!
     * </pre>
     *
     * <code>optional string store_birthday = 7;</code>
     */
    public Builder setStoreBirthdayBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setStoreBirthdayBytes(value);
      return this;
    }

    /**
     * <pre>
     * The client sets this if it detects a sync issue. The server will tell it
     * if it should perform a refresh.
     * </pre>
     *
     * <code>optional bool sync_problem_detected = 8 [default = false];</code>
     */
    public boolean hasSyncProblemDetected() {
      return instance.hasSyncProblemDetected();
    }
    /**
     * <pre>
     * The client sets this if it detects a sync issue. The server will tell it
     * if it should perform a refresh.
     * </pre>
     *
     * <code>optional bool sync_problem_detected = 8 [default = false];</code>
     */
    public boolean getSyncProblemDetected() {
      return instance.getSyncProblemDetected();
    }
    /**
     * <pre>
     * The client sets this if it detects a sync issue. The server will tell it
     * if it should perform a refresh.
     * </pre>
     *
     * <code>optional bool sync_problem_detected = 8 [default = false];</code>
     */
    public Builder setSyncProblemDetected(boolean value) {
      copyOnWrite();
      instance.setSyncProblemDetected(value);
      return this;
    }
    /**
     * <pre>
     * The client sets this if it detects a sync issue. The server will tell it
     * if it should perform a refresh.
     * </pre>
     *
     * <code>optional bool sync_problem_detected = 8 [default = false];</code>
     */
    public Builder clearSyncProblemDetected() {
      copyOnWrite();
      instance.clearSyncProblemDetected();
      return this;
    }

    /**
     * <pre>
     * Client side state information for debugging purpose.
     * This is only sent on the first getupdates of every sync cycle,
     * as an optimization to save bandwidth.
     * </pre>
     *
     * <code>optional .sync_pb.DebugInfo debug_info = 10;</code>
     */
    public boolean hasDebugInfo() {
      return instance.hasDebugInfo();
    }
    /**
     * <pre>
     * Client side state information for debugging purpose.
     * This is only sent on the first getupdates of every sync cycle,
     * as an optimization to save bandwidth.
     * </pre>
     *
     * <code>optional .sync_pb.DebugInfo debug_info = 10;</code>
     */
    public org.chromium.components.sync.protocol.DebugInfo getDebugInfo() {
      return instance.getDebugInfo();
    }
    /**
     * <pre>
     * Client side state information for debugging purpose.
     * This is only sent on the first getupdates of every sync cycle,
     * as an optimization to save bandwidth.
     * </pre>
     *
     * <code>optional .sync_pb.DebugInfo debug_info = 10;</code>
     */
    public Builder setDebugInfo(org.chromium.components.sync.protocol.DebugInfo value) {
      copyOnWrite();
      instance.setDebugInfo(value);
      return this;
      }
    /**
     * <pre>
     * Client side state information for debugging purpose.
     * This is only sent on the first getupdates of every sync cycle,
     * as an optimization to save bandwidth.
     * </pre>
     *
     * <code>optional .sync_pb.DebugInfo debug_info = 10;</code>
     */
    public Builder setDebugInfo(
        org.chromium.components.sync.protocol.DebugInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setDebugInfo(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Client side state information for debugging purpose.
     * This is only sent on the first getupdates of every sync cycle,
     * as an optimization to save bandwidth.
     * </pre>
     *
     * <code>optional .sync_pb.DebugInfo debug_info = 10;</code>
     */
    public Builder mergeDebugInfo(org.chromium.components.sync.protocol.DebugInfo value) {
      copyOnWrite();
      instance.mergeDebugInfo(value);
      return this;
    }
    /**
     * <pre>
     * Client side state information for debugging purpose.
     * This is only sent on the first getupdates of every sync cycle,
     * as an optimization to save bandwidth.
     * </pre>
     *
     * <code>optional .sync_pb.DebugInfo debug_info = 10;</code>
     */
    public Builder clearDebugInfo() {  copyOnWrite();
      instance.clearDebugInfo();
      return this;
    }

    /**
     * <pre>
     * Per-client state for use by the server. Sent with every message sent to the
     * server.
     * </pre>
     *
     * <code>optional .sync_pb.ChipBag bag_of_chips = 11;</code>
     */
    public boolean hasBagOfChips() {
      return instance.hasBagOfChips();
    }
    /**
     * <pre>
     * Per-client state for use by the server. Sent with every message sent to the
     * server.
     * </pre>
     *
     * <code>optional .sync_pb.ChipBag bag_of_chips = 11;</code>
     */
    public org.chromium.components.sync.protocol.ChipBag getBagOfChips() {
      return instance.getBagOfChips();
    }
    /**
     * <pre>
     * Per-client state for use by the server. Sent with every message sent to the
     * server.
     * </pre>
     *
     * <code>optional .sync_pb.ChipBag bag_of_chips = 11;</code>
     */
    public Builder setBagOfChips(org.chromium.components.sync.protocol.ChipBag value) {
      copyOnWrite();
      instance.setBagOfChips(value);
      return this;
      }
    /**
     * <pre>
     * Per-client state for use by the server. Sent with every message sent to the
     * server.
     * </pre>
     *
     * <code>optional .sync_pb.ChipBag bag_of_chips = 11;</code>
     */
    public Builder setBagOfChips(
        org.chromium.components.sync.protocol.ChipBag.Builder builderForValue) {
      copyOnWrite();
      instance.setBagOfChips(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Per-client state for use by the server. Sent with every message sent to the
     * server.
     * </pre>
     *
     * <code>optional .sync_pb.ChipBag bag_of_chips = 11;</code>
     */
    public Builder mergeBagOfChips(org.chromium.components.sync.protocol.ChipBag value) {
      copyOnWrite();
      instance.mergeBagOfChips(value);
      return this;
    }
    /**
     * <pre>
     * Per-client state for use by the server. Sent with every message sent to the
     * server.
     * </pre>
     *
     * <code>optional .sync_pb.ChipBag bag_of_chips = 11;</code>
     */
    public Builder clearBagOfChips() {  copyOnWrite();
      instance.clearBagOfChips();
      return this;
    }

    /**
     * <pre>
     * Google API key.
     * </pre>
     *
     * <code>optional string api_key = 12;</code>
     */
    public boolean hasApiKey() {
      return instance.hasApiKey();
    }
    /**
     * <pre>
     * Google API key.
     * </pre>
     *
     * <code>optional string api_key = 12;</code>
     */
    public java.lang.String getApiKey() {
      return instance.getApiKey();
    }
    /**
     * <pre>
     * Google API key.
     * </pre>
     *
     * <code>optional string api_key = 12;</code>
     */
    public com.google.protobuf.ByteString
        getApiKeyBytes() {
      return instance.getApiKeyBytes();
    }
    /**
     * <pre>
     * Google API key.
     * </pre>
     *
     * <code>optional string api_key = 12;</code>
     */
    public Builder setApiKey(
        java.lang.String value) {
      copyOnWrite();
      instance.setApiKey(value);
      return this;
    }
    /**
     * <pre>
     * Google API key.
     * </pre>
     *
     * <code>optional string api_key = 12;</code>
     */
    public Builder clearApiKey() {
      copyOnWrite();
      instance.clearApiKey();
      return this;
    }
    /**
     * <pre>
     * Google API key.
     * </pre>
     *
     * <code>optional string api_key = 12;</code>
     */
    public Builder setApiKeyBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setApiKeyBytes(value);
      return this;
    }

    /**
     * <pre>
     * Client's self-reported state.
     * The client should set this on every message sent to the server, though its
     * member fields may often be unset.
     * </pre>
     *
     * <code>optional .sync_pb.ClientStatus client_status = 13;</code>
     */
    public boolean hasClientStatus() {
      return instance.hasClientStatus();
    }
    /**
     * <pre>
     * Client's self-reported state.
     * The client should set this on every message sent to the server, though its
     * member fields may often be unset.
     * </pre>
     *
     * <code>optional .sync_pb.ClientStatus client_status = 13;</code>
     */
    public org.chromium.components.sync.protocol.ClientStatus getClientStatus() {
      return instance.getClientStatus();
    }
    /**
     * <pre>
     * Client's self-reported state.
     * The client should set this on every message sent to the server, though its
     * member fields may often be unset.
     * </pre>
     *
     * <code>optional .sync_pb.ClientStatus client_status = 13;</code>
     */
    public Builder setClientStatus(org.chromium.components.sync.protocol.ClientStatus value) {
      copyOnWrite();
      instance.setClientStatus(value);
      return this;
      }
    /**
     * <pre>
     * Client's self-reported state.
     * The client should set this on every message sent to the server, though its
     * member fields may often be unset.
     * </pre>
     *
     * <code>optional .sync_pb.ClientStatus client_status = 13;</code>
     */
    public Builder setClientStatus(
        org.chromium.components.sync.protocol.ClientStatus.Builder builderForValue) {
      copyOnWrite();
      instance.setClientStatus(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Client's self-reported state.
     * The client should set this on every message sent to the server, though its
     * member fields may often be unset.
     * </pre>
     *
     * <code>optional .sync_pb.ClientStatus client_status = 13;</code>
     */
    public Builder mergeClientStatus(org.chromium.components.sync.protocol.ClientStatus value) {
      copyOnWrite();
      instance.mergeClientStatus(value);
      return this;
    }
    /**
     * <pre>
     * Client's self-reported state.
     * The client should set this on every message sent to the server, though its
     * member fields may often be unset.
     * </pre>
     *
     * <code>optional .sync_pb.ClientStatus client_status = 13;</code>
     */
    public Builder clearClientStatus() {  copyOnWrite();
      instance.clearClientStatus();
      return this;
    }

    /**
     * <pre>
     * The ID that our invalidation client used to identify itself to the server.
     * Sending the ID here allows the server to not send notifications of our own
     * changes to our invalidator.
     * </pre>
     *
     * <code>optional string invalidator_client_id = 14;</code>
     */
    public boolean hasInvalidatorClientId() {
      return instance.hasInvalidatorClientId();
    }
    /**
     * <pre>
     * The ID that our invalidation client used to identify itself to the server.
     * Sending the ID here allows the server to not send notifications of our own
     * changes to our invalidator.
     * </pre>
     *
     * <code>optional string invalidator_client_id = 14;</code>
     */
    public java.lang.String getInvalidatorClientId() {
      return instance.getInvalidatorClientId();
    }
    /**
     * <pre>
     * The ID that our invalidation client used to identify itself to the server.
     * Sending the ID here allows the server to not send notifications of our own
     * changes to our invalidator.
     * </pre>
     *
     * <code>optional string invalidator_client_id = 14;</code>
     */
    public com.google.protobuf.ByteString
        getInvalidatorClientIdBytes() {
      return instance.getInvalidatorClientIdBytes();
    }
    /**
     * <pre>
     * The ID that our invalidation client used to identify itself to the server.
     * Sending the ID here allows the server to not send notifications of our own
     * changes to our invalidator.
     * </pre>
     *
     * <code>optional string invalidator_client_id = 14;</code>
     */
    public Builder setInvalidatorClientId(
        java.lang.String value) {
      copyOnWrite();
      instance.setInvalidatorClientId(value);
      return this;
    }
    /**
     * <pre>
     * The ID that our invalidation client used to identify itself to the server.
     * Sending the ID here allows the server to not send notifications of our own
     * changes to our invalidator.
     * </pre>
     *
     * <code>optional string invalidator_client_id = 14;</code>
     */
    public Builder clearInvalidatorClientId() {
      copyOnWrite();
      instance.clearInvalidatorClientId();
      return this;
    }
    /**
     * <pre>
     * The ID that our invalidation client used to identify itself to the server.
     * Sending the ID here allows the server to not send notifications of our own
     * changes to our invalidator.
     * </pre>
     *
     * <code>optional string invalidator_client_id = 14;</code>
     */
    public Builder setInvalidatorClientIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setInvalidatorClientIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * Identifies this ClientToServerMessage as a clear server data request. This
     * field is present when message_contents is CLEAR_SERVER_DATA.
     * </pre>
     *
     * <code>optional .sync_pb.ClearServerDataMessage clear_server_data = 15;</code>
     */
    public boolean hasClearServerData() {
      return instance.hasClearServerData();
    }
    /**
     * <pre>
     * Identifies this ClientToServerMessage as a clear server data request. This
     * field is present when message_contents is CLEAR_SERVER_DATA.
     * </pre>
     *
     * <code>optional .sync_pb.ClearServerDataMessage clear_server_data = 15;</code>
     */
    public org.chromium.components.sync.protocol.ClearServerDataMessage getClearServerData() {
      return instance.getClearServerData();
    }
    /**
     * <pre>
     * Identifies this ClientToServerMessage as a clear server data request. This
     * field is present when message_contents is CLEAR_SERVER_DATA.
     * </pre>
     *
     * <code>optional .sync_pb.ClearServerDataMessage clear_server_data = 15;</code>
     */
    public Builder setClearServerData(org.chromium.components.sync.protocol.ClearServerDataMessage value) {
      copyOnWrite();
      instance.setClearServerData(value);
      return this;
      }
    /**
     * <pre>
     * Identifies this ClientToServerMessage as a clear server data request. This
     * field is present when message_contents is CLEAR_SERVER_DATA.
     * </pre>
     *
     * <code>optional .sync_pb.ClearServerDataMessage clear_server_data = 15;</code>
     */
    public Builder setClearServerData(
        org.chromium.components.sync.protocol.ClearServerDataMessage.Builder builderForValue) {
      copyOnWrite();
      instance.setClearServerData(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Identifies this ClientToServerMessage as a clear server data request. This
     * field is present when message_contents is CLEAR_SERVER_DATA.
     * </pre>
     *
     * <code>optional .sync_pb.ClearServerDataMessage clear_server_data = 15;</code>
     */
    public Builder mergeClearServerData(org.chromium.components.sync.protocol.ClearServerDataMessage value) {
      copyOnWrite();
      instance.mergeClearServerData(value);
      return this;
    }
    /**
     * <pre>
     * Identifies this ClientToServerMessage as a clear server data request. This
     * field is present when message_contents is CLEAR_SERVER_DATA.
     * </pre>
     *
     * <code>optional .sync_pb.ClearServerDataMessage clear_server_data = 15;</code>
     */
    public Builder clearClearServerData() {  copyOnWrite();
      instance.clearClearServerData();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.ClientToServerMessage)
  }
  private byte memoizedIsInitialized = -1;
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.ClientToServerMessage();
      }
      case IS_INITIALIZED: {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return DEFAULT_INSTANCE;
        if (isInitialized == 0) return null;

        boolean shouldMemoize = ((Boolean) arg0).booleanValue();
        if (!hasShare()) {
          if (shouldMemoize) {
            memoizedIsInitialized = 0;
          }
          return null;
        }
        if (!hasMessageContents()) {
          if (shouldMemoize) {
            memoizedIsInitialized = 0;
          }
          return null;
        }
        if (hasGetUpdates()) {
          if (!getGetUpdates().isInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
        }
        if (hasDebugInfo()) {
          if (!getDebugInfo().isInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
        }
        if (shouldMemoize) memoizedIsInitialized = 1;
        return DEFAULT_INSTANCE;

      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.ClientToServerMessage other = (org.chromium.components.sync.protocol.ClientToServerMessage) arg1;
        share_ = visitor.visitString(
            hasShare(), share_,
            other.hasShare(), other.share_);
        protocolVersion_ = visitor.visitInt(
            hasProtocolVersion(), protocolVersion_,
            other.hasProtocolVersion(), other.protocolVersion_);
        messageContents_ = visitor.visitInt(hasMessageContents(), messageContents_,
            other.hasMessageContents(), other.messageContents_);
        commit_ = visitor.visitMessage(commit_, other.commit_);
        getUpdates_ = visitor.visitMessage(getUpdates_, other.getUpdates_);
        storeBirthday_ = visitor.visitString(
            hasStoreBirthday(), storeBirthday_,
            other.hasStoreBirthday(), other.storeBirthday_);
        syncProblemDetected_ = visitor.visitBoolean(
            hasSyncProblemDetected(), syncProblemDetected_,
            other.hasSyncProblemDetected(), other.syncProblemDetected_);
        debugInfo_ = visitor.visitMessage(debugInfo_, other.debugInfo_);
        bagOfChips_ = visitor.visitMessage(bagOfChips_, other.bagOfChips_);
        apiKey_ = visitor.visitString(
            hasApiKey(), apiKey_,
            other.hasApiKey(), other.apiKey_);
        clientStatus_ = visitor.visitMessage(clientStatus_, other.clientStatus_);
        invalidatorClientId_ = visitor.visitString(
            hasInvalidatorClientId(), invalidatorClientId_,
            other.hasInvalidatorClientId(), other.invalidatorClientId_);
        clearServerData_ = visitor.visitMessage(clearServerData_, other.clearServerData_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                bitField0_ |= 0x00000001;
                share_ = s;
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                protocolVersion_ = input.readInt32();
                break;
              }
              case 24: {
                int rawValue = input.readEnum();
                org.chromium.components.sync.protocol.ClientToServerMessage.Contents value = org.chromium.components.sync.protocol.ClientToServerMessage.Contents.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(3, rawValue);
                } else {
                  bitField0_ |= 0x00000004;
                  messageContents_ = rawValue;
                }
                break;
              }
              case 34: {
                org.chromium.components.sync.protocol.CommitMessage.Builder subBuilder = null;
                if (((bitField0_ & 0x00000008) == 0x00000008)) {
                  subBuilder = commit_.toBuilder();
                }
                commit_ = input.readMessage(org.chromium.components.sync.protocol.CommitMessage.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(commit_);
                  commit_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000008;
                break;
              }
              case 42: {
                org.chromium.components.sync.protocol.GetUpdatesMessage.Builder subBuilder = null;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                  subBuilder = getUpdates_.toBuilder();
                }
                getUpdates_ = input.readMessage(org.chromium.components.sync.protocol.GetUpdatesMessage.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(getUpdates_);
                  getUpdates_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000010;
                break;
              }
              case 58: {
                String s = input.readString();
                bitField0_ |= 0x00000020;
                storeBirthday_ = s;
                break;
              }
              case 64: {
                bitField0_ |= 0x00000040;
                syncProblemDetected_ = input.readBool();
                break;
              }
              case 82: {
                org.chromium.components.sync.protocol.DebugInfo.Builder subBuilder = null;
                if (((bitField0_ & 0x00000080) == 0x00000080)) {
                  subBuilder = debugInfo_.toBuilder();
                }
                debugInfo_ = input.readMessage(org.chromium.components.sync.protocol.DebugInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(debugInfo_);
                  debugInfo_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000080;
                break;
              }
              case 90: {
                org.chromium.components.sync.protocol.ChipBag.Builder subBuilder = null;
                if (((bitField0_ & 0x00000100) == 0x00000100)) {
                  subBuilder = bagOfChips_.toBuilder();
                }
                bagOfChips_ = input.readMessage(org.chromium.components.sync.protocol.ChipBag.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(bagOfChips_);
                  bagOfChips_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000100;
                break;
              }
              case 98: {
                String s = input.readString();
                bitField0_ |= 0x00000200;
                apiKey_ = s;
                break;
              }
              case 106: {
                org.chromium.components.sync.protocol.ClientStatus.Builder subBuilder = null;
                if (((bitField0_ & 0x00000400) == 0x00000400)) {
                  subBuilder = clientStatus_.toBuilder();
                }
                clientStatus_ = input.readMessage(org.chromium.components.sync.protocol.ClientStatus.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(clientStatus_);
                  clientStatus_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000400;
                break;
              }
              case 114: {
                String s = input.readString();
                bitField0_ |= 0x00000800;
                invalidatorClientId_ = s;
                break;
              }
              case 122: {
                org.chromium.components.sync.protocol.ClearServerDataMessage.Builder subBuilder = null;
                if (((bitField0_ & 0x00001000) == 0x00001000)) {
                  subBuilder = clearServerData_.toBuilder();
                }
                clearServerData_ = input.readMessage(org.chromium.components.sync.protocol.ClearServerDataMessage.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(clearServerData_);
                  clearServerData_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00001000;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.ClientToServerMessage.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.ClientToServerMessage)
  private static final org.chromium.components.sync.protocol.ClientToServerMessage DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ClientToServerMessage();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.ClientToServerMessage getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ClientToServerMessage> PARSER;

  public static com.google.protobuf.Parser<ClientToServerMessage> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

