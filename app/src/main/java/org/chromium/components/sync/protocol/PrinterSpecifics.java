// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: printer_specifics.proto

package org.chromium.components.sync.protocol;

/**
 * Protobuf type {@code sync_pb.PrinterSpecifics}
 */
public  final class PrinterSpecifics extends
    com.google.protobuf.GeneratedMessageLite<
        PrinterSpecifics, PrinterSpecifics.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.PrinterSpecifics)
    PrinterSpecificsOrBuilder {
  private PrinterSpecifics() {
    id_ = "";
    displayName_ = "";
    description_ = "";
    manufacturer_ = "";
    model_ = "";
    uri_ = "";
    uuid_ = "";
    ppd_ = com.google.protobuf.ByteString.EMPTY;
    makeAndModel_ = "";
    printServerUri_ = "";
  }
  private int bitField0_;
  public static final int ID_FIELD_NUMBER = 1;
  private java.lang.String id_;
  /**
   * <pre>
   * Printer record GUID
   * </pre>
   *
   * <code>optional string id = 1;</code>
   */
  public boolean hasId() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * Printer record GUID
   * </pre>
   *
   * <code>optional string id = 1;</code>
   */
  public java.lang.String getId() {
    return id_;
  }
  /**
   * <pre>
   * Printer record GUID
   * </pre>
   *
   * <code>optional string id = 1;</code>
   */
  public com.google.protobuf.ByteString
      getIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(id_);
  }
  /**
   * <pre>
   * Printer record GUID
   * </pre>
   *
   * <code>optional string id = 1;</code>
   */
  private void setId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    id_ = value;
  }
  /**
   * <pre>
   * Printer record GUID
   * </pre>
   *
   * <code>optional string id = 1;</code>
   */
  private void clearId() {
    bitField0_ = (bitField0_ & ~0x00000001);
    id_ = getDefaultInstance().getId();
  }
  /**
   * <pre>
   * Printer record GUID
   * </pre>
   *
   * <code>optional string id = 1;</code>
   */
  private void setIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    id_ = value.toStringUtf8();
  }

  public static final int DISPLAY_NAME_FIELD_NUMBER = 2;
  private java.lang.String displayName_;
  /**
   * <pre>
   * User visible name.  Any string.
   * </pre>
   *
   * <code>optional string display_name = 2;</code>
   */
  public boolean hasDisplayName() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * User visible name.  Any string.
   * </pre>
   *
   * <code>optional string display_name = 2;</code>
   */
  public java.lang.String getDisplayName() {
    return displayName_;
  }
  /**
   * <pre>
   * User visible name.  Any string.
   * </pre>
   *
   * <code>optional string display_name = 2;</code>
   */
  public com.google.protobuf.ByteString
      getDisplayNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(displayName_);
  }
  /**
   * <pre>
   * User visible name.  Any string.
   * </pre>
   *
   * <code>optional string display_name = 2;</code>
   */
  private void setDisplayName(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    displayName_ = value;
  }
  /**
   * <pre>
   * User visible name.  Any string.
   * </pre>
   *
   * <code>optional string display_name = 2;</code>
   */
  private void clearDisplayName() {
    bitField0_ = (bitField0_ & ~0x00000002);
    displayName_ = getDefaultInstance().getDisplayName();
  }
  /**
   * <pre>
   * User visible name.  Any string.
   * </pre>
   *
   * <code>optional string display_name = 2;</code>
   */
  private void setDisplayNameBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    displayName_ = value.toStringUtf8();
  }

  public static final int DESCRIPTION_FIELD_NUMBER = 3;
  private java.lang.String description_;
  /**
   * <pre>
   * User visible description.  Any string.
   * </pre>
   *
   * <code>optional string description = 3;</code>
   */
  public boolean hasDescription() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * User visible description.  Any string.
   * </pre>
   *
   * <code>optional string description = 3;</code>
   */
  public java.lang.String getDescription() {
    return description_;
  }
  /**
   * <pre>
   * User visible description.  Any string.
   * </pre>
   *
   * <code>optional string description = 3;</code>
   */
  public com.google.protobuf.ByteString
      getDescriptionBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(description_);
  }
  /**
   * <pre>
   * User visible description.  Any string.
   * </pre>
   *
   * <code>optional string description = 3;</code>
   */
  private void setDescription(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
    description_ = value;
  }
  /**
   * <pre>
   * User visible description.  Any string.
   * </pre>
   *
   * <code>optional string description = 3;</code>
   */
  private void clearDescription() {
    bitField0_ = (bitField0_ & ~0x00000004);
    description_ = getDefaultInstance().getDescription();
  }
  /**
   * <pre>
   * User visible description.  Any string.
   * </pre>
   *
   * <code>optional string description = 3;</code>
   */
  private void setDescriptionBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
    description_ = value.toStringUtf8();
  }

  public static final int MANUFACTURER_FIELD_NUMBER = 4;
  private java.lang.String manufacturer_;
  /**
   * <pre>
   * Printer manufacturer.  Should be a known manufacturuer.
   * Deprecated in favor of make_and_model.
   * </pre>
   *
   * <code>optional string manufacturer = 4 [deprecated = true];</code>
   */
  @java.lang.Deprecated public boolean hasManufacturer() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * Printer manufacturer.  Should be a known manufacturuer.
   * Deprecated in favor of make_and_model.
   * </pre>
   *
   * <code>optional string manufacturer = 4 [deprecated = true];</code>
   */
  @java.lang.Deprecated public java.lang.String getManufacturer() {
    return manufacturer_;
  }
  /**
   * <pre>
   * Printer manufacturer.  Should be a known manufacturuer.
   * Deprecated in favor of make_and_model.
   * </pre>
   *
   * <code>optional string manufacturer = 4 [deprecated = true];</code>
   */
  @java.lang.Deprecated public com.google.protobuf.ByteString
      getManufacturerBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(manufacturer_);
  }
  /**
   * <pre>
   * Printer manufacturer.  Should be a known manufacturuer.
   * Deprecated in favor of make_and_model.
   * </pre>
   *
   * <code>optional string manufacturer = 4 [deprecated = true];</code>
   */
  private void setManufacturer(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    manufacturer_ = value;
  }
  /**
   * <pre>
   * Printer manufacturer.  Should be a known manufacturuer.
   * Deprecated in favor of make_and_model.
   * </pre>
   *
   * <code>optional string manufacturer = 4 [deprecated = true];</code>
   */
  private void clearManufacturer() {
    bitField0_ = (bitField0_ & ~0x00000008);
    manufacturer_ = getDefaultInstance().getManufacturer();
  }
  /**
   * <pre>
   * Printer manufacturer.  Should be a known manufacturuer.
   * Deprecated in favor of make_and_model.
   * </pre>
   *
   * <code>optional string manufacturer = 4 [deprecated = true];</code>
   */
  private void setManufacturerBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    manufacturer_ = value.toStringUtf8();
  }

  public static final int MODEL_FIELD_NUMBER = 5;
  private java.lang.String model_;
  /**
   * <pre>
   * Printer model.  Should match a known model for the manufacturer.
   * Deprecated in favor of make_and_model.
   * </pre>
   *
   * <code>optional string model = 5 [deprecated = true];</code>
   */
  @java.lang.Deprecated public boolean hasModel() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <pre>
   * Printer model.  Should match a known model for the manufacturer.
   * Deprecated in favor of make_and_model.
   * </pre>
   *
   * <code>optional string model = 5 [deprecated = true];</code>
   */
  @java.lang.Deprecated public java.lang.String getModel() {
    return model_;
  }
  /**
   * <pre>
   * Printer model.  Should match a known model for the manufacturer.
   * Deprecated in favor of make_and_model.
   * </pre>
   *
   * <code>optional string model = 5 [deprecated = true];</code>
   */
  @java.lang.Deprecated public com.google.protobuf.ByteString
      getModelBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(model_);
  }
  /**
   * <pre>
   * Printer model.  Should match a known model for the manufacturer.
   * Deprecated in favor of make_and_model.
   * </pre>
   *
   * <code>optional string model = 5 [deprecated = true];</code>
   */
  private void setModel(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
    model_ = value;
  }
  /**
   * <pre>
   * Printer model.  Should match a known model for the manufacturer.
   * Deprecated in favor of make_and_model.
   * </pre>
   *
   * <code>optional string model = 5 [deprecated = true];</code>
   */
  private void clearModel() {
    bitField0_ = (bitField0_ & ~0x00000010);
    model_ = getDefaultInstance().getModel();
  }
  /**
   * <pre>
   * Printer model.  Should match a known model for the manufacturer.
   * Deprecated in favor of make_and_model.
   * </pre>
   *
   * <code>optional string model = 5 [deprecated = true];</code>
   */
  private void setModelBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
    model_ = value.toStringUtf8();
  }

  public static final int URI_FIELD_NUMBER = 6;
  private java.lang.String uri_;
  /**
   * <pre>
   * Universal Resource Identifier for the printer on the network.  usb:// will
   * be the scheme for USB printers.  Example
   * ipp://address.example:port/queue/queue/queue.
   * </pre>
   *
   * <code>optional string uri = 6;</code>
   */
  public boolean hasUri() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * Universal Resource Identifier for the printer on the network.  usb:// will
   * be the scheme for USB printers.  Example
   * ipp://address.example:port/queue/queue/queue.
   * </pre>
   *
   * <code>optional string uri = 6;</code>
   */
  public java.lang.String getUri() {
    return uri_;
  }
  /**
   * <pre>
   * Universal Resource Identifier for the printer on the network.  usb:// will
   * be the scheme for USB printers.  Example
   * ipp://address.example:port/queue/queue/queue.
   * </pre>
   *
   * <code>optional string uri = 6;</code>
   */
  public com.google.protobuf.ByteString
      getUriBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(uri_);
  }
  /**
   * <pre>
   * Universal Resource Identifier for the printer on the network.  usb:// will
   * be the scheme for USB printers.  Example
   * ipp://address.example:port/queue/queue/queue.
   * </pre>
   *
   * <code>optional string uri = 6;</code>
   */
  private void setUri(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
    uri_ = value;
  }
  /**
   * <pre>
   * Universal Resource Identifier for the printer on the network.  usb:// will
   * be the scheme for USB printers.  Example
   * ipp://address.example:port/queue/queue/queue.
   * </pre>
   *
   * <code>optional string uri = 6;</code>
   */
  private void clearUri() {
    bitField0_ = (bitField0_ & ~0x00000020);
    uri_ = getDefaultInstance().getUri();
  }
  /**
   * <pre>
   * Universal Resource Identifier for the printer on the network.  usb:// will
   * be the scheme for USB printers.  Example
   * ipp://address.example:port/queue/queue/queue.
   * </pre>
   *
   * <code>optional string uri = 6;</code>
   */
  private void setUriBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
    uri_ = value.toStringUtf8();
  }

  public static final int UUID_FIELD_NUMBER = 7;
  private java.lang.String uuid_;
  /**
   * <pre>
   * Universally Unique Identifier provided by the printer.  Used for unique
   * identification of printers in a zeroconf environment.
   * </pre>
   *
   * <code>optional string uuid = 7;</code>
   */
  public boolean hasUuid() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <pre>
   * Universally Unique Identifier provided by the printer.  Used for unique
   * identification of printers in a zeroconf environment.
   * </pre>
   *
   * <code>optional string uuid = 7;</code>
   */
  public java.lang.String getUuid() {
    return uuid_;
  }
  /**
   * <pre>
   * Universally Unique Identifier provided by the printer.  Used for unique
   * identification of printers in a zeroconf environment.
   * </pre>
   *
   * <code>optional string uuid = 7;</code>
   */
  public com.google.protobuf.ByteString
      getUuidBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(uuid_);
  }
  /**
   * <pre>
   * Universally Unique Identifier provided by the printer.  Used for unique
   * identification of printers in a zeroconf environment.
   * </pre>
   *
   * <code>optional string uuid = 7;</code>
   */
  private void setUuid(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
    uuid_ = value;
  }
  /**
   * <pre>
   * Universally Unique Identifier provided by the printer.  Used for unique
   * identification of printers in a zeroconf environment.
   * </pre>
   *
   * <code>optional string uuid = 7;</code>
   */
  private void clearUuid() {
    bitField0_ = (bitField0_ & ~0x00000040);
    uuid_ = getDefaultInstance().getUuid();
  }
  /**
   * <pre>
   * Universally Unique Identifier provided by the printer.  Used for unique
   * identification of printers in a zeroconf environment.
   * </pre>
   *
   * <code>optional string uuid = 7;</code>
   */
  private void setUuidBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
    uuid_ = value.toStringUtf8();
  }

  public static final int PPD_FIELD_NUMBER = 8;
  private com.google.protobuf.ByteString ppd_;
  /**
   * <pre>
   * PPDData was deprecated in favor of PPDReference format.
   * </pre>
   *
   * <code>optional bytes ppd = 8 [deprecated = true];</code>
   */
  @java.lang.Deprecated public boolean hasPpd() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <pre>
   * PPDData was deprecated in favor of PPDReference format.
   * </pre>
   *
   * <code>optional bytes ppd = 8 [deprecated = true];</code>
   */
  @java.lang.Deprecated public com.google.protobuf.ByteString getPpd() {
    return ppd_;
  }
  /**
   * <pre>
   * PPDData was deprecated in favor of PPDReference format.
   * </pre>
   *
   * <code>optional bytes ppd = 8 [deprecated = true];</code>
   */
  private void setPpd(com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
    ppd_ = value;
  }
  /**
   * <pre>
   * PPDData was deprecated in favor of PPDReference format.
   * </pre>
   *
   * <code>optional bytes ppd = 8 [deprecated = true];</code>
   */
  private void clearPpd() {
    bitField0_ = (bitField0_ & ~0x00000080);
    ppd_ = getDefaultInstance().getPpd();
  }

  public static final int PPD_REFERENCE_FIELD_NUMBER = 9;
  private org.chromium.components.sync.protocol.PrinterPPDReference ppdReference_;
  /**
   * <pre>
   * Structure representing the user's ppd configuration.
   * </pre>
   *
   * <code>optional .sync_pb.PrinterPPDReference ppd_reference = 9;</code>
   */
  public boolean hasPpdReference() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <pre>
   * Structure representing the user's ppd configuration.
   * </pre>
   *
   * <code>optional .sync_pb.PrinterPPDReference ppd_reference = 9;</code>
   */
  public org.chromium.components.sync.protocol.PrinterPPDReference getPpdReference() {
    return ppdReference_ == null ? org.chromium.components.sync.protocol.PrinterPPDReference.getDefaultInstance() : ppdReference_;
  }
  /**
   * <pre>
   * Structure representing the user's ppd configuration.
   * </pre>
   *
   * <code>optional .sync_pb.PrinterPPDReference ppd_reference = 9;</code>
   */
  private void setPpdReference(org.chromium.components.sync.protocol.PrinterPPDReference value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ppdReference_ = value;
    bitField0_ |= 0x00000100;
    }
  /**
   * <pre>
   * Structure representing the user's ppd configuration.
   * </pre>
   *
   * <code>optional .sync_pb.PrinterPPDReference ppd_reference = 9;</code>
   */
  private void setPpdReference(
      org.chromium.components.sync.protocol.PrinterPPDReference.Builder builderForValue) {
    ppdReference_ = builderForValue.build();
    bitField0_ |= 0x00000100;
  }
  /**
   * <pre>
   * Structure representing the user's ppd configuration.
   * </pre>
   *
   * <code>optional .sync_pb.PrinterPPDReference ppd_reference = 9;</code>
   */
  private void mergePpdReference(org.chromium.components.sync.protocol.PrinterPPDReference value) {
    if (ppdReference_ != null &&
        ppdReference_ != org.chromium.components.sync.protocol.PrinterPPDReference.getDefaultInstance()) {
      ppdReference_ =
        org.chromium.components.sync.protocol.PrinterPPDReference.newBuilder(ppdReference_).mergeFrom(value).buildPartial();
    } else {
      ppdReference_ = value;
    }
    bitField0_ |= 0x00000100;
  }
  /**
   * <pre>
   * Structure representing the user's ppd configuration.
   * </pre>
   *
   * <code>optional .sync_pb.PrinterPPDReference ppd_reference = 9;</code>
   */
  private void clearPpdReference() {  ppdReference_ = null;
    bitField0_ = (bitField0_ & ~0x00000100);
  }

  public static final int UPDATED_TIMESTAMP_FIELD_NUMBER = 10;
  private long updatedTimestamp_;
  /**
   * <pre>
   * Timestamp when printer was last updated.
   * </pre>
   *
   * <code>optional int64 updated_timestamp = 10;</code>
   */
  public boolean hasUpdatedTimestamp() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <pre>
   * Timestamp when printer was last updated.
   * </pre>
   *
   * <code>optional int64 updated_timestamp = 10;</code>
   */
  public long getUpdatedTimestamp() {
    return updatedTimestamp_;
  }
  /**
   * <pre>
   * Timestamp when printer was last updated.
   * </pre>
   *
   * <code>optional int64 updated_timestamp = 10;</code>
   */
  private void setUpdatedTimestamp(long value) {
    bitField0_ |= 0x00000200;
    updatedTimestamp_ = value;
  }
  /**
   * <pre>
   * Timestamp when printer was last updated.
   * </pre>
   *
   * <code>optional int64 updated_timestamp = 10;</code>
   */
  private void clearUpdatedTimestamp() {
    bitField0_ = (bitField0_ & ~0x00000200);
    updatedTimestamp_ = 0L;
  }

  public static final int MAKE_AND_MODEL_FIELD_NUMBER = 11;
  private java.lang.String makeAndModel_;
  /**
   * <pre>
   * The make and model of the printer in one string.  The typical arrangement
   * for this is '&lt;make&gt; &lt;model&gt;'.  This aligns with the typical formatting of
   * the IPP attribute printer-make-and-model.
   * </pre>
   *
   * <code>optional string make_and_model = 11;</code>
   */
  public boolean hasMakeAndModel() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <pre>
   * The make and model of the printer in one string.  The typical arrangement
   * for this is '&lt;make&gt; &lt;model&gt;'.  This aligns with the typical formatting of
   * the IPP attribute printer-make-and-model.
   * </pre>
   *
   * <code>optional string make_and_model = 11;</code>
   */
  public java.lang.String getMakeAndModel() {
    return makeAndModel_;
  }
  /**
   * <pre>
   * The make and model of the printer in one string.  The typical arrangement
   * for this is '&lt;make&gt; &lt;model&gt;'.  This aligns with the typical formatting of
   * the IPP attribute printer-make-and-model.
   * </pre>
   *
   * <code>optional string make_and_model = 11;</code>
   */
  public com.google.protobuf.ByteString
      getMakeAndModelBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(makeAndModel_);
  }
  /**
   * <pre>
   * The make and model of the printer in one string.  The typical arrangement
   * for this is '&lt;make&gt; &lt;model&gt;'.  This aligns with the typical formatting of
   * the IPP attribute printer-make-and-model.
   * </pre>
   *
   * <code>optional string make_and_model = 11;</code>
   */
  private void setMakeAndModel(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
    makeAndModel_ = value;
  }
  /**
   * <pre>
   * The make and model of the printer in one string.  The typical arrangement
   * for this is '&lt;make&gt; &lt;model&gt;'.  This aligns with the typical formatting of
   * the IPP attribute printer-make-and-model.
   * </pre>
   *
   * <code>optional string make_and_model = 11;</code>
   */
  private void clearMakeAndModel() {
    bitField0_ = (bitField0_ & ~0x00000400);
    makeAndModel_ = getDefaultInstance().getMakeAndModel();
  }
  /**
   * <pre>
   * The make and model of the printer in one string.  The typical arrangement
   * for this is '&lt;make&gt; &lt;model&gt;'.  This aligns with the typical formatting of
   * the IPP attribute printer-make-and-model.
   * </pre>
   *
   * <code>optional string make_and_model = 11;</code>
   */
  private void setMakeAndModelBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
    makeAndModel_ = value.toStringUtf8();
  }

  public static final int PRINT_SERVER_URI_FIELD_NUMBER = 12;
  private java.lang.String printServerUri_;
  /**
   * <pre>
   * Universal Resource Identifier for the print server on the network.  This
   * will only be populated if the printer is from a print server.  Example
   * ipp://address.example:port/
   * </pre>
   *
   * <code>optional string print_server_uri = 12;</code>
   */
  public boolean hasPrintServerUri() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <pre>
   * Universal Resource Identifier for the print server on the network.  This
   * will only be populated if the printer is from a print server.  Example
   * ipp://address.example:port/
   * </pre>
   *
   * <code>optional string print_server_uri = 12;</code>
   */
  public java.lang.String getPrintServerUri() {
    return printServerUri_;
  }
  /**
   * <pre>
   * Universal Resource Identifier for the print server on the network.  This
   * will only be populated if the printer is from a print server.  Example
   * ipp://address.example:port/
   * </pre>
   *
   * <code>optional string print_server_uri = 12;</code>
   */
  public com.google.protobuf.ByteString
      getPrintServerUriBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(printServerUri_);
  }
  /**
   * <pre>
   * Universal Resource Identifier for the print server on the network.  This
   * will only be populated if the printer is from a print server.  Example
   * ipp://address.example:port/
   * </pre>
   *
   * <code>optional string print_server_uri = 12;</code>
   */
  private void setPrintServerUri(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
    printServerUri_ = value;
  }
  /**
   * <pre>
   * Universal Resource Identifier for the print server on the network.  This
   * will only be populated if the printer is from a print server.  Example
   * ipp://address.example:port/
   * </pre>
   *
   * <code>optional string print_server_uri = 12;</code>
   */
  private void clearPrintServerUri() {
    bitField0_ = (bitField0_ & ~0x00000800);
    printServerUri_ = getDefaultInstance().getPrintServerUri();
  }
  /**
   * <pre>
   * Universal Resource Identifier for the print server on the network.  This
   * will only be populated if the printer is from a print server.  Example
   * ipp://address.example:port/
   * </pre>
   *
   * <code>optional string print_server_uri = 12;</code>
   */
  private void setPrintServerUriBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
    printServerUri_ = value.toStringUtf8();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeString(1, getId());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeString(2, getDisplayName());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeString(3, getDescription());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeString(4, getManufacturer());
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeString(5, getModel());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeString(6, getUri());
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeString(7, getUuid());
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeBytes(8, ppd_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeMessage(9, getPpdReference());
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeInt64(10, updatedTimestamp_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      output.writeString(11, getMakeAndModel());
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeString(12, getPrintServerUri());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getId());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getDisplayName());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getDescription());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(4, getManufacturer());
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(5, getModel());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(6, getUri());
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(7, getUuid());
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(8, ppd_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getPpdReference());
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(10, updatedTimestamp_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(11, getMakeAndModel());
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(12, getPrintServerUri());
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.PrinterSpecifics parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.PrinterSpecifics parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PrinterSpecifics parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.PrinterSpecifics parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PrinterSpecifics parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.PrinterSpecifics parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PrinterSpecifics parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.PrinterSpecifics parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PrinterSpecifics parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.PrinterSpecifics parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.PrinterSpecifics prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code sync_pb.PrinterSpecifics}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.PrinterSpecifics, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.PrinterSpecifics)
      org.chromium.components.sync.protocol.PrinterSpecificsOrBuilder {
    // Construct using org.chromium.components.sync.protocol.PrinterSpecifics.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Printer record GUID
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public boolean hasId() {
      return instance.hasId();
    }
    /**
     * <pre>
     * Printer record GUID
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public java.lang.String getId() {
      return instance.getId();
    }
    /**
     * <pre>
     * Printer record GUID
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      return instance.getIdBytes();
    }
    /**
     * <pre>
     * Printer record GUID
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public Builder setId(
        java.lang.String value) {
      copyOnWrite();
      instance.setId(value);
      return this;
    }
    /**
     * <pre>
     * Printer record GUID
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public Builder clearId() {
      copyOnWrite();
      instance.clearId();
      return this;
    }
    /**
     * <pre>
     * Printer record GUID
     * </pre>
     *
     * <code>optional string id = 1;</code>
     */
    public Builder setIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * User visible name.  Any string.
     * </pre>
     *
     * <code>optional string display_name = 2;</code>
     */
    public boolean hasDisplayName() {
      return instance.hasDisplayName();
    }
    /**
     * <pre>
     * User visible name.  Any string.
     * </pre>
     *
     * <code>optional string display_name = 2;</code>
     */
    public java.lang.String getDisplayName() {
      return instance.getDisplayName();
    }
    /**
     * <pre>
     * User visible name.  Any string.
     * </pre>
     *
     * <code>optional string display_name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getDisplayNameBytes() {
      return instance.getDisplayNameBytes();
    }
    /**
     * <pre>
     * User visible name.  Any string.
     * </pre>
     *
     * <code>optional string display_name = 2;</code>
     */
    public Builder setDisplayName(
        java.lang.String value) {
      copyOnWrite();
      instance.setDisplayName(value);
      return this;
    }
    /**
     * <pre>
     * User visible name.  Any string.
     * </pre>
     *
     * <code>optional string display_name = 2;</code>
     */
    public Builder clearDisplayName() {
      copyOnWrite();
      instance.clearDisplayName();
      return this;
    }
    /**
     * <pre>
     * User visible name.  Any string.
     * </pre>
     *
     * <code>optional string display_name = 2;</code>
     */
    public Builder setDisplayNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDisplayNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * User visible description.  Any string.
     * </pre>
     *
     * <code>optional string description = 3;</code>
     */
    public boolean hasDescription() {
      return instance.hasDescription();
    }
    /**
     * <pre>
     * User visible description.  Any string.
     * </pre>
     *
     * <code>optional string description = 3;</code>
     */
    public java.lang.String getDescription() {
      return instance.getDescription();
    }
    /**
     * <pre>
     * User visible description.  Any string.
     * </pre>
     *
     * <code>optional string description = 3;</code>
     */
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      return instance.getDescriptionBytes();
    }
    /**
     * <pre>
     * User visible description.  Any string.
     * </pre>
     *
     * <code>optional string description = 3;</code>
     */
    public Builder setDescription(
        java.lang.String value) {
      copyOnWrite();
      instance.setDescription(value);
      return this;
    }
    /**
     * <pre>
     * User visible description.  Any string.
     * </pre>
     *
     * <code>optional string description = 3;</code>
     */
    public Builder clearDescription() {
      copyOnWrite();
      instance.clearDescription();
      return this;
    }
    /**
     * <pre>
     * User visible description.  Any string.
     * </pre>
     *
     * <code>optional string description = 3;</code>
     */
    public Builder setDescriptionBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDescriptionBytes(value);
      return this;
    }

    /**
     * <pre>
     * Printer manufacturer.  Should be a known manufacturuer.
     * Deprecated in favor of make_and_model.
     * </pre>
     *
     * <code>optional string manufacturer = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasManufacturer() {
      return instance.hasManufacturer();
    }
    /**
     * <pre>
     * Printer manufacturer.  Should be a known manufacturuer.
     * Deprecated in favor of make_and_model.
     * </pre>
     *
     * <code>optional string manufacturer = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public java.lang.String getManufacturer() {
      return instance.getManufacturer();
    }
    /**
     * <pre>
     * Printer manufacturer.  Should be a known manufacturuer.
     * Deprecated in favor of make_and_model.
     * </pre>
     *
     * <code>optional string manufacturer = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.protobuf.ByteString
        getManufacturerBytes() {
      return instance.getManufacturerBytes();
    }
    /**
     * <pre>
     * Printer manufacturer.  Should be a known manufacturuer.
     * Deprecated in favor of make_and_model.
     * </pre>
     *
     * <code>optional string manufacturer = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setManufacturer(
        java.lang.String value) {
      copyOnWrite();
      instance.setManufacturer(value);
      return this;
    }
    /**
     * <pre>
     * Printer manufacturer.  Should be a known manufacturuer.
     * Deprecated in favor of make_and_model.
     * </pre>
     *
     * <code>optional string manufacturer = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearManufacturer() {
      copyOnWrite();
      instance.clearManufacturer();
      return this;
    }
    /**
     * <pre>
     * Printer manufacturer.  Should be a known manufacturuer.
     * Deprecated in favor of make_and_model.
     * </pre>
     *
     * <code>optional string manufacturer = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setManufacturerBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setManufacturerBytes(value);
      return this;
    }

    /**
     * <pre>
     * Printer model.  Should match a known model for the manufacturer.
     * Deprecated in favor of make_and_model.
     * </pre>
     *
     * <code>optional string model = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasModel() {
      return instance.hasModel();
    }
    /**
     * <pre>
     * Printer model.  Should match a known model for the manufacturer.
     * Deprecated in favor of make_and_model.
     * </pre>
     *
     * <code>optional string model = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated public java.lang.String getModel() {
      return instance.getModel();
    }
    /**
     * <pre>
     * Printer model.  Should match a known model for the manufacturer.
     * Deprecated in favor of make_and_model.
     * </pre>
     *
     * <code>optional string model = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.protobuf.ByteString
        getModelBytes() {
      return instance.getModelBytes();
    }
    /**
     * <pre>
     * Printer model.  Should match a known model for the manufacturer.
     * Deprecated in favor of make_and_model.
     * </pre>
     *
     * <code>optional string model = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setModel(
        java.lang.String value) {
      copyOnWrite();
      instance.setModel(value);
      return this;
    }
    /**
     * <pre>
     * Printer model.  Should match a known model for the manufacturer.
     * Deprecated in favor of make_and_model.
     * </pre>
     *
     * <code>optional string model = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearModel() {
      copyOnWrite();
      instance.clearModel();
      return this;
    }
    /**
     * <pre>
     * Printer model.  Should match a known model for the manufacturer.
     * Deprecated in favor of make_and_model.
     * </pre>
     *
     * <code>optional string model = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setModelBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setModelBytes(value);
      return this;
    }

    /**
     * <pre>
     * Universal Resource Identifier for the printer on the network.  usb:// will
     * be the scheme for USB printers.  Example
     * ipp://address.example:port/queue/queue/queue.
     * </pre>
     *
     * <code>optional string uri = 6;</code>
     */
    public boolean hasUri() {
      return instance.hasUri();
    }
    /**
     * <pre>
     * Universal Resource Identifier for the printer on the network.  usb:// will
     * be the scheme for USB printers.  Example
     * ipp://address.example:port/queue/queue/queue.
     * </pre>
     *
     * <code>optional string uri = 6;</code>
     */
    public java.lang.String getUri() {
      return instance.getUri();
    }
    /**
     * <pre>
     * Universal Resource Identifier for the printer on the network.  usb:// will
     * be the scheme for USB printers.  Example
     * ipp://address.example:port/queue/queue/queue.
     * </pre>
     *
     * <code>optional string uri = 6;</code>
     */
    public com.google.protobuf.ByteString
        getUriBytes() {
      return instance.getUriBytes();
    }
    /**
     * <pre>
     * Universal Resource Identifier for the printer on the network.  usb:// will
     * be the scheme for USB printers.  Example
     * ipp://address.example:port/queue/queue/queue.
     * </pre>
     *
     * <code>optional string uri = 6;</code>
     */
    public Builder setUri(
        java.lang.String value) {
      copyOnWrite();
      instance.setUri(value);
      return this;
    }
    /**
     * <pre>
     * Universal Resource Identifier for the printer on the network.  usb:// will
     * be the scheme for USB printers.  Example
     * ipp://address.example:port/queue/queue/queue.
     * </pre>
     *
     * <code>optional string uri = 6;</code>
     */
    public Builder clearUri() {
      copyOnWrite();
      instance.clearUri();
      return this;
    }
    /**
     * <pre>
     * Universal Resource Identifier for the printer on the network.  usb:// will
     * be the scheme for USB printers.  Example
     * ipp://address.example:port/queue/queue/queue.
     * </pre>
     *
     * <code>optional string uri = 6;</code>
     */
    public Builder setUriBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setUriBytes(value);
      return this;
    }

    /**
     * <pre>
     * Universally Unique Identifier provided by the printer.  Used for unique
     * identification of printers in a zeroconf environment.
     * </pre>
     *
     * <code>optional string uuid = 7;</code>
     */
    public boolean hasUuid() {
      return instance.hasUuid();
    }
    /**
     * <pre>
     * Universally Unique Identifier provided by the printer.  Used for unique
     * identification of printers in a zeroconf environment.
     * </pre>
     *
     * <code>optional string uuid = 7;</code>
     */
    public java.lang.String getUuid() {
      return instance.getUuid();
    }
    /**
     * <pre>
     * Universally Unique Identifier provided by the printer.  Used for unique
     * identification of printers in a zeroconf environment.
     * </pre>
     *
     * <code>optional string uuid = 7;</code>
     */
    public com.google.protobuf.ByteString
        getUuidBytes() {
      return instance.getUuidBytes();
    }
    /**
     * <pre>
     * Universally Unique Identifier provided by the printer.  Used for unique
     * identification of printers in a zeroconf environment.
     * </pre>
     *
     * <code>optional string uuid = 7;</code>
     */
    public Builder setUuid(
        java.lang.String value) {
      copyOnWrite();
      instance.setUuid(value);
      return this;
    }
    /**
     * <pre>
     * Universally Unique Identifier provided by the printer.  Used for unique
     * identification of printers in a zeroconf environment.
     * </pre>
     *
     * <code>optional string uuid = 7;</code>
     */
    public Builder clearUuid() {
      copyOnWrite();
      instance.clearUuid();
      return this;
    }
    /**
     * <pre>
     * Universally Unique Identifier provided by the printer.  Used for unique
     * identification of printers in a zeroconf environment.
     * </pre>
     *
     * <code>optional string uuid = 7;</code>
     */
    public Builder setUuidBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setUuidBytes(value);
      return this;
    }

    /**
     * <pre>
     * PPDData was deprecated in favor of PPDReference format.
     * </pre>
     *
     * <code>optional bytes ppd = 8 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasPpd() {
      return instance.hasPpd();
    }
    /**
     * <pre>
     * PPDData was deprecated in favor of PPDReference format.
     * </pre>
     *
     * <code>optional bytes ppd = 8 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.protobuf.ByteString getPpd() {
      return instance.getPpd();
    }
    /**
     * <pre>
     * PPDData was deprecated in favor of PPDReference format.
     * </pre>
     *
     * <code>optional bytes ppd = 8 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setPpd(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPpd(value);
      return this;
    }
    /**
     * <pre>
     * PPDData was deprecated in favor of PPDReference format.
     * </pre>
     *
     * <code>optional bytes ppd = 8 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearPpd() {
      copyOnWrite();
      instance.clearPpd();
      return this;
    }

    /**
     * <pre>
     * Structure representing the user's ppd configuration.
     * </pre>
     *
     * <code>optional .sync_pb.PrinterPPDReference ppd_reference = 9;</code>
     */
    public boolean hasPpdReference() {
      return instance.hasPpdReference();
    }
    /**
     * <pre>
     * Structure representing the user's ppd configuration.
     * </pre>
     *
     * <code>optional .sync_pb.PrinterPPDReference ppd_reference = 9;</code>
     */
    public org.chromium.components.sync.protocol.PrinterPPDReference getPpdReference() {
      return instance.getPpdReference();
    }
    /**
     * <pre>
     * Structure representing the user's ppd configuration.
     * </pre>
     *
     * <code>optional .sync_pb.PrinterPPDReference ppd_reference = 9;</code>
     */
    public Builder setPpdReference(org.chromium.components.sync.protocol.PrinterPPDReference value) {
      copyOnWrite();
      instance.setPpdReference(value);
      return this;
      }
    /**
     * <pre>
     * Structure representing the user's ppd configuration.
     * </pre>
     *
     * <code>optional .sync_pb.PrinterPPDReference ppd_reference = 9;</code>
     */
    public Builder setPpdReference(
        org.chromium.components.sync.protocol.PrinterPPDReference.Builder builderForValue) {
      copyOnWrite();
      instance.setPpdReference(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Structure representing the user's ppd configuration.
     * </pre>
     *
     * <code>optional .sync_pb.PrinterPPDReference ppd_reference = 9;</code>
     */
    public Builder mergePpdReference(org.chromium.components.sync.protocol.PrinterPPDReference value) {
      copyOnWrite();
      instance.mergePpdReference(value);
      return this;
    }
    /**
     * <pre>
     * Structure representing the user's ppd configuration.
     * </pre>
     *
     * <code>optional .sync_pb.PrinterPPDReference ppd_reference = 9;</code>
     */
    public Builder clearPpdReference() {  copyOnWrite();
      instance.clearPpdReference();
      return this;
    }

    /**
     * <pre>
     * Timestamp when printer was last updated.
     * </pre>
     *
     * <code>optional int64 updated_timestamp = 10;</code>
     */
    public boolean hasUpdatedTimestamp() {
      return instance.hasUpdatedTimestamp();
    }
    /**
     * <pre>
     * Timestamp when printer was last updated.
     * </pre>
     *
     * <code>optional int64 updated_timestamp = 10;</code>
     */
    public long getUpdatedTimestamp() {
      return instance.getUpdatedTimestamp();
    }
    /**
     * <pre>
     * Timestamp when printer was last updated.
     * </pre>
     *
     * <code>optional int64 updated_timestamp = 10;</code>
     */
    public Builder setUpdatedTimestamp(long value) {
      copyOnWrite();
      instance.setUpdatedTimestamp(value);
      return this;
    }
    /**
     * <pre>
     * Timestamp when printer was last updated.
     * </pre>
     *
     * <code>optional int64 updated_timestamp = 10;</code>
     */
    public Builder clearUpdatedTimestamp() {
      copyOnWrite();
      instance.clearUpdatedTimestamp();
      return this;
    }

    /**
     * <pre>
     * The make and model of the printer in one string.  The typical arrangement
     * for this is '&lt;make&gt; &lt;model&gt;'.  This aligns with the typical formatting of
     * the IPP attribute printer-make-and-model.
     * </pre>
     *
     * <code>optional string make_and_model = 11;</code>
     */
    public boolean hasMakeAndModel() {
      return instance.hasMakeAndModel();
    }
    /**
     * <pre>
     * The make and model of the printer in one string.  The typical arrangement
     * for this is '&lt;make&gt; &lt;model&gt;'.  This aligns with the typical formatting of
     * the IPP attribute printer-make-and-model.
     * </pre>
     *
     * <code>optional string make_and_model = 11;</code>
     */
    public java.lang.String getMakeAndModel() {
      return instance.getMakeAndModel();
    }
    /**
     * <pre>
     * The make and model of the printer in one string.  The typical arrangement
     * for this is '&lt;make&gt; &lt;model&gt;'.  This aligns with the typical formatting of
     * the IPP attribute printer-make-and-model.
     * </pre>
     *
     * <code>optional string make_and_model = 11;</code>
     */
    public com.google.protobuf.ByteString
        getMakeAndModelBytes() {
      return instance.getMakeAndModelBytes();
    }
    /**
     * <pre>
     * The make and model of the printer in one string.  The typical arrangement
     * for this is '&lt;make&gt; &lt;model&gt;'.  This aligns with the typical formatting of
     * the IPP attribute printer-make-and-model.
     * </pre>
     *
     * <code>optional string make_and_model = 11;</code>
     */
    public Builder setMakeAndModel(
        java.lang.String value) {
      copyOnWrite();
      instance.setMakeAndModel(value);
      return this;
    }
    /**
     * <pre>
     * The make and model of the printer in one string.  The typical arrangement
     * for this is '&lt;make&gt; &lt;model&gt;'.  This aligns with the typical formatting of
     * the IPP attribute printer-make-and-model.
     * </pre>
     *
     * <code>optional string make_and_model = 11;</code>
     */
    public Builder clearMakeAndModel() {
      copyOnWrite();
      instance.clearMakeAndModel();
      return this;
    }
    /**
     * <pre>
     * The make and model of the printer in one string.  The typical arrangement
     * for this is '&lt;make&gt; &lt;model&gt;'.  This aligns with the typical formatting of
     * the IPP attribute printer-make-and-model.
     * </pre>
     *
     * <code>optional string make_and_model = 11;</code>
     */
    public Builder setMakeAndModelBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setMakeAndModelBytes(value);
      return this;
    }

    /**
     * <pre>
     * Universal Resource Identifier for the print server on the network.  This
     * will only be populated if the printer is from a print server.  Example
     * ipp://address.example:port/
     * </pre>
     *
     * <code>optional string print_server_uri = 12;</code>
     */
    public boolean hasPrintServerUri() {
      return instance.hasPrintServerUri();
    }
    /**
     * <pre>
     * Universal Resource Identifier for the print server on the network.  This
     * will only be populated if the printer is from a print server.  Example
     * ipp://address.example:port/
     * </pre>
     *
     * <code>optional string print_server_uri = 12;</code>
     */
    public java.lang.String getPrintServerUri() {
      return instance.getPrintServerUri();
    }
    /**
     * <pre>
     * Universal Resource Identifier for the print server on the network.  This
     * will only be populated if the printer is from a print server.  Example
     * ipp://address.example:port/
     * </pre>
     *
     * <code>optional string print_server_uri = 12;</code>
     */
    public com.google.protobuf.ByteString
        getPrintServerUriBytes() {
      return instance.getPrintServerUriBytes();
    }
    /**
     * <pre>
     * Universal Resource Identifier for the print server on the network.  This
     * will only be populated if the printer is from a print server.  Example
     * ipp://address.example:port/
     * </pre>
     *
     * <code>optional string print_server_uri = 12;</code>
     */
    public Builder setPrintServerUri(
        java.lang.String value) {
      copyOnWrite();
      instance.setPrintServerUri(value);
      return this;
    }
    /**
     * <pre>
     * Universal Resource Identifier for the print server on the network.  This
     * will only be populated if the printer is from a print server.  Example
     * ipp://address.example:port/
     * </pre>
     *
     * <code>optional string print_server_uri = 12;</code>
     */
    public Builder clearPrintServerUri() {
      copyOnWrite();
      instance.clearPrintServerUri();
      return this;
    }
    /**
     * <pre>
     * Universal Resource Identifier for the print server on the network.  This
     * will only be populated if the printer is from a print server.  Example
     * ipp://address.example:port/
     * </pre>
     *
     * <code>optional string print_server_uri = 12;</code>
     */
    public Builder setPrintServerUriBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPrintServerUriBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.PrinterSpecifics)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.PrinterSpecifics();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.PrinterSpecifics other = (org.chromium.components.sync.protocol.PrinterSpecifics) arg1;
        id_ = visitor.visitString(
            hasId(), id_,
            other.hasId(), other.id_);
        displayName_ = visitor.visitString(
            hasDisplayName(), displayName_,
            other.hasDisplayName(), other.displayName_);
        description_ = visitor.visitString(
            hasDescription(), description_,
            other.hasDescription(), other.description_);
        manufacturer_ = visitor.visitString(
            hasManufacturer(), manufacturer_,
            other.hasManufacturer(), other.manufacturer_);
        model_ = visitor.visitString(
            hasModel(), model_,
            other.hasModel(), other.model_);
        uri_ = visitor.visitString(
            hasUri(), uri_,
            other.hasUri(), other.uri_);
        uuid_ = visitor.visitString(
            hasUuid(), uuid_,
            other.hasUuid(), other.uuid_);
        ppd_ = visitor.visitByteString(
            hasPpd(), ppd_,
            other.hasPpd(), other.ppd_);
        ppdReference_ = visitor.visitMessage(ppdReference_, other.ppdReference_);
        updatedTimestamp_ = visitor.visitLong(
            hasUpdatedTimestamp(), updatedTimestamp_,
            other.hasUpdatedTimestamp(), other.updatedTimestamp_);
        makeAndModel_ = visitor.visitString(
            hasMakeAndModel(), makeAndModel_,
            other.hasMakeAndModel(), other.makeAndModel_);
        printServerUri_ = visitor.visitString(
            hasPrintServerUri(), printServerUri_,
            other.hasPrintServerUri(), other.printServerUri_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                bitField0_ |= 0x00000001;
                id_ = s;
                break;
              }
              case 18: {
                String s = input.readString();
                bitField0_ |= 0x00000002;
                displayName_ = s;
                break;
              }
              case 26: {
                String s = input.readString();
                bitField0_ |= 0x00000004;
                description_ = s;
                break;
              }
              case 34: {
                String s = input.readString();
                bitField0_ |= 0x00000008;
                manufacturer_ = s;
                break;
              }
              case 42: {
                String s = input.readString();
                bitField0_ |= 0x00000010;
                model_ = s;
                break;
              }
              case 50: {
                String s = input.readString();
                bitField0_ |= 0x00000020;
                uri_ = s;
                break;
              }
              case 58: {
                String s = input.readString();
                bitField0_ |= 0x00000040;
                uuid_ = s;
                break;
              }
              case 66: {
                bitField0_ |= 0x00000080;
                ppd_ = input.readBytes();
                break;
              }
              case 74: {
                org.chromium.components.sync.protocol.PrinterPPDReference.Builder subBuilder = null;
                if (((bitField0_ & 0x00000100) == 0x00000100)) {
                  subBuilder = ppdReference_.toBuilder();
                }
                ppdReference_ = input.readMessage(org.chromium.components.sync.protocol.PrinterPPDReference.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(ppdReference_);
                  ppdReference_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000100;
                break;
              }
              case 80: {
                bitField0_ |= 0x00000200;
                updatedTimestamp_ = input.readInt64();
                break;
              }
              case 90: {
                String s = input.readString();
                bitField0_ |= 0x00000400;
                makeAndModel_ = s;
                break;
              }
              case 98: {
                String s = input.readString();
                bitField0_ |= 0x00000800;
                printServerUri_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.PrinterSpecifics.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.PrinterSpecifics)
  private static final org.chromium.components.sync.protocol.PrinterSpecifics DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new PrinterSpecifics();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.PrinterSpecifics getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<PrinterSpecifics> PARSER;

  public static com.google.protobuf.Parser<PrinterSpecifics> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

