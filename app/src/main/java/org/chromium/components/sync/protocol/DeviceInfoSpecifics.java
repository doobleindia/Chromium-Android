// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_info_specifics.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * Information about a device that is running a sync-enabled Chrome browser.  We
 * are mapping the per-client cache guid to more specific information about the
 * device.
 * </pre>
 *
 * Protobuf type {@code sync_pb.DeviceInfoSpecifics}
 */
public  final class DeviceInfoSpecifics extends
    com.google.protobuf.GeneratedMessageLite<
        DeviceInfoSpecifics, DeviceInfoSpecifics.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.DeviceInfoSpecifics)
    DeviceInfoSpecificsOrBuilder {
  private DeviceInfoSpecifics() {
    cacheGuid_ = "";
    clientName_ = "";
    syncUserAgent_ = "";
    chromeVersion_ = "";
    signinScopedDeviceId_ = "";
    model_ = "";
    manufacturer_ = "";
  }
  private int bitField0_;
  public static final int CACHE_GUID_FIELD_NUMBER = 1;
  private java.lang.String cacheGuid_;
  /**
   * <pre>
   * The cache_guid created to identify a sync client on this device.
   * </pre>
   *
   * <code>optional string cache_guid = 1;</code>
   */
  public boolean hasCacheGuid() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * The cache_guid created to identify a sync client on this device.
   * </pre>
   *
   * <code>optional string cache_guid = 1;</code>
   */
  public java.lang.String getCacheGuid() {
    return cacheGuid_;
  }
  /**
   * <pre>
   * The cache_guid created to identify a sync client on this device.
   * </pre>
   *
   * <code>optional string cache_guid = 1;</code>
   */
  public com.google.protobuf.ByteString
      getCacheGuidBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(cacheGuid_);
  }
  /**
   * <pre>
   * The cache_guid created to identify a sync client on this device.
   * </pre>
   *
   * <code>optional string cache_guid = 1;</code>
   */
  private void setCacheGuid(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    cacheGuid_ = value;
  }
  /**
   * <pre>
   * The cache_guid created to identify a sync client on this device.
   * </pre>
   *
   * <code>optional string cache_guid = 1;</code>
   */
  private void clearCacheGuid() {
    bitField0_ = (bitField0_ & ~0x00000001);
    cacheGuid_ = getDefaultInstance().getCacheGuid();
  }
  /**
   * <pre>
   * The cache_guid created to identify a sync client on this device.
   * </pre>
   *
   * <code>optional string cache_guid = 1;</code>
   */
  private void setCacheGuidBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    cacheGuid_ = value.toStringUtf8();
  }

  public static final int CLIENT_NAME_FIELD_NUMBER = 2;
  private java.lang.String clientName_;
  /**
   * <pre>
   * A non-unique but human readable name to describe this client.
   * </pre>
   *
   * <code>optional string client_name = 2;</code>
   */
  public boolean hasClientName() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * A non-unique but human readable name to describe this client.
   * </pre>
   *
   * <code>optional string client_name = 2;</code>
   */
  public java.lang.String getClientName() {
    return clientName_;
  }
  /**
   * <pre>
   * A non-unique but human readable name to describe this client.
   * </pre>
   *
   * <code>optional string client_name = 2;</code>
   */
  public com.google.protobuf.ByteString
      getClientNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(clientName_);
  }
  /**
   * <pre>
   * A non-unique but human readable name to describe this client.
   * </pre>
   *
   * <code>optional string client_name = 2;</code>
   */
  private void setClientName(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    clientName_ = value;
  }
  /**
   * <pre>
   * A non-unique but human readable name to describe this client.
   * </pre>
   *
   * <code>optional string client_name = 2;</code>
   */
  private void clearClientName() {
    bitField0_ = (bitField0_ & ~0x00000002);
    clientName_ = getDefaultInstance().getClientName();
  }
  /**
   * <pre>
   * A non-unique but human readable name to describe this client.
   * </pre>
   *
   * <code>optional string client_name = 2;</code>
   */
  private void setClientNameBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    clientName_ = value.toStringUtf8();
  }

  public static final int DEVICE_TYPE_FIELD_NUMBER = 3;
  private int deviceType_;
  /**
   * <pre>
   * The platform of the device.
   * </pre>
   *
   * <code>optional .sync_pb.SyncEnums.DeviceType device_type = 3;</code>
   */
  public boolean hasDeviceType() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * The platform of the device.
   * </pre>
   *
   * <code>optional .sync_pb.SyncEnums.DeviceType device_type = 3;</code>
   */
  public org.chromium.components.sync.protocol.SyncEnums.DeviceType getDeviceType() {
    org.chromium.components.sync.protocol.SyncEnums.DeviceType result = org.chromium.components.sync.protocol.SyncEnums.DeviceType.forNumber(deviceType_);
    return result == null ? org.chromium.components.sync.protocol.SyncEnums.DeviceType.TYPE_UNSET : result;
  }
  /**
   * <pre>
   * The platform of the device.
   * </pre>
   *
   * <code>optional .sync_pb.SyncEnums.DeviceType device_type = 3;</code>
   */
  private void setDeviceType(org.chromium.components.sync.protocol.SyncEnums.DeviceType value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000004;
    deviceType_ = value.getNumber();
  }
  /**
   * <pre>
   * The platform of the device.
   * </pre>
   *
   * <code>optional .sync_pb.SyncEnums.DeviceType device_type = 3;</code>
   */
  private void clearDeviceType() {
    bitField0_ = (bitField0_ & ~0x00000004);
    deviceType_ = 0;
  }

  public static final int SYNC_USER_AGENT_FIELD_NUMBER = 4;
  private java.lang.String syncUserAgent_;
  /**
   * <pre>
   * The UserAgent used when contacting the Chrome Sync server.
   * </pre>
   *
   * <code>optional string sync_user_agent = 4;</code>
   */
  public boolean hasSyncUserAgent() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * The UserAgent used when contacting the Chrome Sync server.
   * </pre>
   *
   * <code>optional string sync_user_agent = 4;</code>
   */
  public java.lang.String getSyncUserAgent() {
    return syncUserAgent_;
  }
  /**
   * <pre>
   * The UserAgent used when contacting the Chrome Sync server.
   * </pre>
   *
   * <code>optional string sync_user_agent = 4;</code>
   */
  public com.google.protobuf.ByteString
      getSyncUserAgentBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(syncUserAgent_);
  }
  /**
   * <pre>
   * The UserAgent used when contacting the Chrome Sync server.
   * </pre>
   *
   * <code>optional string sync_user_agent = 4;</code>
   */
  private void setSyncUserAgent(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    syncUserAgent_ = value;
  }
  /**
   * <pre>
   * The UserAgent used when contacting the Chrome Sync server.
   * </pre>
   *
   * <code>optional string sync_user_agent = 4;</code>
   */
  private void clearSyncUserAgent() {
    bitField0_ = (bitField0_ & ~0x00000008);
    syncUserAgent_ = getDefaultInstance().getSyncUserAgent();
  }
  /**
   * <pre>
   * The UserAgent used when contacting the Chrome Sync server.
   * </pre>
   *
   * <code>optional string sync_user_agent = 4;</code>
   */
  private void setSyncUserAgentBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    syncUserAgent_ = value.toStringUtf8();
  }

  public static final int CHROME_VERSION_FIELD_NUMBER = 5;
  private java.lang.String chromeVersion_;
  /**
   * <pre>
   * The Chrome instance's version.  Updated (if necessary) on every startup.
   * </pre>
   *
   * <code>optional string chrome_version = 5;</code>
   */
  public boolean hasChromeVersion() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <pre>
   * The Chrome instance's version.  Updated (if necessary) on every startup.
   * </pre>
   *
   * <code>optional string chrome_version = 5;</code>
   */
  public java.lang.String getChromeVersion() {
    return chromeVersion_;
  }
  /**
   * <pre>
   * The Chrome instance's version.  Updated (if necessary) on every startup.
   * </pre>
   *
   * <code>optional string chrome_version = 5;</code>
   */
  public com.google.protobuf.ByteString
      getChromeVersionBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(chromeVersion_);
  }
  /**
   * <pre>
   * The Chrome instance's version.  Updated (if necessary) on every startup.
   * </pre>
   *
   * <code>optional string chrome_version = 5;</code>
   */
  private void setChromeVersion(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
    chromeVersion_ = value;
  }
  /**
   * <pre>
   * The Chrome instance's version.  Updated (if necessary) on every startup.
   * </pre>
   *
   * <code>optional string chrome_version = 5;</code>
   */
  private void clearChromeVersion() {
    bitField0_ = (bitField0_ & ~0x00000010);
    chromeVersion_ = getDefaultInstance().getChromeVersion();
  }
  /**
   * <pre>
   * The Chrome instance's version.  Updated (if necessary) on every startup.
   * </pre>
   *
   * <code>optional string chrome_version = 5;</code>
   */
  private void setChromeVersionBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
    chromeVersion_ = value.toStringUtf8();
  }

  public static final int DEPRECATED_BACKUP_TIMESTAMP_FIELD_NUMBER = 6;
  private long deprecatedBackupTimestamp_;
  /**
   * <pre>
   * Last time when pre-sync data on the device was saved. The device can be
   * restored to state back to this time. In millisecond since UNIX epoch.
   * DEPRECATED in M50.
   * </pre>
   *
   * <code>optional int64 deprecated_backup_timestamp = 6 [deprecated = true];</code>
   */
  @java.lang.Deprecated public boolean hasDeprecatedBackupTimestamp() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * Last time when pre-sync data on the device was saved. The device can be
   * restored to state back to this time. In millisecond since UNIX epoch.
   * DEPRECATED in M50.
   * </pre>
   *
   * <code>optional int64 deprecated_backup_timestamp = 6 [deprecated = true];</code>
   */
  @java.lang.Deprecated public long getDeprecatedBackupTimestamp() {
    return deprecatedBackupTimestamp_;
  }
  /**
   * <pre>
   * Last time when pre-sync data on the device was saved. The device can be
   * restored to state back to this time. In millisecond since UNIX epoch.
   * DEPRECATED in M50.
   * </pre>
   *
   * <code>optional int64 deprecated_backup_timestamp = 6 [deprecated = true];</code>
   */
  private void setDeprecatedBackupTimestamp(long value) {
    bitField0_ |= 0x00000020;
    deprecatedBackupTimestamp_ = value;
  }
  /**
   * <pre>
   * Last time when pre-sync data on the device was saved. The device can be
   * restored to state back to this time. In millisecond since UNIX epoch.
   * DEPRECATED in M50.
   * </pre>
   *
   * <code>optional int64 deprecated_backup_timestamp = 6 [deprecated = true];</code>
   */
  private void clearDeprecatedBackupTimestamp() {
    bitField0_ = (bitField0_ & ~0x00000020);
    deprecatedBackupTimestamp_ = 0L;
  }

  public static final int SIGNIN_SCOPED_DEVICE_ID_FIELD_NUMBER = 7;
  private java.lang.String signinScopedDeviceId_;
  /**
   * <pre>
   * Device_id that is stable until user signs out. This device_id is used for
   * annotating login scoped refresh token.
   * </pre>
   *
   * <code>optional string signin_scoped_device_id = 7;</code>
   */
  public boolean hasSigninScopedDeviceId() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <pre>
   * Device_id that is stable until user signs out. This device_id is used for
   * annotating login scoped refresh token.
   * </pre>
   *
   * <code>optional string signin_scoped_device_id = 7;</code>
   */
  public java.lang.String getSigninScopedDeviceId() {
    return signinScopedDeviceId_;
  }
  /**
   * <pre>
   * Device_id that is stable until user signs out. This device_id is used for
   * annotating login scoped refresh token.
   * </pre>
   *
   * <code>optional string signin_scoped_device_id = 7;</code>
   */
  public com.google.protobuf.ByteString
      getSigninScopedDeviceIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(signinScopedDeviceId_);
  }
  /**
   * <pre>
   * Device_id that is stable until user signs out. This device_id is used for
   * annotating login scoped refresh token.
   * </pre>
   *
   * <code>optional string signin_scoped_device_id = 7;</code>
   */
  private void setSigninScopedDeviceId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
    signinScopedDeviceId_ = value;
  }
  /**
   * <pre>
   * Device_id that is stable until user signs out. This device_id is used for
   * annotating login scoped refresh token.
   * </pre>
   *
   * <code>optional string signin_scoped_device_id = 7;</code>
   */
  private void clearSigninScopedDeviceId() {
    bitField0_ = (bitField0_ & ~0x00000040);
    signinScopedDeviceId_ = getDefaultInstance().getSigninScopedDeviceId();
  }
  /**
   * <pre>
   * Device_id that is stable until user signs out. This device_id is used for
   * annotating login scoped refresh token.
   * </pre>
   *
   * <code>optional string signin_scoped_device_id = 7;</code>
   */
  private void setSigninScopedDeviceIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
    signinScopedDeviceId_ = value.toStringUtf8();
  }

  public static final int LAST_UPDATED_TIMESTAMP_FIELD_NUMBER = 8;
  private long lastUpdatedTimestamp_;
  /**
   * <pre>
   * This field is updated to be the current time periodically, and is also set
   * to the current time whenever another field changes. By examining the
   * difference between this field and the current time, it should be possible
   * to reason about the inactivity of any device that was syncing at one time.
   * </pre>
   *
   * <code>optional int64 last_updated_timestamp = 8;</code>
   */
  public boolean hasLastUpdatedTimestamp() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <pre>
   * This field is updated to be the current time periodically, and is also set
   * to the current time whenever another field changes. By examining the
   * difference between this field and the current time, it should be possible
   * to reason about the inactivity of any device that was syncing at one time.
   * </pre>
   *
   * <code>optional int64 last_updated_timestamp = 8;</code>
   */
  public long getLastUpdatedTimestamp() {
    return lastUpdatedTimestamp_;
  }
  /**
   * <pre>
   * This field is updated to be the current time periodically, and is also set
   * to the current time whenever another field changes. By examining the
   * difference between this field and the current time, it should be possible
   * to reason about the inactivity of any device that was syncing at one time.
   * </pre>
   *
   * <code>optional int64 last_updated_timestamp = 8;</code>
   */
  private void setLastUpdatedTimestamp(long value) {
    bitField0_ |= 0x00000080;
    lastUpdatedTimestamp_ = value;
  }
  /**
   * <pre>
   * This field is updated to be the current time periodically, and is also set
   * to the current time whenever another field changes. By examining the
   * difference between this field and the current time, it should be possible
   * to reason about the inactivity of any device that was syncing at one time.
   * </pre>
   *
   * <code>optional int64 last_updated_timestamp = 8;</code>
   */
  private void clearLastUpdatedTimestamp() {
    bitField0_ = (bitField0_ & ~0x00000080);
    lastUpdatedTimestamp_ = 0L;
  }

  public static final int FEATURE_FIELDS_FIELD_NUMBER = 9;
  private org.chromium.components.sync.protocol.FeatureSpecificFields featureFields_;
  /**
   * <pre>
   * Device info fields that are specific to a feature. This is information that
   * can not be derived from the other fields in the proto and are not general
   * enough to be used by another feature.
   * </pre>
   *
   * <code>optional .sync_pb.FeatureSpecificFields feature_fields = 9;</code>
   */
  public boolean hasFeatureFields() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <pre>
   * Device info fields that are specific to a feature. This is information that
   * can not be derived from the other fields in the proto and are not general
   * enough to be used by another feature.
   * </pre>
   *
   * <code>optional .sync_pb.FeatureSpecificFields feature_fields = 9;</code>
   */
  public org.chromium.components.sync.protocol.FeatureSpecificFields getFeatureFields() {
    return featureFields_ == null ? org.chromium.components.sync.protocol.FeatureSpecificFields.getDefaultInstance() : featureFields_;
  }
  /**
   * <pre>
   * Device info fields that are specific to a feature. This is information that
   * can not be derived from the other fields in the proto and are not general
   * enough to be used by another feature.
   * </pre>
   *
   * <code>optional .sync_pb.FeatureSpecificFields feature_fields = 9;</code>
   */
  private void setFeatureFields(org.chromium.components.sync.protocol.FeatureSpecificFields value) {
    if (value == null) {
      throw new NullPointerException();
    }
    featureFields_ = value;
    bitField0_ |= 0x00000100;
    }
  /**
   * <pre>
   * Device info fields that are specific to a feature. This is information that
   * can not be derived from the other fields in the proto and are not general
   * enough to be used by another feature.
   * </pre>
   *
   * <code>optional .sync_pb.FeatureSpecificFields feature_fields = 9;</code>
   */
  private void setFeatureFields(
      org.chromium.components.sync.protocol.FeatureSpecificFields.Builder builderForValue) {
    featureFields_ = builderForValue.build();
    bitField0_ |= 0x00000100;
  }
  /**
   * <pre>
   * Device info fields that are specific to a feature. This is information that
   * can not be derived from the other fields in the proto and are not general
   * enough to be used by another feature.
   * </pre>
   *
   * <code>optional .sync_pb.FeatureSpecificFields feature_fields = 9;</code>
   */
  private void mergeFeatureFields(org.chromium.components.sync.protocol.FeatureSpecificFields value) {
    if (featureFields_ != null &&
        featureFields_ != org.chromium.components.sync.protocol.FeatureSpecificFields.getDefaultInstance()) {
      featureFields_ =
        org.chromium.components.sync.protocol.FeatureSpecificFields.newBuilder(featureFields_).mergeFrom(value).buildPartial();
    } else {
      featureFields_ = value;
    }
    bitField0_ |= 0x00000100;
  }
  /**
   * <pre>
   * Device info fields that are specific to a feature. This is information that
   * can not be derived from the other fields in the proto and are not general
   * enough to be used by another feature.
   * </pre>
   *
   * <code>optional .sync_pb.FeatureSpecificFields feature_fields = 9;</code>
   */
  private void clearFeatureFields() {  featureFields_ = null;
    bitField0_ = (bitField0_ & ~0x00000100);
  }

  public static final int SHARING_FIELDS_FIELD_NUMBER = 10;
  private org.chromium.components.sync.protocol.SharingSpecificFields sharingFields_;
  /**
   * <pre>
   * Device specific information for Sharing feature.
   * </pre>
   *
   * <code>optional .sync_pb.SharingSpecificFields sharing_fields = 10;</code>
   */
  public boolean hasSharingFields() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <pre>
   * Device specific information for Sharing feature.
   * </pre>
   *
   * <code>optional .sync_pb.SharingSpecificFields sharing_fields = 10;</code>
   */
  public org.chromium.components.sync.protocol.SharingSpecificFields getSharingFields() {
    return sharingFields_ == null ? org.chromium.components.sync.protocol.SharingSpecificFields.getDefaultInstance() : sharingFields_;
  }
  /**
   * <pre>
   * Device specific information for Sharing feature.
   * </pre>
   *
   * <code>optional .sync_pb.SharingSpecificFields sharing_fields = 10;</code>
   */
  private void setSharingFields(org.chromium.components.sync.protocol.SharingSpecificFields value) {
    if (value == null) {
      throw new NullPointerException();
    }
    sharingFields_ = value;
    bitField0_ |= 0x00000200;
    }
  /**
   * <pre>
   * Device specific information for Sharing feature.
   * </pre>
   *
   * <code>optional .sync_pb.SharingSpecificFields sharing_fields = 10;</code>
   */
  private void setSharingFields(
      org.chromium.components.sync.protocol.SharingSpecificFields.Builder builderForValue) {
    sharingFields_ = builderForValue.build();
    bitField0_ |= 0x00000200;
  }
  /**
   * <pre>
   * Device specific information for Sharing feature.
   * </pre>
   *
   * <code>optional .sync_pb.SharingSpecificFields sharing_fields = 10;</code>
   */
  private void mergeSharingFields(org.chromium.components.sync.protocol.SharingSpecificFields value) {
    if (sharingFields_ != null &&
        sharingFields_ != org.chromium.components.sync.protocol.SharingSpecificFields.getDefaultInstance()) {
      sharingFields_ =
        org.chromium.components.sync.protocol.SharingSpecificFields.newBuilder(sharingFields_).mergeFrom(value).buildPartial();
    } else {
      sharingFields_ = value;
    }
    bitField0_ |= 0x00000200;
  }
  /**
   * <pre>
   * Device specific information for Sharing feature.
   * </pre>
   *
   * <code>optional .sync_pb.SharingSpecificFields sharing_fields = 10;</code>
   */
  private void clearSharingFields() {  sharingFields_ = null;
    bitField0_ = (bitField0_ & ~0x00000200);
  }

  public static final int MODEL_FIELD_NUMBER = 11;
  private java.lang.String model_;
  /**
   * <pre>
   * Model of device.
   * </pre>
   *
   * <code>optional string model = 11;</code>
   */
  public boolean hasModel() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <pre>
   * Model of device.
   * </pre>
   *
   * <code>optional string model = 11;</code>
   */
  public java.lang.String getModel() {
    return model_;
  }
  /**
   * <pre>
   * Model of device.
   * </pre>
   *
   * <code>optional string model = 11;</code>
   */
  public com.google.protobuf.ByteString
      getModelBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(model_);
  }
  /**
   * <pre>
   * Model of device.
   * </pre>
   *
   * <code>optional string model = 11;</code>
   */
  private void setModel(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
    model_ = value;
  }
  /**
   * <pre>
   * Model of device.
   * </pre>
   *
   * <code>optional string model = 11;</code>
   */
  private void clearModel() {
    bitField0_ = (bitField0_ & ~0x00000400);
    model_ = getDefaultInstance().getModel();
  }
  /**
   * <pre>
   * Model of device.
   * </pre>
   *
   * <code>optional string model = 11;</code>
   */
  private void setModelBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
    model_ = value.toStringUtf8();
  }

  public static final int MANUFACTURER_FIELD_NUMBER = 12;
  private java.lang.String manufacturer_;
  /**
   * <pre>
   * Name of device manufacturer.
   * </pre>
   *
   * <code>optional string manufacturer = 12;</code>
   */
  public boolean hasManufacturer() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <pre>
   * Name of device manufacturer.
   * </pre>
   *
   * <code>optional string manufacturer = 12;</code>
   */
  public java.lang.String getManufacturer() {
    return manufacturer_;
  }
  /**
   * <pre>
   * Name of device manufacturer.
   * </pre>
   *
   * <code>optional string manufacturer = 12;</code>
   */
  public com.google.protobuf.ByteString
      getManufacturerBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(manufacturer_);
  }
  /**
   * <pre>
   * Name of device manufacturer.
   * </pre>
   *
   * <code>optional string manufacturer = 12;</code>
   */
  private void setManufacturer(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
    manufacturer_ = value;
  }
  /**
   * <pre>
   * Name of device manufacturer.
   * </pre>
   *
   * <code>optional string manufacturer = 12;</code>
   */
  private void clearManufacturer() {
    bitField0_ = (bitField0_ & ~0x00000800);
    manufacturer_ = getDefaultInstance().getManufacturer();
  }
  /**
   * <pre>
   * Name of device manufacturer.
   * </pre>
   *
   * <code>optional string manufacturer = 12;</code>
   */
  private void setManufacturerBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
    manufacturer_ = value.toStringUtf8();
  }

  public static final int PULSE_INTERVAL_IN_MINUTES_FIELD_NUMBER = 13;
  private int pulseIntervalInMinutes_;
  /**
   * <pre>
   * The interval in minutes with which |last_updated_timestamp| is updated to
   * the sync servers if online and while sync is actively running (e.g.
   * excludes backgrounded apps on Android). Introduced in M81. The legacy
   * default was 1 day.
   * </pre>
   *
   * <code>optional int32 pulse_interval_in_minutes = 13;</code>
   */
  public boolean hasPulseIntervalInMinutes() {
    return ((bitField0_ & 0x00001000) == 0x00001000);
  }
  /**
   * <pre>
   * The interval in minutes with which |last_updated_timestamp| is updated to
   * the sync servers if online and while sync is actively running (e.g.
   * excludes backgrounded apps on Android). Introduced in M81. The legacy
   * default was 1 day.
   * </pre>
   *
   * <code>optional int32 pulse_interval_in_minutes = 13;</code>
   */
  public int getPulseIntervalInMinutes() {
    return pulseIntervalInMinutes_;
  }
  /**
   * <pre>
   * The interval in minutes with which |last_updated_timestamp| is updated to
   * the sync servers if online and while sync is actively running (e.g.
   * excludes backgrounded apps on Android). Introduced in M81. The legacy
   * default was 1 day.
   * </pre>
   *
   * <code>optional int32 pulse_interval_in_minutes = 13;</code>
   */
  private void setPulseIntervalInMinutes(int value) {
    bitField0_ |= 0x00001000;
    pulseIntervalInMinutes_ = value;
  }
  /**
   * <pre>
   * The interval in minutes with which |last_updated_timestamp| is updated to
   * the sync servers if online and while sync is actively running (e.g.
   * excludes backgrounded apps on Android). Introduced in M81. The legacy
   * default was 1 day.
   * </pre>
   *
   * <code>optional int32 pulse_interval_in_minutes = 13;</code>
   */
  private void clearPulseIntervalInMinutes() {
    bitField0_ = (bitField0_ & ~0x00001000);
    pulseIntervalInMinutes_ = 0;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeString(1, getCacheGuid());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeString(2, getClientName());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeEnum(3, deviceType_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeString(4, getSyncUserAgent());
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeString(5, getChromeVersion());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeInt64(6, deprecatedBackupTimestamp_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeString(7, getSigninScopedDeviceId());
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeInt64(8, lastUpdatedTimestamp_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeMessage(9, getFeatureFields());
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeMessage(10, getSharingFields());
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      output.writeString(11, getModel());
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeString(12, getManufacturer());
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      output.writeInt32(13, pulseIntervalInMinutes_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getCacheGuid());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getClientName());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, deviceType_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(4, getSyncUserAgent());
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(5, getChromeVersion());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(6, deprecatedBackupTimestamp_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(7, getSigninScopedDeviceId());
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(8, lastUpdatedTimestamp_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getFeatureFields());
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getSharingFields());
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(11, getModel());
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(12, getManufacturer());
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(13, pulseIntervalInMinutes_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.DeviceInfoSpecifics parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.DeviceInfoSpecifics parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.DeviceInfoSpecifics parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.DeviceInfoSpecifics parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.DeviceInfoSpecifics parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.DeviceInfoSpecifics parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.DeviceInfoSpecifics parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.DeviceInfoSpecifics parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.DeviceInfoSpecifics parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.DeviceInfoSpecifics parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.DeviceInfoSpecifics prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Information about a device that is running a sync-enabled Chrome browser.  We
   * are mapping the per-client cache guid to more specific information about the
   * device.
   * </pre>
   *
   * Protobuf type {@code sync_pb.DeviceInfoSpecifics}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.DeviceInfoSpecifics, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.DeviceInfoSpecifics)
      org.chromium.components.sync.protocol.DeviceInfoSpecificsOrBuilder {
    // Construct using org.chromium.components.sync.protocol.DeviceInfoSpecifics.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The cache_guid created to identify a sync client on this device.
     * </pre>
     *
     * <code>optional string cache_guid = 1;</code>
     */
    public boolean hasCacheGuid() {
      return instance.hasCacheGuid();
    }
    /**
     * <pre>
     * The cache_guid created to identify a sync client on this device.
     * </pre>
     *
     * <code>optional string cache_guid = 1;</code>
     */
    public java.lang.String getCacheGuid() {
      return instance.getCacheGuid();
    }
    /**
     * <pre>
     * The cache_guid created to identify a sync client on this device.
     * </pre>
     *
     * <code>optional string cache_guid = 1;</code>
     */
    public com.google.protobuf.ByteString
        getCacheGuidBytes() {
      return instance.getCacheGuidBytes();
    }
    /**
     * <pre>
     * The cache_guid created to identify a sync client on this device.
     * </pre>
     *
     * <code>optional string cache_guid = 1;</code>
     */
    public Builder setCacheGuid(
        java.lang.String value) {
      copyOnWrite();
      instance.setCacheGuid(value);
      return this;
    }
    /**
     * <pre>
     * The cache_guid created to identify a sync client on this device.
     * </pre>
     *
     * <code>optional string cache_guid = 1;</code>
     */
    public Builder clearCacheGuid() {
      copyOnWrite();
      instance.clearCacheGuid();
      return this;
    }
    /**
     * <pre>
     * The cache_guid created to identify a sync client on this device.
     * </pre>
     *
     * <code>optional string cache_guid = 1;</code>
     */
    public Builder setCacheGuidBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCacheGuidBytes(value);
      return this;
    }

    /**
     * <pre>
     * A non-unique but human readable name to describe this client.
     * </pre>
     *
     * <code>optional string client_name = 2;</code>
     */
    public boolean hasClientName() {
      return instance.hasClientName();
    }
    /**
     * <pre>
     * A non-unique but human readable name to describe this client.
     * </pre>
     *
     * <code>optional string client_name = 2;</code>
     */
    public java.lang.String getClientName() {
      return instance.getClientName();
    }
    /**
     * <pre>
     * A non-unique but human readable name to describe this client.
     * </pre>
     *
     * <code>optional string client_name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getClientNameBytes() {
      return instance.getClientNameBytes();
    }
    /**
     * <pre>
     * A non-unique but human readable name to describe this client.
     * </pre>
     *
     * <code>optional string client_name = 2;</code>
     */
    public Builder setClientName(
        java.lang.String value) {
      copyOnWrite();
      instance.setClientName(value);
      return this;
    }
    /**
     * <pre>
     * A non-unique but human readable name to describe this client.
     * </pre>
     *
     * <code>optional string client_name = 2;</code>
     */
    public Builder clearClientName() {
      copyOnWrite();
      instance.clearClientName();
      return this;
    }
    /**
     * <pre>
     * A non-unique but human readable name to describe this client.
     * </pre>
     *
     * <code>optional string client_name = 2;</code>
     */
    public Builder setClientNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setClientNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * The platform of the device.
     * </pre>
     *
     * <code>optional .sync_pb.SyncEnums.DeviceType device_type = 3;</code>
     */
    public boolean hasDeviceType() {
      return instance.hasDeviceType();
    }
    /**
     * <pre>
     * The platform of the device.
     * </pre>
     *
     * <code>optional .sync_pb.SyncEnums.DeviceType device_type = 3;</code>
     */
    public org.chromium.components.sync.protocol.SyncEnums.DeviceType getDeviceType() {
      return instance.getDeviceType();
    }
    /**
     * <pre>
     * The platform of the device.
     * </pre>
     *
     * <code>optional .sync_pb.SyncEnums.DeviceType device_type = 3;</code>
     */
    public Builder setDeviceType(org.chromium.components.sync.protocol.SyncEnums.DeviceType value) {
      copyOnWrite();
      instance.setDeviceType(value);
      return this;
    }
    /**
     * <pre>
     * The platform of the device.
     * </pre>
     *
     * <code>optional .sync_pb.SyncEnums.DeviceType device_type = 3;</code>
     */
    public Builder clearDeviceType() {
      copyOnWrite();
      instance.clearDeviceType();
      return this;
    }

    /**
     * <pre>
     * The UserAgent used when contacting the Chrome Sync server.
     * </pre>
     *
     * <code>optional string sync_user_agent = 4;</code>
     */
    public boolean hasSyncUserAgent() {
      return instance.hasSyncUserAgent();
    }
    /**
     * <pre>
     * The UserAgent used when contacting the Chrome Sync server.
     * </pre>
     *
     * <code>optional string sync_user_agent = 4;</code>
     */
    public java.lang.String getSyncUserAgent() {
      return instance.getSyncUserAgent();
    }
    /**
     * <pre>
     * The UserAgent used when contacting the Chrome Sync server.
     * </pre>
     *
     * <code>optional string sync_user_agent = 4;</code>
     */
    public com.google.protobuf.ByteString
        getSyncUserAgentBytes() {
      return instance.getSyncUserAgentBytes();
    }
    /**
     * <pre>
     * The UserAgent used when contacting the Chrome Sync server.
     * </pre>
     *
     * <code>optional string sync_user_agent = 4;</code>
     */
    public Builder setSyncUserAgent(
        java.lang.String value) {
      copyOnWrite();
      instance.setSyncUserAgent(value);
      return this;
    }
    /**
     * <pre>
     * The UserAgent used when contacting the Chrome Sync server.
     * </pre>
     *
     * <code>optional string sync_user_agent = 4;</code>
     */
    public Builder clearSyncUserAgent() {
      copyOnWrite();
      instance.clearSyncUserAgent();
      return this;
    }
    /**
     * <pre>
     * The UserAgent used when contacting the Chrome Sync server.
     * </pre>
     *
     * <code>optional string sync_user_agent = 4;</code>
     */
    public Builder setSyncUserAgentBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setSyncUserAgentBytes(value);
      return this;
    }

    /**
     * <pre>
     * The Chrome instance's version.  Updated (if necessary) on every startup.
     * </pre>
     *
     * <code>optional string chrome_version = 5;</code>
     */
    public boolean hasChromeVersion() {
      return instance.hasChromeVersion();
    }
    /**
     * <pre>
     * The Chrome instance's version.  Updated (if necessary) on every startup.
     * </pre>
     *
     * <code>optional string chrome_version = 5;</code>
     */
    public java.lang.String getChromeVersion() {
      return instance.getChromeVersion();
    }
    /**
     * <pre>
     * The Chrome instance's version.  Updated (if necessary) on every startup.
     * </pre>
     *
     * <code>optional string chrome_version = 5;</code>
     */
    public com.google.protobuf.ByteString
        getChromeVersionBytes() {
      return instance.getChromeVersionBytes();
    }
    /**
     * <pre>
     * The Chrome instance's version.  Updated (if necessary) on every startup.
     * </pre>
     *
     * <code>optional string chrome_version = 5;</code>
     */
    public Builder setChromeVersion(
        java.lang.String value) {
      copyOnWrite();
      instance.setChromeVersion(value);
      return this;
    }
    /**
     * <pre>
     * The Chrome instance's version.  Updated (if necessary) on every startup.
     * </pre>
     *
     * <code>optional string chrome_version = 5;</code>
     */
    public Builder clearChromeVersion() {
      copyOnWrite();
      instance.clearChromeVersion();
      return this;
    }
    /**
     * <pre>
     * The Chrome instance's version.  Updated (if necessary) on every startup.
     * </pre>
     *
     * <code>optional string chrome_version = 5;</code>
     */
    public Builder setChromeVersionBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setChromeVersionBytes(value);
      return this;
    }

    /**
     * <pre>
     * Last time when pre-sync data on the device was saved. The device can be
     * restored to state back to this time. In millisecond since UNIX epoch.
     * DEPRECATED in M50.
     * </pre>
     *
     * <code>optional int64 deprecated_backup_timestamp = 6 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasDeprecatedBackupTimestamp() {
      return instance.hasDeprecatedBackupTimestamp();
    }
    /**
     * <pre>
     * Last time when pre-sync data on the device was saved. The device can be
     * restored to state back to this time. In millisecond since UNIX epoch.
     * DEPRECATED in M50.
     * </pre>
     *
     * <code>optional int64 deprecated_backup_timestamp = 6 [deprecated = true];</code>
     */
    @java.lang.Deprecated public long getDeprecatedBackupTimestamp() {
      return instance.getDeprecatedBackupTimestamp();
    }
    /**
     * <pre>
     * Last time when pre-sync data on the device was saved. The device can be
     * restored to state back to this time. In millisecond since UNIX epoch.
     * DEPRECATED in M50.
     * </pre>
     *
     * <code>optional int64 deprecated_backup_timestamp = 6 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setDeprecatedBackupTimestamp(long value) {
      copyOnWrite();
      instance.setDeprecatedBackupTimestamp(value);
      return this;
    }
    /**
     * <pre>
     * Last time when pre-sync data on the device was saved. The device can be
     * restored to state back to this time. In millisecond since UNIX epoch.
     * DEPRECATED in M50.
     * </pre>
     *
     * <code>optional int64 deprecated_backup_timestamp = 6 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearDeprecatedBackupTimestamp() {
      copyOnWrite();
      instance.clearDeprecatedBackupTimestamp();
      return this;
    }

    /**
     * <pre>
     * Device_id that is stable until user signs out. This device_id is used for
     * annotating login scoped refresh token.
     * </pre>
     *
     * <code>optional string signin_scoped_device_id = 7;</code>
     */
    public boolean hasSigninScopedDeviceId() {
      return instance.hasSigninScopedDeviceId();
    }
    /**
     * <pre>
     * Device_id that is stable until user signs out. This device_id is used for
     * annotating login scoped refresh token.
     * </pre>
     *
     * <code>optional string signin_scoped_device_id = 7;</code>
     */
    public java.lang.String getSigninScopedDeviceId() {
      return instance.getSigninScopedDeviceId();
    }
    /**
     * <pre>
     * Device_id that is stable until user signs out. This device_id is used for
     * annotating login scoped refresh token.
     * </pre>
     *
     * <code>optional string signin_scoped_device_id = 7;</code>
     */
    public com.google.protobuf.ByteString
        getSigninScopedDeviceIdBytes() {
      return instance.getSigninScopedDeviceIdBytes();
    }
    /**
     * <pre>
     * Device_id that is stable until user signs out. This device_id is used for
     * annotating login scoped refresh token.
     * </pre>
     *
     * <code>optional string signin_scoped_device_id = 7;</code>
     */
    public Builder setSigninScopedDeviceId(
        java.lang.String value) {
      copyOnWrite();
      instance.setSigninScopedDeviceId(value);
      return this;
    }
    /**
     * <pre>
     * Device_id that is stable until user signs out. This device_id is used for
     * annotating login scoped refresh token.
     * </pre>
     *
     * <code>optional string signin_scoped_device_id = 7;</code>
     */
    public Builder clearSigninScopedDeviceId() {
      copyOnWrite();
      instance.clearSigninScopedDeviceId();
      return this;
    }
    /**
     * <pre>
     * Device_id that is stable until user signs out. This device_id is used for
     * annotating login scoped refresh token.
     * </pre>
     *
     * <code>optional string signin_scoped_device_id = 7;</code>
     */
    public Builder setSigninScopedDeviceIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setSigninScopedDeviceIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * This field is updated to be the current time periodically, and is also set
     * to the current time whenever another field changes. By examining the
     * difference between this field and the current time, it should be possible
     * to reason about the inactivity of any device that was syncing at one time.
     * </pre>
     *
     * <code>optional int64 last_updated_timestamp = 8;</code>
     */
    public boolean hasLastUpdatedTimestamp() {
      return instance.hasLastUpdatedTimestamp();
    }
    /**
     * <pre>
     * This field is updated to be the current time periodically, and is also set
     * to the current time whenever another field changes. By examining the
     * difference between this field and the current time, it should be possible
     * to reason about the inactivity of any device that was syncing at one time.
     * </pre>
     *
     * <code>optional int64 last_updated_timestamp = 8;</code>
     */
    public long getLastUpdatedTimestamp() {
      return instance.getLastUpdatedTimestamp();
    }
    /**
     * <pre>
     * This field is updated to be the current time periodically, and is also set
     * to the current time whenever another field changes. By examining the
     * difference between this field and the current time, it should be possible
     * to reason about the inactivity of any device that was syncing at one time.
     * </pre>
     *
     * <code>optional int64 last_updated_timestamp = 8;</code>
     */
    public Builder setLastUpdatedTimestamp(long value) {
      copyOnWrite();
      instance.setLastUpdatedTimestamp(value);
      return this;
    }
    /**
     * <pre>
     * This field is updated to be the current time periodically, and is also set
     * to the current time whenever another field changes. By examining the
     * difference between this field and the current time, it should be possible
     * to reason about the inactivity of any device that was syncing at one time.
     * </pre>
     *
     * <code>optional int64 last_updated_timestamp = 8;</code>
     */
    public Builder clearLastUpdatedTimestamp() {
      copyOnWrite();
      instance.clearLastUpdatedTimestamp();
      return this;
    }

    /**
     * <pre>
     * Device info fields that are specific to a feature. This is information that
     * can not be derived from the other fields in the proto and are not general
     * enough to be used by another feature.
     * </pre>
     *
     * <code>optional .sync_pb.FeatureSpecificFields feature_fields = 9;</code>
     */
    public boolean hasFeatureFields() {
      return instance.hasFeatureFields();
    }
    /**
     * <pre>
     * Device info fields that are specific to a feature. This is information that
     * can not be derived from the other fields in the proto and are not general
     * enough to be used by another feature.
     * </pre>
     *
     * <code>optional .sync_pb.FeatureSpecificFields feature_fields = 9;</code>
     */
    public org.chromium.components.sync.protocol.FeatureSpecificFields getFeatureFields() {
      return instance.getFeatureFields();
    }
    /**
     * <pre>
     * Device info fields that are specific to a feature. This is information that
     * can not be derived from the other fields in the proto and are not general
     * enough to be used by another feature.
     * </pre>
     *
     * <code>optional .sync_pb.FeatureSpecificFields feature_fields = 9;</code>
     */
    public Builder setFeatureFields(org.chromium.components.sync.protocol.FeatureSpecificFields value) {
      copyOnWrite();
      instance.setFeatureFields(value);
      return this;
      }
    /**
     * <pre>
     * Device info fields that are specific to a feature. This is information that
     * can not be derived from the other fields in the proto and are not general
     * enough to be used by another feature.
     * </pre>
     *
     * <code>optional .sync_pb.FeatureSpecificFields feature_fields = 9;</code>
     */
    public Builder setFeatureFields(
        org.chromium.components.sync.protocol.FeatureSpecificFields.Builder builderForValue) {
      copyOnWrite();
      instance.setFeatureFields(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Device info fields that are specific to a feature. This is information that
     * can not be derived from the other fields in the proto and are not general
     * enough to be used by another feature.
     * </pre>
     *
     * <code>optional .sync_pb.FeatureSpecificFields feature_fields = 9;</code>
     */
    public Builder mergeFeatureFields(org.chromium.components.sync.protocol.FeatureSpecificFields value) {
      copyOnWrite();
      instance.mergeFeatureFields(value);
      return this;
    }
    /**
     * <pre>
     * Device info fields that are specific to a feature. This is information that
     * can not be derived from the other fields in the proto and are not general
     * enough to be used by another feature.
     * </pre>
     *
     * <code>optional .sync_pb.FeatureSpecificFields feature_fields = 9;</code>
     */
    public Builder clearFeatureFields() {  copyOnWrite();
      instance.clearFeatureFields();
      return this;
    }

    /**
     * <pre>
     * Device specific information for Sharing feature.
     * </pre>
     *
     * <code>optional .sync_pb.SharingSpecificFields sharing_fields = 10;</code>
     */
    public boolean hasSharingFields() {
      return instance.hasSharingFields();
    }
    /**
     * <pre>
     * Device specific information for Sharing feature.
     * </pre>
     *
     * <code>optional .sync_pb.SharingSpecificFields sharing_fields = 10;</code>
     */
    public org.chromium.components.sync.protocol.SharingSpecificFields getSharingFields() {
      return instance.getSharingFields();
    }
    /**
     * <pre>
     * Device specific information for Sharing feature.
     * </pre>
     *
     * <code>optional .sync_pb.SharingSpecificFields sharing_fields = 10;</code>
     */
    public Builder setSharingFields(org.chromium.components.sync.protocol.SharingSpecificFields value) {
      copyOnWrite();
      instance.setSharingFields(value);
      return this;
      }
    /**
     * <pre>
     * Device specific information for Sharing feature.
     * </pre>
     *
     * <code>optional .sync_pb.SharingSpecificFields sharing_fields = 10;</code>
     */
    public Builder setSharingFields(
        org.chromium.components.sync.protocol.SharingSpecificFields.Builder builderForValue) {
      copyOnWrite();
      instance.setSharingFields(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Device specific information for Sharing feature.
     * </pre>
     *
     * <code>optional .sync_pb.SharingSpecificFields sharing_fields = 10;</code>
     */
    public Builder mergeSharingFields(org.chromium.components.sync.protocol.SharingSpecificFields value) {
      copyOnWrite();
      instance.mergeSharingFields(value);
      return this;
    }
    /**
     * <pre>
     * Device specific information for Sharing feature.
     * </pre>
     *
     * <code>optional .sync_pb.SharingSpecificFields sharing_fields = 10;</code>
     */
    public Builder clearSharingFields() {  copyOnWrite();
      instance.clearSharingFields();
      return this;
    }

    /**
     * <pre>
     * Model of device.
     * </pre>
     *
     * <code>optional string model = 11;</code>
     */
    public boolean hasModel() {
      return instance.hasModel();
    }
    /**
     * <pre>
     * Model of device.
     * </pre>
     *
     * <code>optional string model = 11;</code>
     */
    public java.lang.String getModel() {
      return instance.getModel();
    }
    /**
     * <pre>
     * Model of device.
     * </pre>
     *
     * <code>optional string model = 11;</code>
     */
    public com.google.protobuf.ByteString
        getModelBytes() {
      return instance.getModelBytes();
    }
    /**
     * <pre>
     * Model of device.
     * </pre>
     *
     * <code>optional string model = 11;</code>
     */
    public Builder setModel(
        java.lang.String value) {
      copyOnWrite();
      instance.setModel(value);
      return this;
    }
    /**
     * <pre>
     * Model of device.
     * </pre>
     *
     * <code>optional string model = 11;</code>
     */
    public Builder clearModel() {
      copyOnWrite();
      instance.clearModel();
      return this;
    }
    /**
     * <pre>
     * Model of device.
     * </pre>
     *
     * <code>optional string model = 11;</code>
     */
    public Builder setModelBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setModelBytes(value);
      return this;
    }

    /**
     * <pre>
     * Name of device manufacturer.
     * </pre>
     *
     * <code>optional string manufacturer = 12;</code>
     */
    public boolean hasManufacturer() {
      return instance.hasManufacturer();
    }
    /**
     * <pre>
     * Name of device manufacturer.
     * </pre>
     *
     * <code>optional string manufacturer = 12;</code>
     */
    public java.lang.String getManufacturer() {
      return instance.getManufacturer();
    }
    /**
     * <pre>
     * Name of device manufacturer.
     * </pre>
     *
     * <code>optional string manufacturer = 12;</code>
     */
    public com.google.protobuf.ByteString
        getManufacturerBytes() {
      return instance.getManufacturerBytes();
    }
    /**
     * <pre>
     * Name of device manufacturer.
     * </pre>
     *
     * <code>optional string manufacturer = 12;</code>
     */
    public Builder setManufacturer(
        java.lang.String value) {
      copyOnWrite();
      instance.setManufacturer(value);
      return this;
    }
    /**
     * <pre>
     * Name of device manufacturer.
     * </pre>
     *
     * <code>optional string manufacturer = 12;</code>
     */
    public Builder clearManufacturer() {
      copyOnWrite();
      instance.clearManufacturer();
      return this;
    }
    /**
     * <pre>
     * Name of device manufacturer.
     * </pre>
     *
     * <code>optional string manufacturer = 12;</code>
     */
    public Builder setManufacturerBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setManufacturerBytes(value);
      return this;
    }

    /**
     * <pre>
     * The interval in minutes with which |last_updated_timestamp| is updated to
     * the sync servers if online and while sync is actively running (e.g.
     * excludes backgrounded apps on Android). Introduced in M81. The legacy
     * default was 1 day.
     * </pre>
     *
     * <code>optional int32 pulse_interval_in_minutes = 13;</code>
     */
    public boolean hasPulseIntervalInMinutes() {
      return instance.hasPulseIntervalInMinutes();
    }
    /**
     * <pre>
     * The interval in minutes with which |last_updated_timestamp| is updated to
     * the sync servers if online and while sync is actively running (e.g.
     * excludes backgrounded apps on Android). Introduced in M81. The legacy
     * default was 1 day.
     * </pre>
     *
     * <code>optional int32 pulse_interval_in_minutes = 13;</code>
     */
    public int getPulseIntervalInMinutes() {
      return instance.getPulseIntervalInMinutes();
    }
    /**
     * <pre>
     * The interval in minutes with which |last_updated_timestamp| is updated to
     * the sync servers if online and while sync is actively running (e.g.
     * excludes backgrounded apps on Android). Introduced in M81. The legacy
     * default was 1 day.
     * </pre>
     *
     * <code>optional int32 pulse_interval_in_minutes = 13;</code>
     */
    public Builder setPulseIntervalInMinutes(int value) {
      copyOnWrite();
      instance.setPulseIntervalInMinutes(value);
      return this;
    }
    /**
     * <pre>
     * The interval in minutes with which |last_updated_timestamp| is updated to
     * the sync servers if online and while sync is actively running (e.g.
     * excludes backgrounded apps on Android). Introduced in M81. The legacy
     * default was 1 day.
     * </pre>
     *
     * <code>optional int32 pulse_interval_in_minutes = 13;</code>
     */
    public Builder clearPulseIntervalInMinutes() {
      copyOnWrite();
      instance.clearPulseIntervalInMinutes();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.DeviceInfoSpecifics)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.DeviceInfoSpecifics();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.DeviceInfoSpecifics other = (org.chromium.components.sync.protocol.DeviceInfoSpecifics) arg1;
        cacheGuid_ = visitor.visitString(
            hasCacheGuid(), cacheGuid_,
            other.hasCacheGuid(), other.cacheGuid_);
        clientName_ = visitor.visitString(
            hasClientName(), clientName_,
            other.hasClientName(), other.clientName_);
        deviceType_ = visitor.visitInt(hasDeviceType(), deviceType_,
            other.hasDeviceType(), other.deviceType_);
        syncUserAgent_ = visitor.visitString(
            hasSyncUserAgent(), syncUserAgent_,
            other.hasSyncUserAgent(), other.syncUserAgent_);
        chromeVersion_ = visitor.visitString(
            hasChromeVersion(), chromeVersion_,
            other.hasChromeVersion(), other.chromeVersion_);
        deprecatedBackupTimestamp_ = visitor.visitLong(
            hasDeprecatedBackupTimestamp(), deprecatedBackupTimestamp_,
            other.hasDeprecatedBackupTimestamp(), other.deprecatedBackupTimestamp_);
        signinScopedDeviceId_ = visitor.visitString(
            hasSigninScopedDeviceId(), signinScopedDeviceId_,
            other.hasSigninScopedDeviceId(), other.signinScopedDeviceId_);
        lastUpdatedTimestamp_ = visitor.visitLong(
            hasLastUpdatedTimestamp(), lastUpdatedTimestamp_,
            other.hasLastUpdatedTimestamp(), other.lastUpdatedTimestamp_);
        featureFields_ = visitor.visitMessage(featureFields_, other.featureFields_);
        sharingFields_ = visitor.visitMessage(sharingFields_, other.sharingFields_);
        model_ = visitor.visitString(
            hasModel(), model_,
            other.hasModel(), other.model_);
        manufacturer_ = visitor.visitString(
            hasManufacturer(), manufacturer_,
            other.hasManufacturer(), other.manufacturer_);
        pulseIntervalInMinutes_ = visitor.visitInt(
            hasPulseIntervalInMinutes(), pulseIntervalInMinutes_,
            other.hasPulseIntervalInMinutes(), other.pulseIntervalInMinutes_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                bitField0_ |= 0x00000001;
                cacheGuid_ = s;
                break;
              }
              case 18: {
                String s = input.readString();
                bitField0_ |= 0x00000002;
                clientName_ = s;
                break;
              }
              case 24: {
                int rawValue = input.readEnum();
                org.chromium.components.sync.protocol.SyncEnums.DeviceType value = org.chromium.components.sync.protocol.SyncEnums.DeviceType.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(3, rawValue);
                } else {
                  bitField0_ |= 0x00000004;
                  deviceType_ = rawValue;
                }
                break;
              }
              case 34: {
                String s = input.readString();
                bitField0_ |= 0x00000008;
                syncUserAgent_ = s;
                break;
              }
              case 42: {
                String s = input.readString();
                bitField0_ |= 0x00000010;
                chromeVersion_ = s;
                break;
              }
              case 48: {
                bitField0_ |= 0x00000020;
                deprecatedBackupTimestamp_ = input.readInt64();
                break;
              }
              case 58: {
                String s = input.readString();
                bitField0_ |= 0x00000040;
                signinScopedDeviceId_ = s;
                break;
              }
              case 64: {
                bitField0_ |= 0x00000080;
                lastUpdatedTimestamp_ = input.readInt64();
                break;
              }
              case 74: {
                org.chromium.components.sync.protocol.FeatureSpecificFields.Builder subBuilder = null;
                if (((bitField0_ & 0x00000100) == 0x00000100)) {
                  subBuilder = featureFields_.toBuilder();
                }
                featureFields_ = input.readMessage(org.chromium.components.sync.protocol.FeatureSpecificFields.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(featureFields_);
                  featureFields_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000100;
                break;
              }
              case 82: {
                org.chromium.components.sync.protocol.SharingSpecificFields.Builder subBuilder = null;
                if (((bitField0_ & 0x00000200) == 0x00000200)) {
                  subBuilder = sharingFields_.toBuilder();
                }
                sharingFields_ = input.readMessage(org.chromium.components.sync.protocol.SharingSpecificFields.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(sharingFields_);
                  sharingFields_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000200;
                break;
              }
              case 90: {
                String s = input.readString();
                bitField0_ |= 0x00000400;
                model_ = s;
                break;
              }
              case 98: {
                String s = input.readString();
                bitField0_ |= 0x00000800;
                manufacturer_ = s;
                break;
              }
              case 104: {
                bitField0_ |= 0x00001000;
                pulseIntervalInMinutes_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.DeviceInfoSpecifics.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.DeviceInfoSpecifics)
  private static final org.chromium.components.sync.protocol.DeviceInfoSpecifics DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new DeviceInfoSpecifics();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.DeviceInfoSpecifics getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<DeviceInfoSpecifics> PARSER;

  public static com.google.protobuf.Parser<DeviceInfoSpecifics> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

