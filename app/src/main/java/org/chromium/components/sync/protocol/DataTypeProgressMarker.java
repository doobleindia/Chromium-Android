// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync.proto

package org.chromium.components.sync.protocol;

/**
 * Protobuf type {@code sync_pb.DataTypeProgressMarker}
 */
public  final class DataTypeProgressMarker extends
    com.google.protobuf.GeneratedMessageLite<
        DataTypeProgressMarker, DataTypeProgressMarker.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.DataTypeProgressMarker)
    DataTypeProgressMarkerOrBuilder {
  private DataTypeProgressMarker() {
    token_ = com.google.protobuf.ByteString.EMPTY;
    notificationHint_ = "";
  }
  private int bitField0_;
  public static final int DATA_TYPE_ID_FIELD_NUMBER = 1;
  private int dataTypeId_;
  /**
   * <pre>
   * An integer identifying the data type whose progress is tracked by this
   * marker.  The legitimate values of this field correspond to the protobuf
   * field numbers of all EntitySpecifics fields supported by the server.
   * These values are externally declared in per-datatype .proto files.
   * </pre>
   *
   * <code>optional int32 data_type_id = 1;</code>
   */
  public boolean hasDataTypeId() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * An integer identifying the data type whose progress is tracked by this
   * marker.  The legitimate values of this field correspond to the protobuf
   * field numbers of all EntitySpecifics fields supported by the server.
   * These values are externally declared in per-datatype .proto files.
   * </pre>
   *
   * <code>optional int32 data_type_id = 1;</code>
   */
  public int getDataTypeId() {
    return dataTypeId_;
  }
  /**
   * <pre>
   * An integer identifying the data type whose progress is tracked by this
   * marker.  The legitimate values of this field correspond to the protobuf
   * field numbers of all EntitySpecifics fields supported by the server.
   * These values are externally declared in per-datatype .proto files.
   * </pre>
   *
   * <code>optional int32 data_type_id = 1;</code>
   */
  private void setDataTypeId(int value) {
    bitField0_ |= 0x00000001;
    dataTypeId_ = value;
  }
  /**
   * <pre>
   * An integer identifying the data type whose progress is tracked by this
   * marker.  The legitimate values of this field correspond to the protobuf
   * field numbers of all EntitySpecifics fields supported by the server.
   * These values are externally declared in per-datatype .proto files.
   * </pre>
   *
   * <code>optional int32 data_type_id = 1;</code>
   */
  private void clearDataTypeId() {
    bitField0_ = (bitField0_ & ~0x00000001);
    dataTypeId_ = 0;
  }

  public static final int TOKEN_FIELD_NUMBER = 2;
  private com.google.protobuf.ByteString token_;
  /**
   * <pre>
   * An opaque-to-the-client sequence of bytes that the server may interpret
   * as an indicator of the client's knowledge state.  If this is empty or
   * omitted by the client, it indicates that the client is initiating a
   * a first-time sync of this datatype.  Otherwise, clients must supply a
   * value previously returned by the server in an earlier GetUpdatesResponse.
   * These values are not comparable or generable on the client.
   * The opaque semantics of this field are to afford server implementations
   * some flexibility in implementing progress tracking.  For instance,
   * a server implementation built on top of a distributed storage service --
   * or multiple heterogenous such services -- might need to supply a vector
   * of totally ordered monotonic update timestamps, rather than a single
   * monotonically increasing value.  Other optimizations may also be
   * possible if the server is allowed to embed arbitrary information in
   * the progress token.
   * Server implementations should keep the size of these tokens relatively
   * small, on the order of tens of bytes, and they should remain small
   * regardless of the number of items synchronized.  (A possible bad server
   * implementation would be for progress_token to contain a list of all the
   * items ever sent to the client.  Servers shouldn't do this.)
   * </pre>
   *
   * <code>optional bytes token = 2;</code>
   */
  public boolean hasToken() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * An opaque-to-the-client sequence of bytes that the server may interpret
   * as an indicator of the client's knowledge state.  If this is empty or
   * omitted by the client, it indicates that the client is initiating a
   * a first-time sync of this datatype.  Otherwise, clients must supply a
   * value previously returned by the server in an earlier GetUpdatesResponse.
   * These values are not comparable or generable on the client.
   * The opaque semantics of this field are to afford server implementations
   * some flexibility in implementing progress tracking.  For instance,
   * a server implementation built on top of a distributed storage service --
   * or multiple heterogenous such services -- might need to supply a vector
   * of totally ordered monotonic update timestamps, rather than a single
   * monotonically increasing value.  Other optimizations may also be
   * possible if the server is allowed to embed arbitrary information in
   * the progress token.
   * Server implementations should keep the size of these tokens relatively
   * small, on the order of tens of bytes, and they should remain small
   * regardless of the number of items synchronized.  (A possible bad server
   * implementation would be for progress_token to contain a list of all the
   * items ever sent to the client.  Servers shouldn't do this.)
   * </pre>
   *
   * <code>optional bytes token = 2;</code>
   */
  public com.google.protobuf.ByteString getToken() {
    return token_;
  }
  /**
   * <pre>
   * An opaque-to-the-client sequence of bytes that the server may interpret
   * as an indicator of the client's knowledge state.  If this is empty or
   * omitted by the client, it indicates that the client is initiating a
   * a first-time sync of this datatype.  Otherwise, clients must supply a
   * value previously returned by the server in an earlier GetUpdatesResponse.
   * These values are not comparable or generable on the client.
   * The opaque semantics of this field are to afford server implementations
   * some flexibility in implementing progress tracking.  For instance,
   * a server implementation built on top of a distributed storage service --
   * or multiple heterogenous such services -- might need to supply a vector
   * of totally ordered monotonic update timestamps, rather than a single
   * monotonically increasing value.  Other optimizations may also be
   * possible if the server is allowed to embed arbitrary information in
   * the progress token.
   * Server implementations should keep the size of these tokens relatively
   * small, on the order of tens of bytes, and they should remain small
   * regardless of the number of items synchronized.  (A possible bad server
   * implementation would be for progress_token to contain a list of all the
   * items ever sent to the client.  Servers shouldn't do this.)
   * </pre>
   *
   * <code>optional bytes token = 2;</code>
   */
  private void setToken(com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    token_ = value;
  }
  /**
   * <pre>
   * An opaque-to-the-client sequence of bytes that the server may interpret
   * as an indicator of the client's knowledge state.  If this is empty or
   * omitted by the client, it indicates that the client is initiating a
   * a first-time sync of this datatype.  Otherwise, clients must supply a
   * value previously returned by the server in an earlier GetUpdatesResponse.
   * These values are not comparable or generable on the client.
   * The opaque semantics of this field are to afford server implementations
   * some flexibility in implementing progress tracking.  For instance,
   * a server implementation built on top of a distributed storage service --
   * or multiple heterogenous such services -- might need to supply a vector
   * of totally ordered monotonic update timestamps, rather than a single
   * monotonically increasing value.  Other optimizations may also be
   * possible if the server is allowed to embed arbitrary information in
   * the progress token.
   * Server implementations should keep the size of these tokens relatively
   * small, on the order of tens of bytes, and they should remain small
   * regardless of the number of items synchronized.  (A possible bad server
   * implementation would be for progress_token to contain a list of all the
   * items ever sent to the client.  Servers shouldn't do this.)
   * </pre>
   *
   * <code>optional bytes token = 2;</code>
   */
  private void clearToken() {
    bitField0_ = (bitField0_ & ~0x00000002);
    token_ = getDefaultInstance().getToken();
  }

  public static final int TIMESTAMP_TOKEN_FOR_MIGRATION_FIELD_NUMBER = 3;
  private long timestampTokenForMigration_;
  /**
   * <pre>
   * Clients that previously downloaded updates synced using the timestamp based
   * progress tracking mechanism, but which wish to switch over to the opaque
   * token mechanism can set this field in a GetUpdatesMessage.  The server
   * will perform a get updates operation as normal from the indicated
   * timestamp, and return only an opaque progress token.
   * </pre>
   *
   * <code>optional int64 timestamp_token_for_migration = 3 [deprecated = true];</code>
   */
  @java.lang.Deprecated public boolean hasTimestampTokenForMigration() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * Clients that previously downloaded updates synced using the timestamp based
   * progress tracking mechanism, but which wish to switch over to the opaque
   * token mechanism can set this field in a GetUpdatesMessage.  The server
   * will perform a get updates operation as normal from the indicated
   * timestamp, and return only an opaque progress token.
   * </pre>
   *
   * <code>optional int64 timestamp_token_for_migration = 3 [deprecated = true];</code>
   */
  @java.lang.Deprecated public long getTimestampTokenForMigration() {
    return timestampTokenForMigration_;
  }
  /**
   * <pre>
   * Clients that previously downloaded updates synced using the timestamp based
   * progress tracking mechanism, but which wish to switch over to the opaque
   * token mechanism can set this field in a GetUpdatesMessage.  The server
   * will perform a get updates operation as normal from the indicated
   * timestamp, and return only an opaque progress token.
   * </pre>
   *
   * <code>optional int64 timestamp_token_for_migration = 3 [deprecated = true];</code>
   */
  private void setTimestampTokenForMigration(long value) {
    bitField0_ |= 0x00000004;
    timestampTokenForMigration_ = value;
  }
  /**
   * <pre>
   * Clients that previously downloaded updates synced using the timestamp based
   * progress tracking mechanism, but which wish to switch over to the opaque
   * token mechanism can set this field in a GetUpdatesMessage.  The server
   * will perform a get updates operation as normal from the indicated
   * timestamp, and return only an opaque progress token.
   * </pre>
   *
   * <code>optional int64 timestamp_token_for_migration = 3 [deprecated = true];</code>
   */
  private void clearTimestampTokenForMigration() {
    bitField0_ = (bitField0_ & ~0x00000004);
    timestampTokenForMigration_ = 0L;
  }

  public static final int NOTIFICATION_HINT_FIELD_NUMBER = 4;
  private java.lang.String notificationHint_;
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Deprecated in M29.  We should use the repeated field version in the
   * PerClientTypeState instead.
   * </pre>
   *
   * <code>optional string notification_hint = 4 [deprecated = true];</code>
   */
  @java.lang.Deprecated public boolean hasNotificationHint() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Deprecated in M29.  We should use the repeated field version in the
   * PerClientTypeState instead.
   * </pre>
   *
   * <code>optional string notification_hint = 4 [deprecated = true];</code>
   */
  @java.lang.Deprecated public java.lang.String getNotificationHint() {
    return notificationHint_;
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Deprecated in M29.  We should use the repeated field version in the
   * PerClientTypeState instead.
   * </pre>
   *
   * <code>optional string notification_hint = 4 [deprecated = true];</code>
   */
  @java.lang.Deprecated public com.google.protobuf.ByteString
      getNotificationHintBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(notificationHint_);
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Deprecated in M29.  We should use the repeated field version in the
   * PerClientTypeState instead.
   * </pre>
   *
   * <code>optional string notification_hint = 4 [deprecated = true];</code>
   */
  private void setNotificationHint(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    notificationHint_ = value;
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Deprecated in M29.  We should use the repeated field version in the
   * PerClientTypeState instead.
   * </pre>
   *
   * <code>optional string notification_hint = 4 [deprecated = true];</code>
   */
  private void clearNotificationHint() {
    bitField0_ = (bitField0_ & ~0x00000008);
    notificationHint_ = getDefaultInstance().getNotificationHint();
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Deprecated in M29.  We should use the repeated field version in the
   * PerClientTypeState instead.
   * </pre>
   *
   * <code>optional string notification_hint = 4 [deprecated = true];</code>
   */
  private void setNotificationHintBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    notificationHint_ = value.toStringUtf8();
  }

  public static final int GET_UPDATE_TRIGGERS_FIELD_NUMBER = 5;
  private org.chromium.components.sync.protocol.GetUpdateTriggers getUpdateTriggers_;
  /**
   * <pre>
   * This field will be included only in GetUpdates with origin GU_TRIGGER.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;</code>
   */
  public boolean hasGetUpdateTriggers() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <pre>
   * This field will be included only in GetUpdates with origin GU_TRIGGER.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;</code>
   */
  public org.chromium.components.sync.protocol.GetUpdateTriggers getGetUpdateTriggers() {
    return getUpdateTriggers_ == null ? org.chromium.components.sync.protocol.GetUpdateTriggers.getDefaultInstance() : getUpdateTriggers_;
  }
  /**
   * <pre>
   * This field will be included only in GetUpdates with origin GU_TRIGGER.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;</code>
   */
  private void setGetUpdateTriggers(org.chromium.components.sync.protocol.GetUpdateTriggers value) {
    if (value == null) {
      throw new NullPointerException();
    }
    getUpdateTriggers_ = value;
    bitField0_ |= 0x00000010;
    }
  /**
   * <pre>
   * This field will be included only in GetUpdates with origin GU_TRIGGER.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;</code>
   */
  private void setGetUpdateTriggers(
      org.chromium.components.sync.protocol.GetUpdateTriggers.Builder builderForValue) {
    getUpdateTriggers_ = builderForValue.build();
    bitField0_ |= 0x00000010;
  }
  /**
   * <pre>
   * This field will be included only in GetUpdates with origin GU_TRIGGER.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;</code>
   */
  private void mergeGetUpdateTriggers(org.chromium.components.sync.protocol.GetUpdateTriggers value) {
    if (getUpdateTriggers_ != null &&
        getUpdateTriggers_ != org.chromium.components.sync.protocol.GetUpdateTriggers.getDefaultInstance()) {
      getUpdateTriggers_ =
        org.chromium.components.sync.protocol.GetUpdateTriggers.newBuilder(getUpdateTriggers_).mergeFrom(value).buildPartial();
    } else {
      getUpdateTriggers_ = value;
    }
    bitField0_ |= 0x00000010;
  }
  /**
   * <pre>
   * This field will be included only in GetUpdates with origin GU_TRIGGER.
   * </pre>
   *
   * <code>optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;</code>
   */
  private void clearGetUpdateTriggers() {  getUpdateTriggers_ = null;
    bitField0_ = (bitField0_ & ~0x00000010);
  }

  public static final int GC_DIRECTIVE_FIELD_NUMBER = 6;
  private org.chromium.components.sync.protocol.GarbageCollectionDirective gcDirective_;
  /**
   * <pre>
   * The garbage collection directive for this data type.  The client should
   * purge items locally based on this directive.  Since this directive is
   * designed to be sent from server only, the client should persist it locally
   * as needed and avoid sending it to the server.
   * </pre>
   *
   * <code>optional .sync_pb.GarbageCollectionDirective gc_directive = 6;</code>
   */
  public boolean hasGcDirective() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * The garbage collection directive for this data type.  The client should
   * purge items locally based on this directive.  Since this directive is
   * designed to be sent from server only, the client should persist it locally
   * as needed and avoid sending it to the server.
   * </pre>
   *
   * <code>optional .sync_pb.GarbageCollectionDirective gc_directive = 6;</code>
   */
  public org.chromium.components.sync.protocol.GarbageCollectionDirective getGcDirective() {
    return gcDirective_ == null ? org.chromium.components.sync.protocol.GarbageCollectionDirective.getDefaultInstance() : gcDirective_;
  }
  /**
   * <pre>
   * The garbage collection directive for this data type.  The client should
   * purge items locally based on this directive.  Since this directive is
   * designed to be sent from server only, the client should persist it locally
   * as needed and avoid sending it to the server.
   * </pre>
   *
   * <code>optional .sync_pb.GarbageCollectionDirective gc_directive = 6;</code>
   */
  private void setGcDirective(org.chromium.components.sync.protocol.GarbageCollectionDirective value) {
    if (value == null) {
      throw new NullPointerException();
    }
    gcDirective_ = value;
    bitField0_ |= 0x00000020;
    }
  /**
   * <pre>
   * The garbage collection directive for this data type.  The client should
   * purge items locally based on this directive.  Since this directive is
   * designed to be sent from server only, the client should persist it locally
   * as needed and avoid sending it to the server.
   * </pre>
   *
   * <code>optional .sync_pb.GarbageCollectionDirective gc_directive = 6;</code>
   */
  private void setGcDirective(
      org.chromium.components.sync.protocol.GarbageCollectionDirective.Builder builderForValue) {
    gcDirective_ = builderForValue.build();
    bitField0_ |= 0x00000020;
  }
  /**
   * <pre>
   * The garbage collection directive for this data type.  The client should
   * purge items locally based on this directive.  Since this directive is
   * designed to be sent from server only, the client should persist it locally
   * as needed and avoid sending it to the server.
   * </pre>
   *
   * <code>optional .sync_pb.GarbageCollectionDirective gc_directive = 6;</code>
   */
  private void mergeGcDirective(org.chromium.components.sync.protocol.GarbageCollectionDirective value) {
    if (gcDirective_ != null &&
        gcDirective_ != org.chromium.components.sync.protocol.GarbageCollectionDirective.getDefaultInstance()) {
      gcDirective_ =
        org.chromium.components.sync.protocol.GarbageCollectionDirective.newBuilder(gcDirective_).mergeFrom(value).buildPartial();
    } else {
      gcDirective_ = value;
    }
    bitField0_ |= 0x00000020;
  }
  /**
   * <pre>
   * The garbage collection directive for this data type.  The client should
   * purge items locally based on this directive.  Since this directive is
   * designed to be sent from server only, the client should persist it locally
   * as needed and avoid sending it to the server.
   * </pre>
   *
   * <code>optional .sync_pb.GarbageCollectionDirective gc_directive = 6;</code>
   */
  private void clearGcDirective() {  gcDirective_ = null;
    bitField0_ = (bitField0_ & ~0x00000020);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, dataTypeId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeBytes(2, token_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt64(3, timestampTokenForMigration_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeString(4, getNotificationHint());
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeMessage(5, getGetUpdateTriggers());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeMessage(6, getGcDirective());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, dataTypeId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(2, token_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(3, timestampTokenForMigration_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(4, getNotificationHint());
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getGetUpdateTriggers());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getGcDirective());
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.DataTypeProgressMarker parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.DataTypeProgressMarker parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.DataTypeProgressMarker parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.DataTypeProgressMarker parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.DataTypeProgressMarker parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.DataTypeProgressMarker parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.DataTypeProgressMarker parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.DataTypeProgressMarker parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.DataTypeProgressMarker parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.DataTypeProgressMarker parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.DataTypeProgressMarker prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code sync_pb.DataTypeProgressMarker}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.DataTypeProgressMarker, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.DataTypeProgressMarker)
      org.chromium.components.sync.protocol.DataTypeProgressMarkerOrBuilder {
    // Construct using org.chromium.components.sync.protocol.DataTypeProgressMarker.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * An integer identifying the data type whose progress is tracked by this
     * marker.  The legitimate values of this field correspond to the protobuf
     * field numbers of all EntitySpecifics fields supported by the server.
     * These values are externally declared in per-datatype .proto files.
     * </pre>
     *
     * <code>optional int32 data_type_id = 1;</code>
     */
    public boolean hasDataTypeId() {
      return instance.hasDataTypeId();
    }
    /**
     * <pre>
     * An integer identifying the data type whose progress is tracked by this
     * marker.  The legitimate values of this field correspond to the protobuf
     * field numbers of all EntitySpecifics fields supported by the server.
     * These values are externally declared in per-datatype .proto files.
     * </pre>
     *
     * <code>optional int32 data_type_id = 1;</code>
     */
    public int getDataTypeId() {
      return instance.getDataTypeId();
    }
    /**
     * <pre>
     * An integer identifying the data type whose progress is tracked by this
     * marker.  The legitimate values of this field correspond to the protobuf
     * field numbers of all EntitySpecifics fields supported by the server.
     * These values are externally declared in per-datatype .proto files.
     * </pre>
     *
     * <code>optional int32 data_type_id = 1;</code>
     */
    public Builder setDataTypeId(int value) {
      copyOnWrite();
      instance.setDataTypeId(value);
      return this;
    }
    /**
     * <pre>
     * An integer identifying the data type whose progress is tracked by this
     * marker.  The legitimate values of this field correspond to the protobuf
     * field numbers of all EntitySpecifics fields supported by the server.
     * These values are externally declared in per-datatype .proto files.
     * </pre>
     *
     * <code>optional int32 data_type_id = 1;</code>
     */
    public Builder clearDataTypeId() {
      copyOnWrite();
      instance.clearDataTypeId();
      return this;
    }

    /**
     * <pre>
     * An opaque-to-the-client sequence of bytes that the server may interpret
     * as an indicator of the client's knowledge state.  If this is empty or
     * omitted by the client, it indicates that the client is initiating a
     * a first-time sync of this datatype.  Otherwise, clients must supply a
     * value previously returned by the server in an earlier GetUpdatesResponse.
     * These values are not comparable or generable on the client.
     * The opaque semantics of this field are to afford server implementations
     * some flexibility in implementing progress tracking.  For instance,
     * a server implementation built on top of a distributed storage service --
     * or multiple heterogenous such services -- might need to supply a vector
     * of totally ordered monotonic update timestamps, rather than a single
     * monotonically increasing value.  Other optimizations may also be
     * possible if the server is allowed to embed arbitrary information in
     * the progress token.
     * Server implementations should keep the size of these tokens relatively
     * small, on the order of tens of bytes, and they should remain small
     * regardless of the number of items synchronized.  (A possible bad server
     * implementation would be for progress_token to contain a list of all the
     * items ever sent to the client.  Servers shouldn't do this.)
     * </pre>
     *
     * <code>optional bytes token = 2;</code>
     */
    public boolean hasToken() {
      return instance.hasToken();
    }
    /**
     * <pre>
     * An opaque-to-the-client sequence of bytes that the server may interpret
     * as an indicator of the client's knowledge state.  If this is empty or
     * omitted by the client, it indicates that the client is initiating a
     * a first-time sync of this datatype.  Otherwise, clients must supply a
     * value previously returned by the server in an earlier GetUpdatesResponse.
     * These values are not comparable or generable on the client.
     * The opaque semantics of this field are to afford server implementations
     * some flexibility in implementing progress tracking.  For instance,
     * a server implementation built on top of a distributed storage service --
     * or multiple heterogenous such services -- might need to supply a vector
     * of totally ordered monotonic update timestamps, rather than a single
     * monotonically increasing value.  Other optimizations may also be
     * possible if the server is allowed to embed arbitrary information in
     * the progress token.
     * Server implementations should keep the size of these tokens relatively
     * small, on the order of tens of bytes, and they should remain small
     * regardless of the number of items synchronized.  (A possible bad server
     * implementation would be for progress_token to contain a list of all the
     * items ever sent to the client.  Servers shouldn't do this.)
     * </pre>
     *
     * <code>optional bytes token = 2;</code>
     */
    public com.google.protobuf.ByteString getToken() {
      return instance.getToken();
    }
    /**
     * <pre>
     * An opaque-to-the-client sequence of bytes that the server may interpret
     * as an indicator of the client's knowledge state.  If this is empty or
     * omitted by the client, it indicates that the client is initiating a
     * a first-time sync of this datatype.  Otherwise, clients must supply a
     * value previously returned by the server in an earlier GetUpdatesResponse.
     * These values are not comparable or generable on the client.
     * The opaque semantics of this field are to afford server implementations
     * some flexibility in implementing progress tracking.  For instance,
     * a server implementation built on top of a distributed storage service --
     * or multiple heterogenous such services -- might need to supply a vector
     * of totally ordered monotonic update timestamps, rather than a single
     * monotonically increasing value.  Other optimizations may also be
     * possible if the server is allowed to embed arbitrary information in
     * the progress token.
     * Server implementations should keep the size of these tokens relatively
     * small, on the order of tens of bytes, and they should remain small
     * regardless of the number of items synchronized.  (A possible bad server
     * implementation would be for progress_token to contain a list of all the
     * items ever sent to the client.  Servers shouldn't do this.)
     * </pre>
     *
     * <code>optional bytes token = 2;</code>
     */
    public Builder setToken(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setToken(value);
      return this;
    }
    /**
     * <pre>
     * An opaque-to-the-client sequence of bytes that the server may interpret
     * as an indicator of the client's knowledge state.  If this is empty or
     * omitted by the client, it indicates that the client is initiating a
     * a first-time sync of this datatype.  Otherwise, clients must supply a
     * value previously returned by the server in an earlier GetUpdatesResponse.
     * These values are not comparable or generable on the client.
     * The opaque semantics of this field are to afford server implementations
     * some flexibility in implementing progress tracking.  For instance,
     * a server implementation built on top of a distributed storage service --
     * or multiple heterogenous such services -- might need to supply a vector
     * of totally ordered monotonic update timestamps, rather than a single
     * monotonically increasing value.  Other optimizations may also be
     * possible if the server is allowed to embed arbitrary information in
     * the progress token.
     * Server implementations should keep the size of these tokens relatively
     * small, on the order of tens of bytes, and they should remain small
     * regardless of the number of items synchronized.  (A possible bad server
     * implementation would be for progress_token to contain a list of all the
     * items ever sent to the client.  Servers shouldn't do this.)
     * </pre>
     *
     * <code>optional bytes token = 2;</code>
     */
    public Builder clearToken() {
      copyOnWrite();
      instance.clearToken();
      return this;
    }

    /**
     * <pre>
     * Clients that previously downloaded updates synced using the timestamp based
     * progress tracking mechanism, but which wish to switch over to the opaque
     * token mechanism can set this field in a GetUpdatesMessage.  The server
     * will perform a get updates operation as normal from the indicated
     * timestamp, and return only an opaque progress token.
     * </pre>
     *
     * <code>optional int64 timestamp_token_for_migration = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasTimestampTokenForMigration() {
      return instance.hasTimestampTokenForMigration();
    }
    /**
     * <pre>
     * Clients that previously downloaded updates synced using the timestamp based
     * progress tracking mechanism, but which wish to switch over to the opaque
     * token mechanism can set this field in a GetUpdatesMessage.  The server
     * will perform a get updates operation as normal from the indicated
     * timestamp, and return only an opaque progress token.
     * </pre>
     *
     * <code>optional int64 timestamp_token_for_migration = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated public long getTimestampTokenForMigration() {
      return instance.getTimestampTokenForMigration();
    }
    /**
     * <pre>
     * Clients that previously downloaded updates synced using the timestamp based
     * progress tracking mechanism, but which wish to switch over to the opaque
     * token mechanism can set this field in a GetUpdatesMessage.  The server
     * will perform a get updates operation as normal from the indicated
     * timestamp, and return only an opaque progress token.
     * </pre>
     *
     * <code>optional int64 timestamp_token_for_migration = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setTimestampTokenForMigration(long value) {
      copyOnWrite();
      instance.setTimestampTokenForMigration(value);
      return this;
    }
    /**
     * <pre>
     * Clients that previously downloaded updates synced using the timestamp based
     * progress tracking mechanism, but which wish to switch over to the opaque
     * token mechanism can set this field in a GetUpdatesMessage.  The server
     * will perform a get updates operation as normal from the indicated
     * timestamp, and return only an opaque progress token.
     * </pre>
     *
     * <code>optional int64 timestamp_token_for_migration = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearTimestampTokenForMigration() {
      copyOnWrite();
      instance.clearTimestampTokenForMigration();
      return this;
    }

    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Deprecated in M29.  We should use the repeated field version in the
     * PerClientTypeState instead.
     * </pre>
     *
     * <code>optional string notification_hint = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasNotificationHint() {
      return instance.hasNotificationHint();
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Deprecated in M29.  We should use the repeated field version in the
     * PerClientTypeState instead.
     * </pre>
     *
     * <code>optional string notification_hint = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public java.lang.String getNotificationHint() {
      return instance.getNotificationHint();
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Deprecated in M29.  We should use the repeated field version in the
     * PerClientTypeState instead.
     * </pre>
     *
     * <code>optional string notification_hint = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.protobuf.ByteString
        getNotificationHintBytes() {
      return instance.getNotificationHintBytes();
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Deprecated in M29.  We should use the repeated field version in the
     * PerClientTypeState instead.
     * </pre>
     *
     * <code>optional string notification_hint = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setNotificationHint(
        java.lang.String value) {
      copyOnWrite();
      instance.setNotificationHint(value);
      return this;
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Deprecated in M29.  We should use the repeated field version in the
     * PerClientTypeState instead.
     * </pre>
     *
     * <code>optional string notification_hint = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearNotificationHint() {
      copyOnWrite();
      instance.clearNotificationHint();
      return this;
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Deprecated in M29.  We should use the repeated field version in the
     * PerClientTypeState instead.
     * </pre>
     *
     * <code>optional string notification_hint = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setNotificationHintBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNotificationHintBytes(value);
      return this;
    }

    /**
     * <pre>
     * This field will be included only in GetUpdates with origin GU_TRIGGER.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;</code>
     */
    public boolean hasGetUpdateTriggers() {
      return instance.hasGetUpdateTriggers();
    }
    /**
     * <pre>
     * This field will be included only in GetUpdates with origin GU_TRIGGER.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;</code>
     */
    public org.chromium.components.sync.protocol.GetUpdateTriggers getGetUpdateTriggers() {
      return instance.getGetUpdateTriggers();
    }
    /**
     * <pre>
     * This field will be included only in GetUpdates with origin GU_TRIGGER.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;</code>
     */
    public Builder setGetUpdateTriggers(org.chromium.components.sync.protocol.GetUpdateTriggers value) {
      copyOnWrite();
      instance.setGetUpdateTriggers(value);
      return this;
      }
    /**
     * <pre>
     * This field will be included only in GetUpdates with origin GU_TRIGGER.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;</code>
     */
    public Builder setGetUpdateTriggers(
        org.chromium.components.sync.protocol.GetUpdateTriggers.Builder builderForValue) {
      copyOnWrite();
      instance.setGetUpdateTriggers(builderForValue);
      return this;
    }
    /**
     * <pre>
     * This field will be included only in GetUpdates with origin GU_TRIGGER.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;</code>
     */
    public Builder mergeGetUpdateTriggers(org.chromium.components.sync.protocol.GetUpdateTriggers value) {
      copyOnWrite();
      instance.mergeGetUpdateTriggers(value);
      return this;
    }
    /**
     * <pre>
     * This field will be included only in GetUpdates with origin GU_TRIGGER.
     * </pre>
     *
     * <code>optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;</code>
     */
    public Builder clearGetUpdateTriggers() {  copyOnWrite();
      instance.clearGetUpdateTriggers();
      return this;
    }

    /**
     * <pre>
     * The garbage collection directive for this data type.  The client should
     * purge items locally based on this directive.  Since this directive is
     * designed to be sent from server only, the client should persist it locally
     * as needed and avoid sending it to the server.
     * </pre>
     *
     * <code>optional .sync_pb.GarbageCollectionDirective gc_directive = 6;</code>
     */
    public boolean hasGcDirective() {
      return instance.hasGcDirective();
    }
    /**
     * <pre>
     * The garbage collection directive for this data type.  The client should
     * purge items locally based on this directive.  Since this directive is
     * designed to be sent from server only, the client should persist it locally
     * as needed and avoid sending it to the server.
     * </pre>
     *
     * <code>optional .sync_pb.GarbageCollectionDirective gc_directive = 6;</code>
     */
    public org.chromium.components.sync.protocol.GarbageCollectionDirective getGcDirective() {
      return instance.getGcDirective();
    }
    /**
     * <pre>
     * The garbage collection directive for this data type.  The client should
     * purge items locally based on this directive.  Since this directive is
     * designed to be sent from server only, the client should persist it locally
     * as needed and avoid sending it to the server.
     * </pre>
     *
     * <code>optional .sync_pb.GarbageCollectionDirective gc_directive = 6;</code>
     */
    public Builder setGcDirective(org.chromium.components.sync.protocol.GarbageCollectionDirective value) {
      copyOnWrite();
      instance.setGcDirective(value);
      return this;
      }
    /**
     * <pre>
     * The garbage collection directive for this data type.  The client should
     * purge items locally based on this directive.  Since this directive is
     * designed to be sent from server only, the client should persist it locally
     * as needed and avoid sending it to the server.
     * </pre>
     *
     * <code>optional .sync_pb.GarbageCollectionDirective gc_directive = 6;</code>
     */
    public Builder setGcDirective(
        org.chromium.components.sync.protocol.GarbageCollectionDirective.Builder builderForValue) {
      copyOnWrite();
      instance.setGcDirective(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The garbage collection directive for this data type.  The client should
     * purge items locally based on this directive.  Since this directive is
     * designed to be sent from server only, the client should persist it locally
     * as needed and avoid sending it to the server.
     * </pre>
     *
     * <code>optional .sync_pb.GarbageCollectionDirective gc_directive = 6;</code>
     */
    public Builder mergeGcDirective(org.chromium.components.sync.protocol.GarbageCollectionDirective value) {
      copyOnWrite();
      instance.mergeGcDirective(value);
      return this;
    }
    /**
     * <pre>
     * The garbage collection directive for this data type.  The client should
     * purge items locally based on this directive.  Since this directive is
     * designed to be sent from server only, the client should persist it locally
     * as needed and avoid sending it to the server.
     * </pre>
     *
     * <code>optional .sync_pb.GarbageCollectionDirective gc_directive = 6;</code>
     */
    public Builder clearGcDirective() {  copyOnWrite();
      instance.clearGcDirective();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.DataTypeProgressMarker)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.DataTypeProgressMarker();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.DataTypeProgressMarker other = (org.chromium.components.sync.protocol.DataTypeProgressMarker) arg1;
        dataTypeId_ = visitor.visitInt(
            hasDataTypeId(), dataTypeId_,
            other.hasDataTypeId(), other.dataTypeId_);
        token_ = visitor.visitByteString(
            hasToken(), token_,
            other.hasToken(), other.token_);
        timestampTokenForMigration_ = visitor.visitLong(
            hasTimestampTokenForMigration(), timestampTokenForMigration_,
            other.hasTimestampTokenForMigration(), other.timestampTokenForMigration_);
        notificationHint_ = visitor.visitString(
            hasNotificationHint(), notificationHint_,
            other.hasNotificationHint(), other.notificationHint_);
        getUpdateTriggers_ = visitor.visitMessage(getUpdateTriggers_, other.getUpdateTriggers_);
        gcDirective_ = visitor.visitMessage(gcDirective_, other.gcDirective_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                dataTypeId_ = input.readInt32();
                break;
              }
              case 18: {
                bitField0_ |= 0x00000002;
                token_ = input.readBytes();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                timestampTokenForMigration_ = input.readInt64();
                break;
              }
              case 34: {
                String s = input.readString();
                bitField0_ |= 0x00000008;
                notificationHint_ = s;
                break;
              }
              case 42: {
                org.chromium.components.sync.protocol.GetUpdateTriggers.Builder subBuilder = null;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                  subBuilder = getUpdateTriggers_.toBuilder();
                }
                getUpdateTriggers_ = input.readMessage(org.chromium.components.sync.protocol.GetUpdateTriggers.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(getUpdateTriggers_);
                  getUpdateTriggers_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000010;
                break;
              }
              case 50: {
                org.chromium.components.sync.protocol.GarbageCollectionDirective.Builder subBuilder = null;
                if (((bitField0_ & 0x00000020) == 0x00000020)) {
                  subBuilder = gcDirective_.toBuilder();
                }
                gcDirective_ = input.readMessage(org.chromium.components.sync.protocol.GarbageCollectionDirective.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(gcDirective_);
                  gcDirective_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000020;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.DataTypeProgressMarker.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.DataTypeProgressMarker)
  private static final org.chromium.components.sync.protocol.DataTypeProgressMarker DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new DataTypeProgressMarker();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.DataTypeProgressMarker getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<DataTypeProgressMarker> PARSER;

  public static com.google.protobuf.Parser<DataTypeProgressMarker> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

