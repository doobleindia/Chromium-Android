// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/ui/stream/stream_offline_extension.proto

package org.chromium.components.feed.core.proto.ui.stream;

public final class StreamOfflineExtensionProto {
  private StreamOfflineExtensionProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension.offlineExtension);
  }
  public interface OfflineExtensionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.stream.OfflineExtension)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The URL that determines which binding to use. If the URL is available
     * offline, then offline_binding should be used, otherwise
     * not_offline_binding should be used.
     * </pre>
     *
     * <code>optional string url = 1;</code>
     */
    boolean hasUrl();
    /**
     * <pre>
     * The URL that determines which binding to use. If the URL is available
     * offline, then offline_binding should be used, otherwise
     * not_offline_binding should be used.
     * </pre>
     *
     * <code>optional string url = 1;</code>
     */
    java.lang.String getUrl();
    /**
     * <pre>
     * The URL that determines which binding to use. If the URL is available
     * offline, then offline_binding should be used, otherwise
     * not_offline_binding should be used.
     * </pre>
     *
     * <code>optional string url = 1;</code>
     */
    com.google.protobuf.ByteString
        getUrlBytes();

    /**
     * <code>optional .components.feed.core.proto.ui.piet.BindingValue offline_binding = 2;</code>
     */
    boolean hasOfflineBinding();
    /**
     * <code>optional .components.feed.core.proto.ui.piet.BindingValue offline_binding = 2;</code>
     */
    org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue getOfflineBinding();

    /**
     * <code>optional .components.feed.core.proto.ui.piet.BindingValue not_offline_binding = 3;</code>
     */
    boolean hasNotOfflineBinding();
    /**
     * <code>optional .components.feed.core.proto.ui.piet.BindingValue not_offline_binding = 3;</code>
     */
    org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue getNotOfflineBinding();
  }
  /**
   * <pre>
   * Extension for Piet bindings content based on offline availability status.
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.stream.OfflineExtension}
   */
  public  static final class OfflineExtension extends
      com.google.protobuf.GeneratedMessageLite<
          OfflineExtension, OfflineExtension.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.stream.OfflineExtension)
      OfflineExtensionOrBuilder {
    private OfflineExtension() {
      url_ = "";
    }
    private int bitField0_;
    public static final int URL_FIELD_NUMBER = 1;
    private java.lang.String url_;
    /**
     * <pre>
     * The URL that determines which binding to use. If the URL is available
     * offline, then offline_binding should be used, otherwise
     * not_offline_binding should be used.
     * </pre>
     *
     * <code>optional string url = 1;</code>
     */
    public boolean hasUrl() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The URL that determines which binding to use. If the URL is available
     * offline, then offline_binding should be used, otherwise
     * not_offline_binding should be used.
     * </pre>
     *
     * <code>optional string url = 1;</code>
     */
    public java.lang.String getUrl() {
      return url_;
    }
    /**
     * <pre>
     * The URL that determines which binding to use. If the URL is available
     * offline, then offline_binding should be used, otherwise
     * not_offline_binding should be used.
     * </pre>
     *
     * <code>optional string url = 1;</code>
     */
    public com.google.protobuf.ByteString
        getUrlBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(url_);
    }
    /**
     * <pre>
     * The URL that determines which binding to use. If the URL is available
     * offline, then offline_binding should be used, otherwise
     * not_offline_binding should be used.
     * </pre>
     *
     * <code>optional string url = 1;</code>
     */
    private void setUrl(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      url_ = value;
    }
    /**
     * <pre>
     * The URL that determines which binding to use. If the URL is available
     * offline, then offline_binding should be used, otherwise
     * not_offline_binding should be used.
     * </pre>
     *
     * <code>optional string url = 1;</code>
     */
    private void clearUrl() {
      bitField0_ = (bitField0_ & ~0x00000001);
      url_ = getDefaultInstance().getUrl();
    }
    /**
     * <pre>
     * The URL that determines which binding to use. If the URL is available
     * offline, then offline_binding should be used, otherwise
     * not_offline_binding should be used.
     * </pre>
     *
     * <code>optional string url = 1;</code>
     */
    private void setUrlBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      url_ = value.toStringUtf8();
    }

    public static final int OFFLINE_BINDING_FIELD_NUMBER = 2;
    private org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue offlineBinding_;
    /**
     * <code>optional .components.feed.core.proto.ui.piet.BindingValue offline_binding = 2;</code>
     */
    public boolean hasOfflineBinding() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .components.feed.core.proto.ui.piet.BindingValue offline_binding = 2;</code>
     */
    public org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue getOfflineBinding() {
      return offlineBinding_ == null ? org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue.getDefaultInstance() : offlineBinding_;
    }
    /**
     * <code>optional .components.feed.core.proto.ui.piet.BindingValue offline_binding = 2;</code>
     */
    private void setOfflineBinding(org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue value) {
      if (value == null) {
        throw new NullPointerException();
      }
      offlineBinding_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>optional .components.feed.core.proto.ui.piet.BindingValue offline_binding = 2;</code>
     */
    private void setOfflineBinding(
        org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue.Builder builderForValue) {
      offlineBinding_ = builderForValue.build();
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>optional .components.feed.core.proto.ui.piet.BindingValue offline_binding = 2;</code>
     */
    private void mergeOfflineBinding(org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue value) {
      if (offlineBinding_ != null &&
          offlineBinding_ != org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue.getDefaultInstance()) {
        offlineBinding_ =
          org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue.newBuilder(offlineBinding_).mergeFrom(value).buildPartial();
      } else {
        offlineBinding_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>optional .components.feed.core.proto.ui.piet.BindingValue offline_binding = 2;</code>
     */
    private void clearOfflineBinding() {  offlineBinding_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int NOT_OFFLINE_BINDING_FIELD_NUMBER = 3;
    private org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue notOfflineBinding_;
    /**
     * <code>optional .components.feed.core.proto.ui.piet.BindingValue not_offline_binding = 3;</code>
     */
    public boolean hasNotOfflineBinding() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .components.feed.core.proto.ui.piet.BindingValue not_offline_binding = 3;</code>
     */
    public org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue getNotOfflineBinding() {
      return notOfflineBinding_ == null ? org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue.getDefaultInstance() : notOfflineBinding_;
    }
    /**
     * <code>optional .components.feed.core.proto.ui.piet.BindingValue not_offline_binding = 3;</code>
     */
    private void setNotOfflineBinding(org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue value) {
      if (value == null) {
        throw new NullPointerException();
      }
      notOfflineBinding_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>optional .components.feed.core.proto.ui.piet.BindingValue not_offline_binding = 3;</code>
     */
    private void setNotOfflineBinding(
        org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue.Builder builderForValue) {
      notOfflineBinding_ = builderForValue.build();
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>optional .components.feed.core.proto.ui.piet.BindingValue not_offline_binding = 3;</code>
     */
    private void mergeNotOfflineBinding(org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue value) {
      if (notOfflineBinding_ != null &&
          notOfflineBinding_ != org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue.getDefaultInstance()) {
        notOfflineBinding_ =
          org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue.newBuilder(notOfflineBinding_).mergeFrom(value).buildPartial();
      } else {
        notOfflineBinding_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>optional .components.feed.core.proto.ui.piet.BindingValue not_offline_binding = 3;</code>
     */
    private void clearNotOfflineBinding() {  notOfflineBinding_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeString(1, getUrl());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getOfflineBinding());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, getNotOfflineBinding());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getUrl());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getOfflineBinding());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getNotOfflineBinding());
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Extension for Piet bindings content based on offline availability status.
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.stream.OfflineExtension}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.stream.OfflineExtension)
        org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtensionOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The URL that determines which binding to use. If the URL is available
       * offline, then offline_binding should be used, otherwise
       * not_offline_binding should be used.
       * </pre>
       *
       * <code>optional string url = 1;</code>
       */
      public boolean hasUrl() {
        return instance.hasUrl();
      }
      /**
       * <pre>
       * The URL that determines which binding to use. If the URL is available
       * offline, then offline_binding should be used, otherwise
       * not_offline_binding should be used.
       * </pre>
       *
       * <code>optional string url = 1;</code>
       */
      public java.lang.String getUrl() {
        return instance.getUrl();
      }
      /**
       * <pre>
       * The URL that determines which binding to use. If the URL is available
       * offline, then offline_binding should be used, otherwise
       * not_offline_binding should be used.
       * </pre>
       *
       * <code>optional string url = 1;</code>
       */
      public com.google.protobuf.ByteString
          getUrlBytes() {
        return instance.getUrlBytes();
      }
      /**
       * <pre>
       * The URL that determines which binding to use. If the URL is available
       * offline, then offline_binding should be used, otherwise
       * not_offline_binding should be used.
       * </pre>
       *
       * <code>optional string url = 1;</code>
       */
      public Builder setUrl(
          java.lang.String value) {
        copyOnWrite();
        instance.setUrl(value);
        return this;
      }
      /**
       * <pre>
       * The URL that determines which binding to use. If the URL is available
       * offline, then offline_binding should be used, otherwise
       * not_offline_binding should be used.
       * </pre>
       *
       * <code>optional string url = 1;</code>
       */
      public Builder clearUrl() {
        copyOnWrite();
        instance.clearUrl();
        return this;
      }
      /**
       * <pre>
       * The URL that determines which binding to use. If the URL is available
       * offline, then offline_binding should be used, otherwise
       * not_offline_binding should be used.
       * </pre>
       *
       * <code>optional string url = 1;</code>
       */
      public Builder setUrlBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setUrlBytes(value);
        return this;
      }

      /**
       * <code>optional .components.feed.core.proto.ui.piet.BindingValue offline_binding = 2;</code>
       */
      public boolean hasOfflineBinding() {
        return instance.hasOfflineBinding();
      }
      /**
       * <code>optional .components.feed.core.proto.ui.piet.BindingValue offline_binding = 2;</code>
       */
      public org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue getOfflineBinding() {
        return instance.getOfflineBinding();
      }
      /**
       * <code>optional .components.feed.core.proto.ui.piet.BindingValue offline_binding = 2;</code>
       */
      public Builder setOfflineBinding(org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue value) {
        copyOnWrite();
        instance.setOfflineBinding(value);
        return this;
        }
      /**
       * <code>optional .components.feed.core.proto.ui.piet.BindingValue offline_binding = 2;</code>
       */
      public Builder setOfflineBinding(
          org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue.Builder builderForValue) {
        copyOnWrite();
        instance.setOfflineBinding(builderForValue);
        return this;
      }
      /**
       * <code>optional .components.feed.core.proto.ui.piet.BindingValue offline_binding = 2;</code>
       */
      public Builder mergeOfflineBinding(org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue value) {
        copyOnWrite();
        instance.mergeOfflineBinding(value);
        return this;
      }
      /**
       * <code>optional .components.feed.core.proto.ui.piet.BindingValue offline_binding = 2;</code>
       */
      public Builder clearOfflineBinding() {  copyOnWrite();
        instance.clearOfflineBinding();
        return this;
      }

      /**
       * <code>optional .components.feed.core.proto.ui.piet.BindingValue not_offline_binding = 3;</code>
       */
      public boolean hasNotOfflineBinding() {
        return instance.hasNotOfflineBinding();
      }
      /**
       * <code>optional .components.feed.core.proto.ui.piet.BindingValue not_offline_binding = 3;</code>
       */
      public org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue getNotOfflineBinding() {
        return instance.getNotOfflineBinding();
      }
      /**
       * <code>optional .components.feed.core.proto.ui.piet.BindingValue not_offline_binding = 3;</code>
       */
      public Builder setNotOfflineBinding(org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue value) {
        copyOnWrite();
        instance.setNotOfflineBinding(value);
        return this;
        }
      /**
       * <code>optional .components.feed.core.proto.ui.piet.BindingValue not_offline_binding = 3;</code>
       */
      public Builder setNotOfflineBinding(
          org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue.Builder builderForValue) {
        copyOnWrite();
        instance.setNotOfflineBinding(builderForValue);
        return this;
      }
      /**
       * <code>optional .components.feed.core.proto.ui.piet.BindingValue not_offline_binding = 3;</code>
       */
      public Builder mergeNotOfflineBinding(org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue value) {
        copyOnWrite();
        instance.mergeNotOfflineBinding(value);
        return this;
      }
      /**
       * <code>optional .components.feed.core.proto.ui.piet.BindingValue not_offline_binding = 3;</code>
       */
      public Builder clearNotOfflineBinding() {  copyOnWrite();
        instance.clearNotOfflineBinding();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.stream.OfflineExtension)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (hasOfflineBinding()) {
            if (!getOfflineBinding().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasNotOfflineBinding()) {
            if (!getNotOfflineBinding().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension other = (org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension) arg1;
          url_ = visitor.visitString(
              hasUrl(), url_,
              other.hasUrl(), other.url_);
          offlineBinding_ = visitor.visitMessage(offlineBinding_, other.offlineBinding_);
          notOfflineBinding_ = visitor.visitMessage(notOfflineBinding_, other.notOfflineBinding_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readString();
                  bitField0_ |= 0x00000001;
                  url_ = s;
                  break;
                }
                case 18: {
                  org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    subBuilder = offlineBinding_.toBuilder();
                  }
                  offlineBinding_ = input.readMessage(org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(offlineBinding_);
                    offlineBinding_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000002;
                  break;
                }
                case 26: {
                  org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000004) == 0x00000004)) {
                    subBuilder = notOfflineBinding_.toBuilder();
                  }
                  notOfflineBinding_ = input.readMessage(org.chromium.components.feed.core.proto.ui.piet.ElementsProto.BindingValue.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(notOfflineBinding_);
                    notOfflineBinding_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000004;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.stream.OfflineExtension)
    private static final org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new OfflineExtension();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<OfflineExtension> PARSER;

    public static com.google.protobuf.Parser<OfflineExtension> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
    public static final int OFFLINE_EXTENSION_FIELD_NUMBER = 208815589;
    /**
     * <code>extend .components.feed.core.proto.ui.piet.HostBindingData { ... }</code>
     */
    public static final
      com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
        org.chromium.components.feed.core.proto.ui.piet.ElementsProto.HostBindingData,
        org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension> offlineExtension = com.google.protobuf.GeneratedMessageLite
            .newSingularGeneratedExtension(
          org.chromium.components.feed.core.proto.ui.piet.ElementsProto.HostBindingData.getDefaultInstance(),
          org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension.getDefaultInstance(),
          org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension.getDefaultInstance(),
          null,
          208815589,
          com.google.protobuf.WireFormat.FieldType.MESSAGE,
          org.chromium.components.feed.core.proto.ui.stream.StreamOfflineExtensionProto.OfflineExtension.class);
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
