// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/ui/piet/rounded_corners.proto

package org.chromium.components.feed.core.proto.ui.piet;

public final class RoundedCornersProto {
  private RoundedCornersProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface RoundedCornersOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.RoundedCorners)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                RoundedCorners, RoundedCorners.Builder> {

    /**
     * <pre>
     * A bitmask representing which corners should be rounded. Bit values are
     * defined by the `Corners` enum. If no corners are specified, then all
     * corners will be rounded.
     * NOTICE: having a rounded corner with a border only on one side is strongly
     * discouraged as it leads to undefined and inconsistent behavior across
     * platforms.
     * </pre>
     *
     * <code>optional int32 bitmask = 1;</code>
     */
    boolean hasBitmask();
    /**
     * <pre>
     * A bitmask representing which corners should be rounded. Bit values are
     * defined by the `Corners` enum. If no corners are specified, then all
     * corners will be rounded.
     * NOTICE: having a rounded corner with a border only on one side is strongly
     * discouraged as it leads to undefined and inconsistent behavior across
     * platforms.
     * </pre>
     *
     * <code>optional int32 bitmask = 1;</code>
     */
    int getBitmask();

    /**
     * <pre>
     * The radius of the rounding applied to the specified corners, specified in
     * DP. This value must be non-zero, otherwise it’s a no-op.
     * This field is deprecated. Please use radius_options instead.
     * radius and radius_dp have the same functionality. Both fields can be
     * specified if there are concerns about users with old client versions that
     * don't support the new field yet. If the client does recognize the new
     * radius_options and the deprecated radius is specified as well, only
     * radius_options will be used.
     * </pre>
     *
     * <code>optional int32 radius = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean hasRadius();
    /**
     * <pre>
     * The radius of the rounding applied to the specified corners, specified in
     * DP. This value must be non-zero, otherwise it’s a no-op.
     * This field is deprecated. Please use radius_options instead.
     * radius and radius_dp have the same functionality. Both fields can be
     * specified if there are concerns about users with old client versions that
     * don't support the new field yet. If the client does recognize the new
     * radius_options and the deprecated radius is specified as well, only
     * radius_options will be used.
     * </pre>
     *
     * <code>optional int32 radius = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated int getRadius();

    /**
     * <pre>
     * The radius specified in dp.
     * </pre>
     *
     * <code>optional uint32 radius_dp = 4;</code>
     */
    boolean hasRadiusDp();
    /**
     * <pre>
     * The radius specified in dp.
     * </pre>
     *
     * <code>optional uint32 radius_dp = 4;</code>
     */
    int getRadiusDp();

    /**
     * <pre>
     * An integer value between 1 and 100. The corner radius is calculated as a
     * percentage of the height of the element being rounded. It does not
     * require the height to be explicitly specified on the element.
     * For example:
     * height = 100dp, width = 50dp, radius_percentage_of_height = 20%
     * Actual radius (calculated by the client) = 20dp.
     * Note that the value calculated from the height (i.e. 20dp) will be
     * applied to both halves of any corners specified in the bitmask.
     * </pre>
     *
     * <code>optional uint32 radius_percentage_of_height = 5;</code>
     */
    boolean hasRadiusPercentageOfHeight();
    /**
     * <pre>
     * An integer value between 1 and 100. The corner radius is calculated as a
     * percentage of the height of the element being rounded. It does not
     * require the height to be explicitly specified on the element.
     * For example:
     * height = 100dp, width = 50dp, radius_percentage_of_height = 20%
     * Actual radius (calculated by the client) = 20dp.
     * Note that the value calculated from the height (i.e. 20dp) will be
     * applied to both halves of any corners specified in the bitmask.
     * </pre>
     *
     * <code>optional uint32 radius_percentage_of_height = 5;</code>
     */
    int getRadiusPercentageOfHeight();

    /**
     * <pre>
     * An integer value between 1 and 100. The corner radius is calculated as a
     * percentage of the width of the element being rounded. It does not
     * require the width to be explicitly specified on the element.
     * For example:
     * height = 100dp, width = 50dp, radius_percentage_of_width = 20%
     * Actual radius (calculated by the client) = 10dp.
     * Note that the value calculated from the width (i.e. 10dp) will be
     * applied to both halves of any corners specified in the bitmask.
     * </pre>
     *
     * <code>optional uint32 radius_percentage_of_width = 6;</code>
     */
    boolean hasRadiusPercentageOfWidth();
    /**
     * <pre>
     * An integer value between 1 and 100. The corner radius is calculated as a
     * percentage of the width of the element being rounded. It does not
     * require the width to be explicitly specified on the element.
     * For example:
     * height = 100dp, width = 50dp, radius_percentage_of_width = 20%
     * Actual radius (calculated by the client) = 10dp.
     * Note that the value calculated from the width (i.e. 10dp) will be
     * applied to both halves of any corners specified in the bitmask.
     * </pre>
     *
     * <code>optional uint32 radius_percentage_of_width = 6;</code>
     */
    int getRadiusPercentageOfWidth();

    /**
     * <pre>
     * Flag to ask the host for a default radius. If the host does not return a
     * radius, fall back to "radius_options". If this field is true and the host
     * has provided a default radius, radius_options will be ignored.
     * </pre>
     *
     * <code>optional bool use_host_radius_override = 3;</code>
     */
    boolean hasUseHostRadiusOverride();
    /**
     * <pre>
     * Flag to ask the host for a default radius. If the host does not return a
     * radius, fall back to "radius_options". If this field is true and the host
     * has provided a default radius, radius_options will be ignored.
     * </pre>
     *
     * <code>optional bool use_host_radius_override = 3;</code>
     */
    boolean getUseHostRadiusOverride();

    public org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners.RadiusOptionsCase getRadiusOptionsCase();
  }
  /**
   * <pre>
   * Rounded corners for Views, expressed as a bit mask. If a container view has
   * rounded corners applied to it, then the contents of that view SHOULD also be
   * cropped to fit within the rounded rectangle bounding box established by the
   * container. Specifically, content within such a view SHOULD be cropped too,
   * without having to explicitly specify rounded corners on the child content.
   * Check [INTERNAL LINK] for any client-specific limitations that apply to the
   * current version of the implementation.
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.RoundedCorners}
   */
  public  static final class RoundedCorners extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        RoundedCorners, RoundedCorners.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.RoundedCorners)
      RoundedCornersOrBuilder {
    private RoundedCorners() {
    }
    /**
     * <pre>
     * Represents the set of values for a bitmask to specify which corners should
     * be rounded. Start indicates the left side for LTR settings, right side for
     * RTL.
     * </pre>
     *
     * Protobuf enum {@code components.feed.core.proto.ui.piet.RoundedCorners.Corners}
     */
    public enum Corners
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       * If unspecified, then all corners will be rounded.
       * </pre>
       *
       * <code>CORNERS_UNSPECIFIED = 0;</code>
       */
      CORNERS_UNSPECIFIED(0),
      /**
       * <pre>
       * Indicates that the top starting corner should be rounded (top left for
       * LTR, top right for RTL).
       * </pre>
       *
       * <code>TOP_START = 1;</code>
       */
      TOP_START(1),
      /**
       * <pre>
       * Indicates that the top end corner should be rounded.
       * </pre>
       *
       * <code>TOP_END = 2;</code>
       */
      TOP_END(2),
      /**
       * <pre>
       * Indicates that the bottom end corner should be rounded.
       * </pre>
       *
       * <code>BOTTOM_END = 4;</code>
       */
      BOTTOM_END(4),
      /**
       * <pre>
       * Indicates that the bottom starting corner should be rounded.
       * </pre>
       *
       * <code>BOTTOM_START = 8;</code>
       */
      BOTTOM_START(8),
      ;

      /**
       * <pre>
       * If unspecified, then all corners will be rounded.
       * </pre>
       *
       * <code>CORNERS_UNSPECIFIED = 0;</code>
       */
      public static final int CORNERS_UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * Indicates that the top starting corner should be rounded (top left for
       * LTR, top right for RTL).
       * </pre>
       *
       * <code>TOP_START = 1;</code>
       */
      public static final int TOP_START_VALUE = 1;
      /**
       * <pre>
       * Indicates that the top end corner should be rounded.
       * </pre>
       *
       * <code>TOP_END = 2;</code>
       */
      public static final int TOP_END_VALUE = 2;
      /**
       * <pre>
       * Indicates that the bottom end corner should be rounded.
       * </pre>
       *
       * <code>BOTTOM_END = 4;</code>
       */
      public static final int BOTTOM_END_VALUE = 4;
      /**
       * <pre>
       * Indicates that the bottom starting corner should be rounded.
       * </pre>
       *
       * <code>BOTTOM_START = 8;</code>
       */
      public static final int BOTTOM_START_VALUE = 8;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Corners valueOf(int value) {
        return forNumber(value);
      }

      public static Corners forNumber(int value) {
        switch (value) {
          case 0: return CORNERS_UNSPECIFIED;
          case 1: return TOP_START;
          case 2: return TOP_END;
          case 4: return BOTTOM_END;
          case 8: return BOTTOM_START;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Corners>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Corners> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Corners>() {
              public Corners findValueByNumber(int number) {
                return Corners.forNumber(number);
              }
            };

      private final int value;

      private Corners(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:components.feed.core.proto.ui.piet.RoundedCorners.Corners)
    }

    private int bitField0_;
    private int radiusOptionsCase_ = 0;
    private java.lang.Object radiusOptions_;
    public enum RadiusOptionsCase
        implements com.google.protobuf.Internal.EnumLite {
      RADIUS_DP(4),
      RADIUS_PERCENTAGE_OF_HEIGHT(5),
      RADIUS_PERCENTAGE_OF_WIDTH(6),
      RADIUSOPTIONS_NOT_SET(0);
      private final int value;
      private RadiusOptionsCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RadiusOptionsCase valueOf(int value) {
        return forNumber(value);
      }

      public static RadiusOptionsCase forNumber(int value) {
        switch (value) {
          case 4: return RADIUS_DP;
          case 5: return RADIUS_PERCENTAGE_OF_HEIGHT;
          case 6: return RADIUS_PERCENTAGE_OF_WIDTH;
          case 0: return RADIUSOPTIONS_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public RadiusOptionsCase
    getRadiusOptionsCase() {
      return RadiusOptionsCase.forNumber(
          radiusOptionsCase_);
    }

    private void clearRadiusOptions() {
      radiusOptionsCase_ = 0;
      radiusOptions_ = null;
    }

    public static final int BITMASK_FIELD_NUMBER = 1;
    private int bitmask_;
    /**
     * <pre>
     * A bitmask representing which corners should be rounded. Bit values are
     * defined by the `Corners` enum. If no corners are specified, then all
     * corners will be rounded.
     * NOTICE: having a rounded corner with a border only on one side is strongly
     * discouraged as it leads to undefined and inconsistent behavior across
     * platforms.
     * </pre>
     *
     * <code>optional int32 bitmask = 1;</code>
     */
    public boolean hasBitmask() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * A bitmask representing which corners should be rounded. Bit values are
     * defined by the `Corners` enum. If no corners are specified, then all
     * corners will be rounded.
     * NOTICE: having a rounded corner with a border only on one side is strongly
     * discouraged as it leads to undefined and inconsistent behavior across
     * platforms.
     * </pre>
     *
     * <code>optional int32 bitmask = 1;</code>
     */
    public int getBitmask() {
      return bitmask_;
    }
    /**
     * <pre>
     * A bitmask representing which corners should be rounded. Bit values are
     * defined by the `Corners` enum. If no corners are specified, then all
     * corners will be rounded.
     * NOTICE: having a rounded corner with a border only on one side is strongly
     * discouraged as it leads to undefined and inconsistent behavior across
     * platforms.
     * </pre>
     *
     * <code>optional int32 bitmask = 1;</code>
     */
    private void setBitmask(int value) {
      bitField0_ |= 0x00000001;
      bitmask_ = value;
    }
    /**
     * <pre>
     * A bitmask representing which corners should be rounded. Bit values are
     * defined by the `Corners` enum. If no corners are specified, then all
     * corners will be rounded.
     * NOTICE: having a rounded corner with a border only on one side is strongly
     * discouraged as it leads to undefined and inconsistent behavior across
     * platforms.
     * </pre>
     *
     * <code>optional int32 bitmask = 1;</code>
     */
    private void clearBitmask() {
      bitField0_ = (bitField0_ & ~0x00000001);
      bitmask_ = 0;
    }

    public static final int RADIUS_FIELD_NUMBER = 2;
    private int radius_;
    /**
     * <pre>
     * The radius of the rounding applied to the specified corners, specified in
     * DP. This value must be non-zero, otherwise it’s a no-op.
     * This field is deprecated. Please use radius_options instead.
     * radius and radius_dp have the same functionality. Both fields can be
     * specified if there are concerns about users with old client versions that
     * don't support the new field yet. If the client does recognize the new
     * radius_options and the deprecated radius is specified as well, only
     * radius_options will be used.
     * </pre>
     *
     * <code>optional int32 radius = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasRadius() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The radius of the rounding applied to the specified corners, specified in
     * DP. This value must be non-zero, otherwise it’s a no-op.
     * This field is deprecated. Please use radius_options instead.
     * radius and radius_dp have the same functionality. Both fields can be
     * specified if there are concerns about users with old client versions that
     * don't support the new field yet. If the client does recognize the new
     * radius_options and the deprecated radius is specified as well, only
     * radius_options will be used.
     * </pre>
     *
     * <code>optional int32 radius = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated public int getRadius() {
      return radius_;
    }
    /**
     * <pre>
     * The radius of the rounding applied to the specified corners, specified in
     * DP. This value must be non-zero, otherwise it’s a no-op.
     * This field is deprecated. Please use radius_options instead.
     * radius and radius_dp have the same functionality. Both fields can be
     * specified if there are concerns about users with old client versions that
     * don't support the new field yet. If the client does recognize the new
     * radius_options and the deprecated radius is specified as well, only
     * radius_options will be used.
     * </pre>
     *
     * <code>optional int32 radius = 2 [deprecated = true];</code>
     */
    private void setRadius(int value) {
      bitField0_ |= 0x00000002;
      radius_ = value;
    }
    /**
     * <pre>
     * The radius of the rounding applied to the specified corners, specified in
     * DP. This value must be non-zero, otherwise it’s a no-op.
     * This field is deprecated. Please use radius_options instead.
     * radius and radius_dp have the same functionality. Both fields can be
     * specified if there are concerns about users with old client versions that
     * don't support the new field yet. If the client does recognize the new
     * radius_options and the deprecated radius is specified as well, only
     * radius_options will be used.
     * </pre>
     *
     * <code>optional int32 radius = 2 [deprecated = true];</code>
     */
    private void clearRadius() {
      bitField0_ = (bitField0_ & ~0x00000002);
      radius_ = 0;
    }

    public static final int RADIUS_DP_FIELD_NUMBER = 4;
    /**
     * <pre>
     * The radius specified in dp.
     * </pre>
     *
     * <code>optional uint32 radius_dp = 4;</code>
     */
    public boolean hasRadiusDp() {
      return radiusOptionsCase_ == 4;
    }
    /**
     * <pre>
     * The radius specified in dp.
     * </pre>
     *
     * <code>optional uint32 radius_dp = 4;</code>
     */
    public int getRadiusDp() {
      if (radiusOptionsCase_ == 4) {
        return (java.lang.Integer) radiusOptions_;
      }
      return 0;
    }
    /**
     * <pre>
     * The radius specified in dp.
     * </pre>
     *
     * <code>optional uint32 radius_dp = 4;</code>
     */
    private void setRadiusDp(int value) {
      radiusOptionsCase_ = 4;
      radiusOptions_ = value;
    }
    /**
     * <pre>
     * The radius specified in dp.
     * </pre>
     *
     * <code>optional uint32 radius_dp = 4;</code>
     */
    private void clearRadiusDp() {
      if (radiusOptionsCase_ == 4) {
        radiusOptionsCase_ = 0;
        radiusOptions_ = null;
      }
    }

    public static final int RADIUS_PERCENTAGE_OF_HEIGHT_FIELD_NUMBER = 5;
    /**
     * <pre>
     * An integer value between 1 and 100. The corner radius is calculated as a
     * percentage of the height of the element being rounded. It does not
     * require the height to be explicitly specified on the element.
     * For example:
     * height = 100dp, width = 50dp, radius_percentage_of_height = 20%
     * Actual radius (calculated by the client) = 20dp.
     * Note that the value calculated from the height (i.e. 20dp) will be
     * applied to both halves of any corners specified in the bitmask.
     * </pre>
     *
     * <code>optional uint32 radius_percentage_of_height = 5;</code>
     */
    public boolean hasRadiusPercentageOfHeight() {
      return radiusOptionsCase_ == 5;
    }
    /**
     * <pre>
     * An integer value between 1 and 100. The corner radius is calculated as a
     * percentage of the height of the element being rounded. It does not
     * require the height to be explicitly specified on the element.
     * For example:
     * height = 100dp, width = 50dp, radius_percentage_of_height = 20%
     * Actual radius (calculated by the client) = 20dp.
     * Note that the value calculated from the height (i.e. 20dp) will be
     * applied to both halves of any corners specified in the bitmask.
     * </pre>
     *
     * <code>optional uint32 radius_percentage_of_height = 5;</code>
     */
    public int getRadiusPercentageOfHeight() {
      if (radiusOptionsCase_ == 5) {
        return (java.lang.Integer) radiusOptions_;
      }
      return 0;
    }
    /**
     * <pre>
     * An integer value between 1 and 100. The corner radius is calculated as a
     * percentage of the height of the element being rounded. It does not
     * require the height to be explicitly specified on the element.
     * For example:
     * height = 100dp, width = 50dp, radius_percentage_of_height = 20%
     * Actual radius (calculated by the client) = 20dp.
     * Note that the value calculated from the height (i.e. 20dp) will be
     * applied to both halves of any corners specified in the bitmask.
     * </pre>
     *
     * <code>optional uint32 radius_percentage_of_height = 5;</code>
     */
    private void setRadiusPercentageOfHeight(int value) {
      radiusOptionsCase_ = 5;
      radiusOptions_ = value;
    }
    /**
     * <pre>
     * An integer value between 1 and 100. The corner radius is calculated as a
     * percentage of the height of the element being rounded. It does not
     * require the height to be explicitly specified on the element.
     * For example:
     * height = 100dp, width = 50dp, radius_percentage_of_height = 20%
     * Actual radius (calculated by the client) = 20dp.
     * Note that the value calculated from the height (i.e. 20dp) will be
     * applied to both halves of any corners specified in the bitmask.
     * </pre>
     *
     * <code>optional uint32 radius_percentage_of_height = 5;</code>
     */
    private void clearRadiusPercentageOfHeight() {
      if (radiusOptionsCase_ == 5) {
        radiusOptionsCase_ = 0;
        radiusOptions_ = null;
      }
    }

    public static final int RADIUS_PERCENTAGE_OF_WIDTH_FIELD_NUMBER = 6;
    /**
     * <pre>
     * An integer value between 1 and 100. The corner radius is calculated as a
     * percentage of the width of the element being rounded. It does not
     * require the width to be explicitly specified on the element.
     * For example:
     * height = 100dp, width = 50dp, radius_percentage_of_width = 20%
     * Actual radius (calculated by the client) = 10dp.
     * Note that the value calculated from the width (i.e. 10dp) will be
     * applied to both halves of any corners specified in the bitmask.
     * </pre>
     *
     * <code>optional uint32 radius_percentage_of_width = 6;</code>
     */
    public boolean hasRadiusPercentageOfWidth() {
      return radiusOptionsCase_ == 6;
    }
    /**
     * <pre>
     * An integer value between 1 and 100. The corner radius is calculated as a
     * percentage of the width of the element being rounded. It does not
     * require the width to be explicitly specified on the element.
     * For example:
     * height = 100dp, width = 50dp, radius_percentage_of_width = 20%
     * Actual radius (calculated by the client) = 10dp.
     * Note that the value calculated from the width (i.e. 10dp) will be
     * applied to both halves of any corners specified in the bitmask.
     * </pre>
     *
     * <code>optional uint32 radius_percentage_of_width = 6;</code>
     */
    public int getRadiusPercentageOfWidth() {
      if (radiusOptionsCase_ == 6) {
        return (java.lang.Integer) radiusOptions_;
      }
      return 0;
    }
    /**
     * <pre>
     * An integer value between 1 and 100. The corner radius is calculated as a
     * percentage of the width of the element being rounded. It does not
     * require the width to be explicitly specified on the element.
     * For example:
     * height = 100dp, width = 50dp, radius_percentage_of_width = 20%
     * Actual radius (calculated by the client) = 10dp.
     * Note that the value calculated from the width (i.e. 10dp) will be
     * applied to both halves of any corners specified in the bitmask.
     * </pre>
     *
     * <code>optional uint32 radius_percentage_of_width = 6;</code>
     */
    private void setRadiusPercentageOfWidth(int value) {
      radiusOptionsCase_ = 6;
      radiusOptions_ = value;
    }
    /**
     * <pre>
     * An integer value between 1 and 100. The corner radius is calculated as a
     * percentage of the width of the element being rounded. It does not
     * require the width to be explicitly specified on the element.
     * For example:
     * height = 100dp, width = 50dp, radius_percentage_of_width = 20%
     * Actual radius (calculated by the client) = 10dp.
     * Note that the value calculated from the width (i.e. 10dp) will be
     * applied to both halves of any corners specified in the bitmask.
     * </pre>
     *
     * <code>optional uint32 radius_percentage_of_width = 6;</code>
     */
    private void clearRadiusPercentageOfWidth() {
      if (radiusOptionsCase_ == 6) {
        radiusOptionsCase_ = 0;
        radiusOptions_ = null;
      }
    }

    public static final int USE_HOST_RADIUS_OVERRIDE_FIELD_NUMBER = 3;
    private boolean useHostRadiusOverride_;
    /**
     * <pre>
     * Flag to ask the host for a default radius. If the host does not return a
     * radius, fall back to "radius_options". If this field is true and the host
     * has provided a default radius, radius_options will be ignored.
     * </pre>
     *
     * <code>optional bool use_host_radius_override = 3;</code>
     */
    public boolean hasUseHostRadiusOverride() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * Flag to ask the host for a default radius. If the host does not return a
     * radius, fall back to "radius_options". If this field is true and the host
     * has provided a default radius, radius_options will be ignored.
     * </pre>
     *
     * <code>optional bool use_host_radius_override = 3;</code>
     */
    public boolean getUseHostRadiusOverride() {
      return useHostRadiusOverride_;
    }
    /**
     * <pre>
     * Flag to ask the host for a default radius. If the host does not return a
     * radius, fall back to "radius_options". If this field is true and the host
     * has provided a default radius, radius_options will be ignored.
     * </pre>
     *
     * <code>optional bool use_host_radius_override = 3;</code>
     */
    private void setUseHostRadiusOverride(boolean value) {
      bitField0_ |= 0x00000020;
      useHostRadiusOverride_ = value;
    }
    /**
     * <pre>
     * Flag to ask the host for a default radius. If the host does not return a
     * radius, fall back to "radius_options". If this field is true and the host
     * has provided a default radius, radius_options will be ignored.
     * </pre>
     *
     * <code>optional bool use_host_radius_override = 3;</code>
     */
    private void clearUseHostRadiusOverride() {
      bitField0_ = (bitField0_ & ~0x00000020);
      useHostRadiusOverride_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners, org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, bitmask_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, radius_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(3, useHostRadiusOverride_);
      }
      if (radiusOptionsCase_ == 4) {
        output.writeUInt32(
            4, (int)((java.lang.Integer) radiusOptions_));
      }
      if (radiusOptionsCase_ == 5) {
        output.writeUInt32(
            5, (int)((java.lang.Integer) radiusOptions_));
      }
      if (radiusOptionsCase_ == 6) {
        output.writeUInt32(
            6, (int)((java.lang.Integer) radiusOptions_));
      }
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, bitmask_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, radius_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, useHostRadiusOverride_);
      }
      if (radiusOptionsCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(
              4, (int)((java.lang.Integer) radiusOptions_));
      }
      if (radiusOptionsCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(
              5, (int)((java.lang.Integer) radiusOptions_));
      }
      if (radiusOptionsCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(
              6, (int)((java.lang.Integer) radiusOptions_));
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Rounded corners for Views, expressed as a bit mask. If a container view has
     * rounded corners applied to it, then the contents of that view SHOULD also be
     * cropped to fit within the rounded rectangle bounding box established by the
     * container. Specifically, content within such a view SHOULD be cropped too,
     * without having to explicitly specify rounded corners on the child content.
     * Check [INTERNAL LINK] for any client-specific limitations that apply to the
     * current version of the implementation.
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.RoundedCorners}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.RoundedCorners)
        org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCornersOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public RadiusOptionsCase
          getRadiusOptionsCase() {
        return instance.getRadiusOptionsCase();
      }

      public Builder clearRadiusOptions() {
        copyOnWrite();
        instance.clearRadiusOptions();
        return this;
      }


      /**
       * <pre>
       * A bitmask representing which corners should be rounded. Bit values are
       * defined by the `Corners` enum. If no corners are specified, then all
       * corners will be rounded.
       * NOTICE: having a rounded corner with a border only on one side is strongly
       * discouraged as it leads to undefined and inconsistent behavior across
       * platforms.
       * </pre>
       *
       * <code>optional int32 bitmask = 1;</code>
       */
      public boolean hasBitmask() {
        return instance.hasBitmask();
      }
      /**
       * <pre>
       * A bitmask representing which corners should be rounded. Bit values are
       * defined by the `Corners` enum. If no corners are specified, then all
       * corners will be rounded.
       * NOTICE: having a rounded corner with a border only on one side is strongly
       * discouraged as it leads to undefined and inconsistent behavior across
       * platforms.
       * </pre>
       *
       * <code>optional int32 bitmask = 1;</code>
       */
      public int getBitmask() {
        return instance.getBitmask();
      }
      /**
       * <pre>
       * A bitmask representing which corners should be rounded. Bit values are
       * defined by the `Corners` enum. If no corners are specified, then all
       * corners will be rounded.
       * NOTICE: having a rounded corner with a border only on one side is strongly
       * discouraged as it leads to undefined and inconsistent behavior across
       * platforms.
       * </pre>
       *
       * <code>optional int32 bitmask = 1;</code>
       */
      public Builder setBitmask(int value) {
        copyOnWrite();
        instance.setBitmask(value);
        return this;
      }
      /**
       * <pre>
       * A bitmask representing which corners should be rounded. Bit values are
       * defined by the `Corners` enum. If no corners are specified, then all
       * corners will be rounded.
       * NOTICE: having a rounded corner with a border only on one side is strongly
       * discouraged as it leads to undefined and inconsistent behavior across
       * platforms.
       * </pre>
       *
       * <code>optional int32 bitmask = 1;</code>
       */
      public Builder clearBitmask() {
        copyOnWrite();
        instance.clearBitmask();
        return this;
      }

      /**
       * <pre>
       * The radius of the rounding applied to the specified corners, specified in
       * DP. This value must be non-zero, otherwise it’s a no-op.
       * This field is deprecated. Please use radius_options instead.
       * radius and radius_dp have the same functionality. Both fields can be
       * specified if there are concerns about users with old client versions that
       * don't support the new field yet. If the client does recognize the new
       * radius_options and the deprecated radius is specified as well, only
       * radius_options will be used.
       * </pre>
       *
       * <code>optional int32 radius = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean hasRadius() {
        return instance.hasRadius();
      }
      /**
       * <pre>
       * The radius of the rounding applied to the specified corners, specified in
       * DP. This value must be non-zero, otherwise it’s a no-op.
       * This field is deprecated. Please use radius_options instead.
       * radius and radius_dp have the same functionality. Both fields can be
       * specified if there are concerns about users with old client versions that
       * don't support the new field yet. If the client does recognize the new
       * radius_options and the deprecated radius is specified as well, only
       * radius_options will be used.
       * </pre>
       *
       * <code>optional int32 radius = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public int getRadius() {
        return instance.getRadius();
      }
      /**
       * <pre>
       * The radius of the rounding applied to the specified corners, specified in
       * DP. This value must be non-zero, otherwise it’s a no-op.
       * This field is deprecated. Please use radius_options instead.
       * radius and radius_dp have the same functionality. Both fields can be
       * specified if there are concerns about users with old client versions that
       * don't support the new field yet. If the client does recognize the new
       * radius_options and the deprecated radius is specified as well, only
       * radius_options will be used.
       * </pre>
       *
       * <code>optional int32 radius = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setRadius(int value) {
        copyOnWrite();
        instance.setRadius(value);
        return this;
      }
      /**
       * <pre>
       * The radius of the rounding applied to the specified corners, specified in
       * DP. This value must be non-zero, otherwise it’s a no-op.
       * This field is deprecated. Please use radius_options instead.
       * radius and radius_dp have the same functionality. Both fields can be
       * specified if there are concerns about users with old client versions that
       * don't support the new field yet. If the client does recognize the new
       * radius_options and the deprecated radius is specified as well, only
       * radius_options will be used.
       * </pre>
       *
       * <code>optional int32 radius = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearRadius() {
        copyOnWrite();
        instance.clearRadius();
        return this;
      }

      /**
       * <pre>
       * The radius specified in dp.
       * </pre>
       *
       * <code>optional uint32 radius_dp = 4;</code>
       */
      public boolean hasRadiusDp() {
        return instance.hasRadiusDp();
      }
      /**
       * <pre>
       * The radius specified in dp.
       * </pre>
       *
       * <code>optional uint32 radius_dp = 4;</code>
       */
      public int getRadiusDp() {
        return instance.getRadiusDp();
      }
      /**
       * <pre>
       * The radius specified in dp.
       * </pre>
       *
       * <code>optional uint32 radius_dp = 4;</code>
       */
      public Builder setRadiusDp(int value) {
        copyOnWrite();
        instance.setRadiusDp(value);
        return this;
      }
      /**
       * <pre>
       * The radius specified in dp.
       * </pre>
       *
       * <code>optional uint32 radius_dp = 4;</code>
       */
      public Builder clearRadiusDp() {
        copyOnWrite();
        instance.clearRadiusDp();
        return this;
      }

      /**
       * <pre>
       * An integer value between 1 and 100. The corner radius is calculated as a
       * percentage of the height of the element being rounded. It does not
       * require the height to be explicitly specified on the element.
       * For example:
       * height = 100dp, width = 50dp, radius_percentage_of_height = 20%
       * Actual radius (calculated by the client) = 20dp.
       * Note that the value calculated from the height (i.e. 20dp) will be
       * applied to both halves of any corners specified in the bitmask.
       * </pre>
       *
       * <code>optional uint32 radius_percentage_of_height = 5;</code>
       */
      public boolean hasRadiusPercentageOfHeight() {
        return instance.hasRadiusPercentageOfHeight();
      }
      /**
       * <pre>
       * An integer value between 1 and 100. The corner radius is calculated as a
       * percentage of the height of the element being rounded. It does not
       * require the height to be explicitly specified on the element.
       * For example:
       * height = 100dp, width = 50dp, radius_percentage_of_height = 20%
       * Actual radius (calculated by the client) = 20dp.
       * Note that the value calculated from the height (i.e. 20dp) will be
       * applied to both halves of any corners specified in the bitmask.
       * </pre>
       *
       * <code>optional uint32 radius_percentage_of_height = 5;</code>
       */
      public int getRadiusPercentageOfHeight() {
        return instance.getRadiusPercentageOfHeight();
      }
      /**
       * <pre>
       * An integer value between 1 and 100. The corner radius is calculated as a
       * percentage of the height of the element being rounded. It does not
       * require the height to be explicitly specified on the element.
       * For example:
       * height = 100dp, width = 50dp, radius_percentage_of_height = 20%
       * Actual radius (calculated by the client) = 20dp.
       * Note that the value calculated from the height (i.e. 20dp) will be
       * applied to both halves of any corners specified in the bitmask.
       * </pre>
       *
       * <code>optional uint32 radius_percentage_of_height = 5;</code>
       */
      public Builder setRadiusPercentageOfHeight(int value) {
        copyOnWrite();
        instance.setRadiusPercentageOfHeight(value);
        return this;
      }
      /**
       * <pre>
       * An integer value between 1 and 100. The corner radius is calculated as a
       * percentage of the height of the element being rounded. It does not
       * require the height to be explicitly specified on the element.
       * For example:
       * height = 100dp, width = 50dp, radius_percentage_of_height = 20%
       * Actual radius (calculated by the client) = 20dp.
       * Note that the value calculated from the height (i.e. 20dp) will be
       * applied to both halves of any corners specified in the bitmask.
       * </pre>
       *
       * <code>optional uint32 radius_percentage_of_height = 5;</code>
       */
      public Builder clearRadiusPercentageOfHeight() {
        copyOnWrite();
        instance.clearRadiusPercentageOfHeight();
        return this;
      }

      /**
       * <pre>
       * An integer value between 1 and 100. The corner radius is calculated as a
       * percentage of the width of the element being rounded. It does not
       * require the width to be explicitly specified on the element.
       * For example:
       * height = 100dp, width = 50dp, radius_percentage_of_width = 20%
       * Actual radius (calculated by the client) = 10dp.
       * Note that the value calculated from the width (i.e. 10dp) will be
       * applied to both halves of any corners specified in the bitmask.
       * </pre>
       *
       * <code>optional uint32 radius_percentage_of_width = 6;</code>
       */
      public boolean hasRadiusPercentageOfWidth() {
        return instance.hasRadiusPercentageOfWidth();
      }
      /**
       * <pre>
       * An integer value between 1 and 100. The corner radius is calculated as a
       * percentage of the width of the element being rounded. It does not
       * require the width to be explicitly specified on the element.
       * For example:
       * height = 100dp, width = 50dp, radius_percentage_of_width = 20%
       * Actual radius (calculated by the client) = 10dp.
       * Note that the value calculated from the width (i.e. 10dp) will be
       * applied to both halves of any corners specified in the bitmask.
       * </pre>
       *
       * <code>optional uint32 radius_percentage_of_width = 6;</code>
       */
      public int getRadiusPercentageOfWidth() {
        return instance.getRadiusPercentageOfWidth();
      }
      /**
       * <pre>
       * An integer value between 1 and 100. The corner radius is calculated as a
       * percentage of the width of the element being rounded. It does not
       * require the width to be explicitly specified on the element.
       * For example:
       * height = 100dp, width = 50dp, radius_percentage_of_width = 20%
       * Actual radius (calculated by the client) = 10dp.
       * Note that the value calculated from the width (i.e. 10dp) will be
       * applied to both halves of any corners specified in the bitmask.
       * </pre>
       *
       * <code>optional uint32 radius_percentage_of_width = 6;</code>
       */
      public Builder setRadiusPercentageOfWidth(int value) {
        copyOnWrite();
        instance.setRadiusPercentageOfWidth(value);
        return this;
      }
      /**
       * <pre>
       * An integer value between 1 and 100. The corner radius is calculated as a
       * percentage of the width of the element being rounded. It does not
       * require the width to be explicitly specified on the element.
       * For example:
       * height = 100dp, width = 50dp, radius_percentage_of_width = 20%
       * Actual radius (calculated by the client) = 10dp.
       * Note that the value calculated from the width (i.e. 10dp) will be
       * applied to both halves of any corners specified in the bitmask.
       * </pre>
       *
       * <code>optional uint32 radius_percentage_of_width = 6;</code>
       */
      public Builder clearRadiusPercentageOfWidth() {
        copyOnWrite();
        instance.clearRadiusPercentageOfWidth();
        return this;
      }

      /**
       * <pre>
       * Flag to ask the host for a default radius. If the host does not return a
       * radius, fall back to "radius_options". If this field is true and the host
       * has provided a default radius, radius_options will be ignored.
       * </pre>
       *
       * <code>optional bool use_host_radius_override = 3;</code>
       */
      public boolean hasUseHostRadiusOverride() {
        return instance.hasUseHostRadiusOverride();
      }
      /**
       * <pre>
       * Flag to ask the host for a default radius. If the host does not return a
       * radius, fall back to "radius_options". If this field is true and the host
       * has provided a default radius, radius_options will be ignored.
       * </pre>
       *
       * <code>optional bool use_host_radius_override = 3;</code>
       */
      public boolean getUseHostRadiusOverride() {
        return instance.getUseHostRadiusOverride();
      }
      /**
       * <pre>
       * Flag to ask the host for a default radius. If the host does not return a
       * radius, fall back to "radius_options". If this field is true and the host
       * has provided a default radius, radius_options will be ignored.
       * </pre>
       *
       * <code>optional bool use_host_radius_override = 3;</code>
       */
      public Builder setUseHostRadiusOverride(boolean value) {
        copyOnWrite();
        instance.setUseHostRadiusOverride(value);
        return this;
      }
      /**
       * <pre>
       * Flag to ask the host for a default radius. If the host does not return a
       * radius, fall back to "radius_options". If this field is true and the host
       * has provided a default radius, radius_options will be ignored.
       * </pre>
       *
       * <code>optional bool use_host_radius_override = 3;</code>
       */
      public Builder clearUseHostRadiusOverride() {
        copyOnWrite();
        instance.clearUseHostRadiusOverride();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.RoundedCorners)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners other = (org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners) arg1;
          bitmask_ = visitor.visitInt(
              hasBitmask(), bitmask_,
              other.hasBitmask(), other.bitmask_);
          radius_ = visitor.visitInt(
              hasRadius(), radius_,
              other.hasRadius(), other.radius_);
          useHostRadiusOverride_ = visitor.visitBoolean(
              hasUseHostRadiusOverride(), useHostRadiusOverride_,
              other.hasUseHostRadiusOverride(), other.useHostRadiusOverride_);
          switch (other.getRadiusOptionsCase()) {
            case RADIUS_DP: {
              radiusOptions_ = visitor.visitOneofInt(
                  radiusOptionsCase_ == 4, radiusOptions_, other.radiusOptions_);
              break;
            }
            case RADIUS_PERCENTAGE_OF_HEIGHT: {
              radiusOptions_ = visitor.visitOneofInt(
                  radiusOptionsCase_ == 5, radiusOptions_, other.radiusOptions_);
              break;
            }
            case RADIUS_PERCENTAGE_OF_WIDTH: {
              radiusOptions_ = visitor.visitOneofInt(
                  radiusOptionsCase_ == 6, radiusOptions_, other.radiusOptions_);
              break;
            }
            case RADIUSOPTIONS_NOT_SET: {
              visitor.visitOneofNotSet(radiusOptionsCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.radiusOptionsCase_ != 0) {
              radiusOptionsCase_ = other.radiusOptionsCase_;
            }
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  bitmask_ = input.readInt32();
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000002;
                  radius_ = input.readInt32();
                  break;
                }
                case 24: {
                  bitField0_ |= 0x00000020;
                  useHostRadiusOverride_ = input.readBool();
                  break;
                }
                case 32: {
                  radiusOptionsCase_ = 4;
                  radiusOptions_ = input.readUInt32();
                  break;
                }
                case 40: {
                  radiusOptionsCase_ = 5;
                  radiusOptions_ = input.readUInt32();
                  break;
                }
                case 48: {
                  radiusOptionsCase_ = 6;
                  radiusOptions_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.RoundedCorners)
    private static final org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new RoundedCorners();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<RoundedCorners> PARSER;

    public static com.google.protobuf.Parser<RoundedCorners> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
